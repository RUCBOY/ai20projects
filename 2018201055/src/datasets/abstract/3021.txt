There is growing diversity in the design of introductory programming environments. Where once all novices learned to program in conventional text-based languages, today, there exists a growing ecosystem of approaches to programming including graphical, tangible, and scaffolded text environments. To date, relatively little work has explored the relationship between the design of novice programming environments and the programming practices they engender in their users. This paper seeks to shed light on this dimension of learning to program through the careful analysis of novice programmers’ experiences learning with a hybrid block/text programming environment. Specifically, this paper is concerned with how novices leverage the various affordances designed into programming environments and programming languages to support their early efforts to author programs. We explore this relationship through the construct of modality using data from a study conducted in a high school computer science classroom in which students spent five weeks working in block-based, text-based, and hybrid block/text programming environments. This paper uses a detailed vignette of a novice writing a program in the hybrid environment as a way to characterize emerging programming practices, then presents analyses of programming trends from the full study population to speak to the generality of the practices identified in the vignette. The analyses focus not only on characterizing authoring strategies but also on identifying patterns in novices’ help-seeking behaviors. By focusing on how modality influences novices’ emerging programming practices, this paper contributes to our understanding of the relationship between programming environment and learning, illuminating the role of design in shaping introductory programming experiences.
