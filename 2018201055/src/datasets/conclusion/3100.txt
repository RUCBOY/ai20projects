In a recent article, Vinton Cerf, one of the fathers of the Internet, called attention to the growing need for responsible programming in industry (Cerf, 2014). Such term is defined as a clear sense of responsibility programmers should have for their systems’ reliable operation and resistance to compromise and error. We also believe programmers should be more responsible for the code they produce, specially today when so many depend heavily on software to work as advertised.
However, Cerf suggests that in order to achieve responsible programming, we need better tools and programming environments. While we agree with him, we believe that better training of professionals and instructors could also improve the quality of the produced software, in particular by the teaching of classical Software Testing theory. Other authors have argued that more exposure to Software Testing practices and tools is required for better training of software developers (Clarke, Davis, King, Pava, Jones, 2014, Wong, 2012).
In this paper we presented scientific evidence for such a claim. We conducted an experiment to verify the impact that testing knowledge has on programming skills, in terms of reliability. Our results suggest that after learning basic testing principles and techniques, developers are more than twice more likely to produce correct implementations. Moreover, our data suggests that although the code produced afterwards is more reliable, it does not tend to be significantly larger (in terms of lines of code). This indicates that the exposure to testing knowledge can make developers produce more reliable implementations with approximately the same amount of code. The performance of two control groups taking a Software Engineering and an OO design course was very different. In fact, for these groups the acquired knowledge did not seem to impact on the subjects’ programming skills with respect to reliability.
On the other hand, we also wanted to evaluate the level of ST knowledge of instructors that teach programming courses themselves. In a survey involving 53 CS professors we show that these subjects lack the basic ST knowledge that was indicated in the students’ evaluation to be effective for more reliable programming. This is an issue because programming apprentices might be failing to learn valuable programming concepts early in their programs.
Future work includes the replication of our experiment with professional developers and larger groups of students to shed more light on this subject. Moreover, it would be interesting to conduct experiments to further analyze how training in each separate testing technique can impact on programming skills (e.g., by performing several programming tasks along the course).
