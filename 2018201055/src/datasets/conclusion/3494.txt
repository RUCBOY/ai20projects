In our current work, it is more meaningful to focus on collision detection between irregular walls and particles by using GPU to accelerate this computation process. In this paper, we have designed some algorithms to achieve this goal. In the experiment part, we have tested and compared the efficiencies between CPU and GPU based algorithm, particles and triangles based traverse methods, circumcircle based and gravity based method. At the same time, we discuss the influences of different number of particles, grid length, different GPUs and relationship between these parameters and computation time. The experiment results prove that the algorithms proposed in this paper are not only feasible and effective, but also efficient.
The collision detection of a large number of particles in the physic simulation is still very challenging, especially the real-time display of a large number of particles is still an open issue. With the help of a K80 GPU, we can detect collision between a million particles and a fairly complex model in no more than 2 seconds. We can also conclude that one potent way to improve computing efficiency in this algorithm is to reduce the number of the divided triangles. In this paper, we present two methods for triangle division. However, as we know, when the length of a triangleâ€™s edge is limited, an equilateral triangle is the biggest triangle. Therefore, dividing triangles into equilateral triangles will reduce the number of triangles after dividing, so as to improve the computation efficiency considerably. Delaunay triangulation is a very important technology in the field of finite element analysis and computer graphics [33], [34]. The triangles divided by this method are approximately regular. So Delaunay triangulation is instructive in triangle division. However, this method is used for polygon triangulation rather than triangle division. More generally, how to divide a large triangle into small triangles, whose side length is limited to a fixed maximum value, and make sure that the number of divided triangles is minimum, is still an issue.
On the other hand, providing simulation services on Web is one of the future development directions of next generation Web application. In general, more simulation services could be provided to users who are lacking high cost simulation environment, such as chemical reaction simulation, biological evolution simulation and more physic simulation etc. Such systems can be implemented as cloud platforms. With the increase of the number of users, task scheduling algorithm is more and more important to intelligently assign compute nodes. Although a prototype system was implemented in our paper, further explorations on how to optimize such on-line simulation system still need to be performed.
