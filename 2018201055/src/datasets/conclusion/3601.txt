As computer clusters and distributed systems become more and more popular, the need to improve the performance of such systems becomes a challenge, that if properly mastered could accelerate the evolution of science or could reset the positions of industry giants. It is clear that the schedulers from such systems have a certain impact on the efficiency of parallel systems. Machine learning and artificial intelligence are gaining ground, intelligent solutions, that learn from the past and adapt, will become the norm when dealing with complex problems. Task schedulers in distributed systems would benefit greatly from intelligent agents, learning from past mistakes, exploring and finding new solutions that no human might have though before.
In this paper, a platform, offering scheduling solutions as a service based on machine learning agents, was described, and a reinforcement learning world model for scheduling was proposed. The platform, know as the Machine Learning Box, allows further development of scheduling algorithms and an easy integration process. The application model can easily be mapped on parallel systems, in order to scale and increase the overall efficiency. The learning model proved to have its limitations, due to the complex nature of a distributed system and the proposed codification as a world of states. While this codification works on smaller systems, the more nodes were added to the system the larger the world got, leaving the reinforcement learning agent incapable of properly learning an optimal policy.
For future work the platform could be extended to support other types of algorithms and scheduling methods. Naturally the efficiency and bottlenecks of a parallel implementation of the platform could be analyzed. As for the reinforcement learning used in scheduling in distributed systems, other techniques should be experimented, as well as other world models that could reduce the number of states and enhance the method. Worth exploring would be a model that does not combine the states of each node of the cluster, but creates individual policies that give utilities to the action of refusing or accepting a task to be assigned.
