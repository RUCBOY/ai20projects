The main goal of this paper is to understand the applicability of Jacobi and block Jacobi iterations for solving the sparse triangular systems arising from incomplete Cholesky preconditioning. As always, artificial problems can be constructed to defeat the Jacobi approach. However, we find that for a diverse set of realistic symmetric positive definite test problems using IC(0)-PCG and IC(1)-PCG, Jacobi iterations are effective for a large proportion of the problems. We also showed that by using block Jacobi, robustness could be enhanced. Even better results for some problems could be obtained by using blocking techniques that use matrix values (e.g., priority blocking).
We note that these results do depend on the parallelism of the computing architecture. The use of (block) Jacobi is targeted for high parallelism cases, like GPUs and manycore CPUs. With lower amounts of parallelism, there are two main effects: (1) the advantage of using (block) Jacobi over exact solves inside PCG is smaller or may not be effective, and (2) it is possible that the PCG solve time as a function of the number of sweeps might only increase and not decrease, i.e., more sweeps always increase the PCG solve time because the (block) Jacobi triangular solves are not computed fast enough for there to be an advantage to using multiple sweeps.
This paper did not address how to choose the optimal number of Jacobi sweeps to use in the PCG solver. A fixed number of sweeps is desirable, as the preconditioner is then a fixed operator and a “flexible” solver is not needed. However, in practice, the number of sweeps could be adjusted dynamically and the iterations restarted based on the convergence of PCG. If a flexible solver is available, e.g., FGMRES [31] or flexible conjugate gradients [[7], [27]], then a different number of Jacobi sweeps based on the residual norm reduction for each approximate triangular solve could be used.
A caveat when reading the results of this paper is that no preconditioner is best for all problems, as the choice of preconditioner must be matched to the difficulty (e.g., conditioning) of the problem. Thus in this paper we do not imply that incomplete factorization preconditioning combined with Jacobi iterative triangular solves is the best method to use for all problems. Instead, if incomplete factorization is deemed to be effective for a given problem compared to other preconditioners, then it is likely that Jacobi triangular solves will yield a speedup over traditional triangular solves on highly parallel computer architectures.
