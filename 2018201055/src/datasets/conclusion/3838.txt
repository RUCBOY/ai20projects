The adoption of remediation actions in order to mitigate the effects of a problem being addressed is not an uncommon strategy to deal with situations in which the cause of the problem cannot be solved in a timely fashion or is unknown. This idea is implemented in application-specific, including agent-based, solutions. In this paper we looked at this scenario in an abstract way, and proposed a BDI-agent-based approach in which agents can autonomously choose and execute remediation plans to deal with a problem, and also search, identify, and resolve its causes. Our approach is composed of structural and behavioural parts. The former consists of an architecture, which extends the traditional BDI components by adding mainly the notion of constrained goals, plan required resources and cause-effect relationships. The latter provides the specification of two abstract functions of the BDI reasoning cycle, which are the plan selection and goal generation functions. In order to evaluate our approach, we considered an existing strategy for combating distributed denial-of-services (DDoS) attacks, which uses remediation actions before addressing the cause of the attack. By using our approach, we demonstrated that our extended BDI agent can autonomously select appropriate plans to deal with the attack and generate goals to identify and resolve its cause. Moreover, we compared the performance of our approach with the existing implementation of this strategy, and results indicate that our approach reduces development effort and does not reduce performance due to the automated reasoning made at runtime. Our work thus provides a ready-to-use solution in which agents are provided with a sophisticated and flexible problem-solving strategy, promoting software reuse in software agents.
This work leaves many open challenges that can be addressed to further improve our problem-solving strategy. For example, satisfying all goal constraints may be infeasible, but achieving the goal may be more important than satisfying all constraints. Therefore, dealing with over-constrained cases is relevant. Moreover, goals associated with cause factors may also be constrained goals, and there must be ways to specify constraints and optimisation function for them. In addition, one of the main weaknesses of our approach is the need for manually specifying domain-specific causal models at design time. Providing a solution able to automatically generate such models from information collected at runtime would reduce even more the effort of developing systems with remediative behaviour and increase the systemsâ€™ ability to dynamically cope with unpredictable scenarios. This can be achieved, e.g., by using learning approaches such as case-based reasoning. Another issue is that our work is unable to automatically manage remediative actions that must be reverted after their corresponding problems are completely solved. The development of a solution able to identify and revert these actions would benefit not only the kind of scenario addressed in this work, but any situation in which the effects of an action must be temporary. Finally, in order to demonstrate its feasibility and to promote the use of our solution in industry, the development of real world applications and testbeds is mandatory. These are extensions and development tasks that are ongoing work.
