Program execution analysis is often desirable in digital forensic investigations to know the programs executed on the system and their execution history. The program execution analysis would uncover benign or evil programs executed, execution timestamp values, execution file path, and the user who launched the programs; even the timestamp of deletion, if the programs have been removed from the system after accomplishing the intended task. Fortunately, modern Windows operating systems generate numerous artifacts of program executions at various locations in hard disk. The analysis of relevant artifacts would greatly help in constructing comprehensive timelines of the user's activity on a suspected system.
The paper chiefly investigated eleven programs execution artifacts: Prefetch, Jump Lists, Shortcut (LNK), UserAssist, Amcache.hve, IconCache.db, AppCompatFlags, AppCompatCache, RunMRU, MuiCache and SRUDB.dat, that are created and stored at various locations in hard disk, when the user launches certain types of applications. The location and the underlying structure of these artifacts in various versions of Windows system are presented. Numerous experiments were performed on a latest version of Windows OS (Windows 10 Pro v1703, at the time of writing this paper) in a virtual machine to investigate the effects of running applications on the considered artifacts. The experiments were devised, mainly in three sets: running benign applications (Set-A), running anti-forensic tools (Set-B), and running a malware program (Set-C). For performing the experiments in Set-A, we considered host-based executables, user applications, portable applications, and Windows Store Apps. The results of experiments carried out in Set-A demonstrate that more and more information is being recorded in program execution artifacts from newer version of Windows. For instance, evidence of execution of Windows Store Apps were not recorded in Amcache.hve until Windows 10 Pro v1703 (Creators update). The experiment in Set-B focuses on the evidence scrubbing in considered program execution artifacts, as a result of running five popular privacy protection tools. The result of this experiment demonstrates that Amcache.hve, IconCache.db, AppCompatCache, and SRUDB.dat artifacts remain untouched by all considered anti-forensic tools, while all tools were able to delete UserAssist, RunMRU, and MuiCache registry keys. The experiment in Set-C was devised to observe the effects on program execution artifacts when the system is infected with a malware program. We could not find any evidence of considered malware in Jump Lists, Shortcut (LNK), Amcache.hve file, IconCache.db, RunMRU, and MuiCache extracted from the compromised system.
Thus, program execution analysis is extremely useful asset both for forensic and malware analysts. Forensic analysts can use this method to track external programs (run from USB or network drive), deleted programs, and for detection of anti-forensic tools used to hinder the forensic investigations. The observations drawn in this study are dependent on the version of Windows system used and may vary in other Windows platforms. Due to changing nature of Microsoft Windows, comparison and their forensic significance of considered program execution artifacts may differ. Thus, forensic analysts are suggested to test the findings in the environment under examination.
Further study can be aimed at designing a correlation model that will automatically combine and correlate the information from all possible program executions artifacts. Also, analysts can add other program executions artifacts, such as Event logs, Uninstall key and Legacy registry keys, memory dumps, and USN journal. As, malware programs use different hiding techniques to avoid detection and analysis (for instance, rootkits, binary obfuscation, code, process, and DLL injection, binding to a legitimate program, timing-based evasion etc.). Thus, running two different malware programs may result in different effects on the considered program execution sources. Thus, future study can be focused on the evaluation of evidence destruction capabilities of other modern malware programs.
