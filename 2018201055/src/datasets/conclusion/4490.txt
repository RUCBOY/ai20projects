We feel that the cadence is an important primitive. It leads to a plethora of open research questions and will, undoubtedly, aid in our understanding of string regularities. We leave as open problems finding an output-sensitive algorithm for reporting all the k-cadences for k≥2, or a subquadratic algorithm for determining whether there is a k-cadence for a given k≥4, or a linear algorithm for finding all anchored cadences. We are also curious about how to define properly, and find efficiently, approximate cadences. Finally, we are interested in developing better algorithms for finding sub-cadences.
The sub-cadence graph has the largest number of edges in the case of fixed finite alphabets, for example, binary alphabets. In this case our algorithm for finding all sub-cadences takes quadratic time. While it is clear that the sum of the lengths of all sub-cadences is, in this case, quadratic, it is not necessarily the case that there are a quadratic number of sub-cadences. The first challenge is to find the sub-cadences in time proportional to the number of sub-cadences. Further challenges are finding efficient algorithms that detect all maximal density cadences in optimal time. Notice that unlike the periodicity lemma which guarantees a unique smallest period, there may be O(nlog⁡n) maximal cadences.
