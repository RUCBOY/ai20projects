This paper presents an algorithm for data leakage detection based on user's anomalous behaviour identification. It is structured in consecutive steps, the last one to double-check the decision on whether or not it is an attempted attack. The algorithm works with the probability of sequences of the tasks performed by a user into a computer. It has been proved efficient in terms of accuracy and with a very low false positive rate, which is one of its main advantages.
Another contribution of this paper is the representation of the usersâ€™ behaviour. The codification of the tasks (operations, files) of each user has been performed defining a data structure that allows us to implement different size of sequences and sessions, i.e., it is very flexible.
Besides, after the analysis of the computational time the algorithm requires, we have drawn the conclusion that it can be used as a software monitor since it does not overhead the working time. In other words, when a user is executing a sequence of activities, the detection system monitors his activity at the same time but without slowing down the pace of work. Moreover, it can be implemented in any computer system and it is scalable.
The algorithm has been validated using real data that come from a governmental institution of Ecuador. The test results prove the good performance of this decision system for data leakage detection (94,78% DR). In addition, this algorithm was not only applied to that institutional database but it has also been applied to a public database of Unix commands with very good results (96,03%). This proves the potential of this algorithm to be applied to any other real problems as long as the data can be codified as sequences.
We think that the main limitation of our proposal is that it is a supervised algorithm, it works with historical data, and therefore we need information from the users to generate their behavioural pattern (in our case at least data of the last three months). In fact, if the sequence of tasks carried out by a user in a session is too short, the system would be not able to detect whether it is normal or not. Another limitation of our approach is that it is focused on detection and not prevention.
As future work we should be able to analyze a higher number of subsequences of tasks at the same time in order to make it quicker. Another way of improving the detection system would be to add extra information from other sources that could help to define a more complete user behavioural profile and so to enhance the reliability of the system. In a near future we would like to apply fuzzy logic in order to make a decision on blocking the system or raising an alarm, and to improve the results of the first step of the algorithm using neural networks.
