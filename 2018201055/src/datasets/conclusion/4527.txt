We present a novel fast force-directed method for drawing graphs, which can be used for interactive visualization of big complex networks. The time and space complexity of the method is at most O(|E| + rn|V|) and at least O(n|V|), where n = nn + rn is small and belongs to <1,10> interval, depending on the type of network visualized. For each vertex the values of nn and nr are the numbers of randomly selected connected and disconnected graph nodes, respectively.
The assumption that the undirected graph G is defined as a set of vertices ω∈V with binary dissimilarity measure δ(,) for which δ(ωi,ωj) = 0 if two vertices i,j are connected, and δ(ωi,ωj) = 1 otherwise, is a crucial concept of our method. Artificially forced zeroing of nn distances from each vertex to the connected neighbors allows for clustering of similar vertices while assuming non-zero distance to other disconnected nodes spread them apart. We demonstrate that this procedure allows to produce in 2D a clear multiscale pattern of similar and dissimilar clusters of vertices with their interrelations. For low-dimensional planar graphs one can assume that for disconnected vertices δ(ωi,ωj) is equal to the graph distance. However, this assumption is redundant for highly non-planar complex networks and only increases the memory complexity not improving the visualization quality. In the context of the force-directed MDS based methods, which reconstruct the graph in the 2D Euclidean space, the number of dissimilarities, which is sufficient to obtain a stable solution of minimization problem (1), should be slightly greater than 2·N. Thus the value of n = nn + rn can be small. Therefore, we need to know only a very small fraction of elements of dissimilarity matrix D to reconstruct properly the multiscale structure of complex networks in 2D space.
To prove the correctness of our approach we tested it first on the planar and the nearest neighbor non-plannar graphs (nn-graphs). We demonstrate that it produces fair reconstructions of both regular and irregular 2D networks. However, we obtained much better result for visualizations of the nearest neighbor graphs such as nn-graphs of MNIST and TWG datasets. We did similar experiments on other known datasets such as NORB and REUTERS, which confirmed the efficiency and precision of ivga method. The method is really very efficient. The visualization of MNIST nn-graph consisting of 7 × 104 vertices needs tens seconds of CPU time on a single core of Intel® i5 (1.7 GHz) processor.
We also obtained convincing results of large complex networks visualization by testing the method on a few examples from the Stanford Large Network Dataset Collection. However, in this case the only confirmation of the correctness of our results is their resemblance to the visualizations of the networks obtained by Yifan Hu group from the University of Florida and presented in the Sparse Matrix Collection [13]. Detailed analysis of the visualization results needs more information about these networks, not provided by the SNAP (Stanford Network Analysis Platform) webpage [12] and should be verified on the case by case basis.
The high efficiency of ivga comes at cost of rather average quality of visualization. The aesthetics of graph details is medium. However, our method is focused on eliciting muti-scale cluster structure of vertices and, at most, interconnection between clusters rather than revealing fine patterns involving single vertices. Thus the method can be used for coarse grain visualization of big graphs and as a preliminary result of big network reconstruction whose interesting parts may be further tuned by using other aesthetic criteria.
To obtain a useful 2D reconstruction of a given network we recommend to match the parameters interactively by using a graphic user interface (similar to that employed in Gephi or other graphviz platforms [35]) which allows for manipulations both on running simulation and on the final graph 2D reconstruction. The screenshot of the main panel of ivga GUI is shown in Fig. 9.Download : Download high-res image (930KB)Download : Download full-size imageFig. 9. The print screen of GUI of our system for interactive visualization of large networks.
Our approach can be also used for data embedding problem, provided that the nearest neighbor graph of data will be produced first. The usefulness of employing the nearest neighbor graph in data embedding was also confirmed by the recent publication by Tang et al. [8] and their LargeVis method.
In the future we plan to continue our works on even stronger integration of these two issues: graph visualization and high-dimensional data embedding, in a single visualization framework. Particularly, in the context of interactive visualization of big and distributed data. To this end, we aim to develop parallel versions of ivga on various modern computer architectures and programming environments. First, we plan to implement a new ivga version focused on the multi-core processors and modern GPU/CUDA architectures. This would allow data scientists to analyze visually complex networks consisting of 107 vertices by using a notebook. However, our greatest challenge for the future is the implementation of ivga on a modern Big Data system to visualize interactively data from huge distributed data bases.
