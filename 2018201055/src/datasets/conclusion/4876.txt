This section discusses future possibilities for improving this work, followed by a conclusion.
8.1. Future workSOFIA suffers from performance overhead due to increased code size, cycle overhead, and clock speed degradation. This is largely due to the strict set of constraints that are imposed on the software, leading to the insertion of a large number of padding instructions and multiplexer trees. In the future, the toolchain can be optimized to improve the cycle overhead by reducing the number of inserted and executed padding instructions. Large improvements in cycle overhead could probably be obtained by optimizing the length of the paths taken through multiplexer trees. We further plan to further improve the toolchain by adding support for enabling optimization passes. In addition, we plan to improve the hardware implementation by providing support for interrupts, followed by an evaluation with benchmarks running on an operating system. It would further be interesting to harden SOFIA against side-channel attacks.
8.2. ConclusionIn this paper, we demonstrated the practical feasibility of providing protection against code reuse and code injection attacks using a new security architecture called SOFIA. The architecture's security policies are enforced in hardware and it protects software through cryptographic mechanisms. Specifically, the architecture provides software integrity protection, fine-grained control flow integrity, and software copyright protection. To evaluate the design, we integrated SOFIA with a LEON3 core, and made an FPGA-based hardware implementation. The SOFIA core increased the hardware area of the LEON3 core by 12.9%, and reduced the maximum clock frequency by 23.2%. In addition, a software toolchain was developed to transform software written in C to conform to the constraints imposed by our architecture. We compiled several software benchmarks with our toolchain to evaluate the overhead imposed by the SOFIA architecture. Altogether SOFIA imposes an average cycle overhead of 141%, and an average total execution overhead of 373% when compared to a stock LEON3 core.
