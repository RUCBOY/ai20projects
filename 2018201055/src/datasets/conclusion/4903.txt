This paper presents the DORADO protocol, a first step for integrating coordination services in Kubernetes, a container management system. DORADOâ€™s design is simpler than others as it uses share memory to mediate communication and persist data. Requests can be sent to any replicated container, matching the cloud nature in regard to load balancing.
Future steps in this work include moving coordination to a component in Kubernetes, which will actually reduce the size of containers. This could be done moving the coordination to the proxy, or using a leaderless protocol as EPaxos [24] to avoid the necessity of choosing a proxy-leader. Another improvement would be to take the leader election out of the SM, so that it runs separately from etcd and Raft is no longer needed. Kubernetes itself can be used for doing leader election.7
The extension of DORADO to the Byzantine domain should be a challenge, because there are issues to be solved about isolation. Additional security layers are required to protect containers against malicious actors [15]. However, the execution of containers inside VM could result in excessive overheads.
DORADO could be implemented in systems like Apache Mesos8 and Docker Swarm9, which use ZooKeeper and Consul, respectively, to maintain the state of the cluster. ZooKeeper and Consul have similar features to etcd. ZooKeeper can be used to obtain sequential numbers with the sequential flag that provides unique znode names [25]. This feature might be leveraged to develop a new protocol to define the ordering of requests based on destination agreement [18].
