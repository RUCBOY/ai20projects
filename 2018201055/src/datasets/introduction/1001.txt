The success of modern biomedicine can often be attributed to the workflow adopted by researchers to develop new pharmaceutical compounds via computations and in a laboratory environment, test them within clinical settings, and develop protocols and guidelines for broader community usage of best therapies. The success of this translational approach has brought focus to the need of progressive testing of solutions in real settings, and the need to feed the insights gained (both negative and positive) back to the basic research effort in order to improve research outcomes [1], [2]. Over the past decade, several institutions and funding bodies have supported translational research (TR) as the foundation for transferring research outcomes into practice. For instance, the National Institute of Health (NIH) has made translational research a priority, forming centers of translational research at its institutes and launching specific, TR-focused programs [3]. Institutions of higher-education have also conducted internal surveys to understand the impact of TR practices adopted by their faculty and research staff [4].
Although the benefits of TR have been well-acknowledged in the health sciences domain (both by scientists and funding bodies), the traditional research workflow in computer science (CS) still does not have well-defined best practices. Additionally, there is a lack of support in CS for embracing TR as part of the critical path of the research development process [5]. On the other hand, as CS permeates not only traditional physical sciences, but also social sciences, humanities, and in fact every aspect of our lives, some CS researchers see the value of examining the entire innovation cycle from conceptualization and initial research to testing at scale in real environments to broad community adoption. In this context, this paper examines translational computer science (TCS) as defined by Abramson and Parashar [5], and describes how this process of innovation has driven the development and adoption of the Pegasus workflow management system [6], [7], and what were the challenges that the project faced over the years. Pegasus came out of an NSF-funded project that aimed to explore the concept of virtual data in science [8]. That grant specifically funded interdisciplinary research in CS and astronomy/physics. As a result, Pegasus was born out of our belief that the value of our work lay not only in the novel computer science algorithms but also in the software that leveraged these algorithms to advance domain science. Thus, the translational aspects of CS grew organically to some degree.
In this paper, we examine the various facets of TCS with the lens of the Pegasus experience, and discuss the challenges we faced for over twenty years of the project's lifespan. Specifically, we delineate how TCS principles have been incorporated into the research and development process of the Pegasus software, and how we have leveraged community engagement and feedback for driving novel software requirements and future research directions. We also discuss the challenges we have faced along these years regarding translational research, and we recommend potential solutions for incorporating TCS into the critical path of development and research processes.
This paper is organized as follows. Section 2 presents an overview of Pegasus and its user communities. In Section 3, we briefly describe the concepts of TCS as used in this paper. Section 4 presents our experience in designing Pegasus, and how TCS has been applied during the lifespan of the project. Section 5 discusses the challenges in performing TCS and how we have overcome them. Section 6 concludes the paper with a summary of discussions and perspectives on future directions.
