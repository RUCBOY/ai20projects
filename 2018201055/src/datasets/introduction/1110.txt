The ever-growing advances in science and technology have led to a rapid increase in the simulation methods, models and techniques to support the analysis of complex systems, also through digital twins (see, e.g., [6], [59]). A lot of scientific events, publications, journals, and grants are dedicated to computer simulation in computational physics and astrophysics, climatology, manufacturing, and medicine. In the simulation domain, particular interest is paid to hybrid systems that inherently combines continuous and discrete behaviours that constantly interact with each other (see, e.g., [2], [18], [34]). Typically, continuous behaviours are specified through Ordinary Differential Equations (ODEs), whereas discrete ones are described by control graphs (see, e.g., [4], [21], [41]).
Hybrid systems evolve over time and can switch from an operation mode to another one when specific conditions occur (see, e.g., [34], [46]). The state of a hybrid system is defined by the values of its continuous variables in a given discrete mode. Specifically, the state changes either continuously, based on the results coming from the differential equations, or discretely based on the control graph conditions. Continuous flow is allowed as long as invariants hold, whereas discrete transitions occur as soon as switch conditions related to external and internal events are satisfied (see, e.g., [1], [34]). Understanding, studying and designing hybrid systems is going to be a great challenge in the next years, which requires the development of appropriate solutions capable of appropriately managing their complexity (see, e.g., [30], [58]). In particular, development of new efficient numerical methods for solving either hybrid systems or other numerical problems in simulation is required.
In this paper, Simulink – a Matlab-based graphical programming environment for simulation and modelling dynamical systems – is considered for dealing with the above mentioned issues. Simulink is widely used by both engineers and scientists for working with difficult real-life problems (see, e.g., [20], [23], [24]). However, many numerical methods for solving such problems involve the use of derivatives: see, e.g., [14] in electronics, [37], [40] in nonlinear control and dynamic systems, and [33], [38] in optimization.
In this context, not only differentiation of a univariate function is important, but also computation of higher order Lie derivatives, in particular, embedded in the numerical solution to ODEs. As it has been discussed previously, numerical solution to ODEs is of particular interest in simulation. Often, efficient numerical methods for solving ODEs involve higher order Lie derivatives. As claimed in several works (see, e.g., [36]), even though these methods can have important theoretical properties, their concrete use is limited due to difficulties in computation of the derivatives of the unknown solution to the ODE. Moreover, frequently, the efficiency of these methods strictly depends on the precision of computation of the derivatives (see, e.g., [35], [62]).
There exist several widely used methods for the differentiation of a univariate or multidimensional function: Automatic or Algorithmic Differentiation (AD) (see, e.g., http://www.autodiff.org for complete information about these techniques and, in particular, [7], [57], [60]), Symbolic Differentiation (SD) (see, e.g., Matlab symbolic toolbox https://mathworks.com/products/symbolic.html), Numerical differentiation (ND) (see, e.g., [19], [29]), differentiation techniques based on dual or complex numbers (see, e.g., [39], [61]), grossone-based methods for computations on the Infinity Computer (GD) (see, e.g., [35], [36], [49], [51]), etc.
Specifically, SD can be adopted only if the analytical form of the objective function1 is given. However, in practice, the function can be given by a computer procedure or by computational blocks and systems (e.g., by Simulink models) making so impossible to use symbolic computations for differentiation in this case.
AD can be used instead of the SD, when analytical form of the objective function is unknown, but it involves other difficulties. First, the source codes of computation of the functions should be available. Second, the generated source codes (or scheme, if visual programming languages are used, as, e.g., in Simulink) for computation of the higher order derivatives of difficult functions can be too complicated and can contain hundreds of thousands of rows (or of the blocks and subsystems in case of Simulink), even if the original objective function had a few commands to its execution; as a consequence, the execution of the generated code/system can require significant computational resources and can be too slow.
In contrast to the above mentioned techniques, ND does not require any additional software to be adopted and can be used without the above mentioned limitations. In particular, in Simulink, the internal block called “Derivative” can approximate the derivatives of a function f(t) with respect to the time t using the backward difference scheme. Since this technique represents a unique way to calculate the derivatives in Simulink without additional software and/or add-ons, then in this paper, this procedure will be used for comparison in the experiments.
Another technique, namely GD, depends on the software or hardware simulator of the Infinity Computer and can only be applied if this simulator is available. At this moment, there exist several different simulators of the Infinity Computers written in different languages and optimized for different applications (see, e.g., [36], [51]). However, all these simulators are adapted for working with textual programming languages only and cannot be used directly in Simulink. Differentiation techniques based on dual or complex numbers are also domain-specific, not general-purpose and can be applied for textual programming languages only.
In the accompanying paper [27], a Simulink-based software Solution to the Infinity Computer (SSIC) has been proposed extending so all the advantages of the grossone-based computations in Simulink, and bringing so the gap between modelling on the Infinity Computer and simulation. In this paper, grossone−based differentiation techniques using SSIC are proposed and several case studies related to the proposed methodologies are studied. It is shown that these techniques are simple, efficient, and allow one to calculate the higher order derivatives exactly (i.e., up to machine precision) without the necessity of difficult computational schemes and/or analytical representation of the objective function. It is shown also that there are no additional difficulties in implementation of the objective function and the proposed solutions are compatible with the IEEE 754 floating-point arithmetic [12].
The rest of the paper is structured as follows. Section 2 briefly describes the Simulink-based solution for operating with the Infinity Computing concepts within Simulink. Section 3 presents differentiation methods using the software solution of the Infinity Computer in Simulink. Section 4 describes numerical experiments showing advantages of the presented methodologies and the feasibility and validity of the obtained solutions. Finally, conclusions and directions for future work are delineated in Section 5.
