Computational Thinking (CT) can be defined as the skill of solving problems, designing systems, and understanding human behavior based on computer science concepts (Wing, 2006a, Wing, 2006b). CT is a key skill for children in the 21st century (Wing, 2016). However, it is unclear how CT can be developed in the most effective way in children. Currently, different pedagogical methodologies that can be used to develop CT are being researched.
In the last years, some authors have claimed that CT can be acquired and developed by teaching programming to children. In addition, it has been claimed that this should be done as early as possible (Heintz et al., 2016, Kazakoff et al., 2013, McCartney, 2015, McCartney and Tenenberg, 2014, Papadakis et al., 2016, Strawhacker et al., 2015).
It is possible that CT can be acquired by other means such as Educational Robotics (Bers et al., 2010), storytelling (Lee et al., 2011), unplugged activities (Brackmann, Barone, Casali, Boucinha, & Muñoz-Hernández, 2016), Scratch Jr (Papadakis et al., 2016) or even in Ethics lessons (Seoane-Pardo, 2018). Although this paper focuses on programming to foster CT, learning how to program is worthwhile not only for that reason, but also because of the real need for programmers in our digital society (Margulieux, Catrambone, & Guzdial, 2016), as well as other advantages such as the improvement of higher cognitive skills (Pea & Kurland, 1984).
Many countries implemented Computer Science as a subject in Primary Education to train students into creators of computer programs (Heintz et al., 2016). A common approach to teaching Computer Science to children is Scratch, defined as an authoring environment - developed by the Lifelong Kindergarten research group at the MIT Media Lab - to design interactive media by snapping together programming-instruction blocks (Resnick et al., 2009, Ouahbi et al., 2015). Other approaches focus on using Makey Makey, where students can interact with the computer by means of fruits or Play-Doh rather than using the traditional mouse (Lee, Kafai, Vasudevan, & Davis, 2014); using Lego WeDo or Mindstorms EV3 robots (Sović, Jagušt, & Seršić, 2014), and (producing) making games (Campe & Denner, 2015). Another possibility is to follow unplugged approaches using storytelling or free exercises from Code.org. This is particularly useful in countries with limited resources, but also in developed countries, where Computer Science is considered interesting, but there is a lack of trained teachers and/or resources (Brackmann et al., 2016).
The results of these approaches have not yet been properly evaluated, and their effectiveness is still unclear (Kalelioğlu, 2015). Moreover, no methodology or particular resources have been identified as the most adequate to teach programming to children.
There are difficulties in teaching children even basic concepts such as program construction (Lahtinen, Ala-Mutka, & Järvinen, 2005), loops (Ginat, 2004), structures control, and algorithms (Seppälä, Malmi, & Korhonen, 2006). These difficulties arise because of poor teacher training or a lack of a proper teaching methodology (Barker et al., 2009, Coull and Duncan, 2011). It has become evident that teachers need guidance to approach this task adequately (Brackmann et al., 2016, Jovanov et al., 2016, Yadav et al., 2016).
In our previous work, we proposed and validated the use of metaphors to introduce children to basic concepts of programming according to the methodology MECOPROG (Pérez-Marín et al., 2018). For instance, we proposed using the metaphors of a Thermomix® recipe as a program (and sequence), pantry as memory, and boxes as variables. We also illustrated the possibility of applying these metaphors to any resource available to the teacher, such as Scratch.
The reason for using metaphors is the widely reported usefulness of metaphors as powerful educational tools. Metaphors focus on concepts and facilitate students' organization of ideas and clearer, more straightforward thinking (Rodríguez Diéguez, 1988). Using metaphors does not require special equipment and helps teachers turn abstract concepts into simple ideas and images. Students need clear and careful, well-focused thinking to correctly write computer programs (Heintz et al., 2016).
This research paper asks the following question: Can computational thinking be improved by using a methodology based on metaphors and Scratch to teach computer programming to children? It is our hypothesis (H) that the answer is yes. For this study, we asked 132 Primary Education students (aged 9 to 12) to follow MECOPROG for six weeks. There were two objectives: 1) to teach students the basic concepts of computer science programming; and, 2) to develop students' CT by teaching them those concepts using metaphors and Scratch. The results derived from this study show that using metaphors and Scratch can significantly develop students' CT, but also that students are able to learn basic programming concepts.
The paper is organised as follows: Section 2 reviews background literature on computational thinking and teaching programming in Primary Education; Section 3 outlines the materials and methods of the experiment carried out so that this study can be reproduced elsewhere; Section 4 presents the results of the experiment; and Section 5, summarises the main conclusions and suggests future lines of work.
