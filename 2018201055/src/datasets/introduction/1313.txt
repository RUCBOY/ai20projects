In the present work, we will consider the application of multi-derivative one-step methods for the numerical solution of canonical Hamiltonian problems(1)y′=J∇H(y),y(t0)=y0∈R2m, with(2)y=(qp),q,p∈Rm,J=(OI−IO), where q and p are the generalized coordinates and conjugate momenta, H:R2m→R is the Hamiltonian function and I stands for the identity matrix of dimension m. It is well-known that the flow φt:y0→y(t) associated with the dynamical system (1) is symplectic, namely its Jacobian satisfies(3)∂φt(y)⊤∂yJ∂φt(y)∂y=J,for all y∈R2m. Symplecticity is a characterizing property of canonical Hamiltonian systems and has relevant implications on the geometric properties of the orbits in the phase space. Consequently, the search of symplectic methods for the numerical integration of (1) forms a prominent branch of research. We recall that a one-step method y1=Φh(y0) (h is the stepsize of integration) is called symplectic if its Jacobian matrix is symplectic, i.e. Φh satisfies the analog of (3) with Φh(y) in place of φt(y). One prominent feature of symplectic integrators is, by definition, the conservation of the symplectic differential 2-form associated with matrix J in (2) which, in turn, implies the conservation of all quadratic first integrals of a Hamiltonian system. Though they fail to conserve non quadratic Hamiltonian functions, a backward error analysis shows that, when implemented with constant stepsize and under regularity assumptions, they provide a near conservation of the Hamiltonian function over exponentially long times [2] (see also [20, page 366]).
The study of symplecticity in combination with multi-derivative R-K methods was initiated by Lasagni [22] who provided a sufficient algebraic condition for a multi-derivative Runge–Kutta method to be symplectic. The brief investigation culminated with the work of Hairer, Murua, and Sanz Serna [19] who showed that, for irreducible multi-derivative R–K methods, Lasagni's condition is also necessary but it may only be satisfied by standard R–K formulae.
Given this background, it does make sense to wonder whether one-step multi-derivative formulae may share some weaker conditions related to symplecticity. A method y1=Φh(y0) is conjugate to a symplectic method y1=Ψh(y0) if a global change of coordinates χh(y)=y+O(h) exists such that Φh=χh∘Ψh∘χh−1. We observe that the solution {yn} of a symplectic conjugate method satisfies yn=Φhn(y0)=(χh∘Ψh∘χh−1)n(y0)=χh∘Ψhn∘χh−1(y0). Consequently, symplectic conjugate methods inherit the long-time behavior of symplectic integrators. In the present work we are interested in a generalization of the conjugate-symplecticity property, introduced in [17]. A method y1=Φh(y0) of order p is conjugate-symplectic up to order p+r, with r≥0, if a global change of coordinates χh(y)=y+O(hp) exists such that Φh=χh∘Ψh∘χh−1, with the map Ψh satisfying(4)Ψh′(y)TJΨh′(y)=J+O(hp+r+1). A consequence of property (4) is that the method Φh(y) nearly conserves all quadratic first integrals and the Hamiltonian function over time intervals of length O(h−r) (see [17]).
This path of investigation is further motivated by the recent studies concerning the implementation of methods involving higher derivatives of the vector field on the Infinity Computer, a new type of a supercomputer allowing one to work numerically with infinite and infinitesimal numbers [1], [26], [36], [37], [44]. The final goal of this new approach is to improve the computational effort associated with the evaluation of the involved derivatives and make them competitive with more standard integrators. In this paper, the Infinity Computer is used for this purpose. It is based on the positional numeral system with the infinite radix ① (called grossone and introduced as the number of elements of the set of natural numbers N) introduced in [31], [32], [33] (see also recent surveys [38], [40]). The first ideas that can be considered as predecessors to the Infinity Computing and based on the principle “the part is less than the whole” were studied by Bernard Bolzano (see [3] and a detailed analysis in [46]). It should be noted that the Infinity Computing theory is not related either to Cantor's cardinals and ordinals ([7]) or non-standard analysis and Levi-Civita field ([23], [30], [41]).
In the Infinity Computing, with the introduction of ① in the mathematical language, all other symbols (like ∞, Cantor's ω, ℵ0,ℵ1,…, etc.) traditionally used to deal with infinities and infinitesimals in different situations are excluded from the language, because ① and other numbers constructed with its help not only can replace all of them but can be used with a higher accuracy. The ①-based numeral system avoids indeterminate forms and situations similar to ∞+1=∞ and ∞−1=∞ providing results ensuring that if a is a numeral written in this numeral system then for any a (i.e., a can be finite, infinite, or infinitesimal) it follows a+1>a and a−1<a.
To construct a number C in the ①-based numeral system, we subdivide C into groups corresponding to powers of ①:(5)C=cpm①pm+…+cp1①p1+cp0①p0+cp−1①p−1+…+cp−k①p−k. Then, we can write down the number C as follows:(6)C=cpm①pm…cp1①p1cp0①p0cp−1①p−1…cp−k①p−k, where all numerals ci≠0 belong to a traditional numeral system and are called grossdigits, while numerals pi are sorted in the decreasing order with p0=0pm>pm−1>…>p1>p0>p−1>…p−(k−1)>p−k, and called grosspowers.
The term having p0=0 represents the finite part of C since c0①0=c0. Terms having finite positive grosspowers represent the simplest infinite parts of C. Analogously, terms having negative finite grosspowers represent the simplest infinitesimal parts of C. For instance, the simplest infinitesimal used in this work as the integration step in the Euler method for computing the derivatives is ①−1=1①.
The ①-based methodology has been successfully applied in several areas of Mathematics and Computer Science: single and multiple criteria optimization (see [9], [12], [13]), handling ill-conditioning (see [14], [45]), cellular automata (see [10], [11]), Euclidean and hyperbolic geometry (see [24]), percolation (see [21], [47]), fractals (see [6], [39], [47]), infinite series and the Riemann zeta function (see [38], [40], [48]), the first Hilbert problem and supertasks (see [27], [29], [34], [40]), Turing machines and probability (see [28], [40], [42], [43]), etc.
An interesting peculiarity of the Infinity Arithmetic methodology in the context of this paper is that it allows one to work with black-box functions, namely the analytical expression of the function f(y) may be unknown. In other words, the function f can be given by a code or formula which are unknown to the user. He/she provides an argument y and obtains a result f(y) without any knowledge about how this result has been obtained. In particular, this means that the user can not calculate exact derivatives either analytically or symbolically. It has been shown that the Infinity Arithmetic methodology can successfully handle this situation in the context of numerical differentiation and solution of ordinary differential equations (see [1], [35], [36], [44]).
The paper is organized as follows. In Section 2 we introduce Euler–Maclaurin methods while in Section 3 we show their conjugate symplecticity properties. Section 4 is devoted to the efficient computation of the derivatives on the Infinity Computer. Finally, some numerical illustrations are presented in Section 5 while Section 6 contains some concluding remarks.
