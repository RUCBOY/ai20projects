As systems grow in size and complexity they become very difficult to manage by humans and need to be self-managing (i.e., self-configuring, self-healing, self-optimizing, and self-protecting). These systems, aka self-adaptive systems, can make runtime decisions about the best way to operate and are generally based on the well-known MAPE-K (i.e., Monitor, Analyze, Plan and Execute based on Knowledge) loop for autonomic systems [1]. However, when systems are large, complex, and heterogeneous, a single (or centralized) MAPE-K loop is unlikely to be sufficient for managing all adaptation decisions. In this case, multiple (or decentralized) MAPE-K loops may be necessary [2]. Furthermore, centralized control also represents a single point of failure, which affects resiliency and dependability. To address this concern, our research project (RASS: Resilient Autonomic Software Systems [3]) investigated the design and development of a highly resilient and highly dependable distributed software system framework based on a decentralized version of MAPE-K.
Many self-adaptive systems use a model of themselves (e.g., a software architecture) to support runtime adaptation decisions [4]. This requires an up-to-date software architectural model for runtime decision making and for detecting whether dynamic architectural repairs have been correctly incorporated into a system after adaptation. This challenge has led to the need to discover the software architecture of a system at runtime [5]. This discovered architecture serves the purpose of verifying that the system was adapted correctly, as well as a model for future adaptation decisions. A number of works have presented different approaches to discovering the runtime architecture of a system (e.g., [5], [6], [7]). However, these methods construct architectures dynamically in a centralized way making them inadequate for a decentralized approach to self-adaptation.
This paper describes a decentralized approach to dynamic software architecture discovery based on selective gossiping and message tracing. The scope of this work is the decentralized derivation of runtime software architectural models to be used in decision making for distributed architecture-based adaptation in large-scale distributed software systems. This effort is part of RASS, a project aimed at developing a highly-resilient and highly-dependable system, which is capable of making adaptation decisions in a distributed fashion without centralized control [3]. Such systems require that each node has a complete architectural model of the system at runtime [2]. A software architecture has three main views: structural (i.e., components and connectors), behavioral (i.e., the communication protocols among several components), and deployment (i.e., the mapping of components to physical nodes of a system). This paper deals primarily with discovering the structural architectural view (referred simply as architecture henceforth) of a distributed software system.
We previously introduced DeSARM (Decentralized Software Architecture discoveRy Mechanism) [8], a decentralized and automated method for architecture discovery of distributed software systems. However, that preliminary work only presented a high-level description. The goal of this paper is to address the following research questions: Q1: Is DeSARM’s software architecture discovery framework scalable, accurate and consistent?, Q2: Is DeSARM able to discover an architecture in the presence of component failures?, Q3: How does architecture complexity influence the time it takes DeSARM to discover an architecture?, and Q4: How does the number of nodes in the system influence the time it takes DeSARM to discover an architecture?
The rest of this paper is organized as follows. Section 2 discusses related work. Section 3 describes DeSARM in detail including the assumptions used in its design, its architecture, its gossiping mechanism and message tracing framework, its implementation, the concurrent design of its internal components, and its algorithms. Section 4 presents the results of extensive experimentation used to address the four research questions. Then, Section 5 presents some discussions of our approach. Finally, Section 6 presents concluding remarks and future work.
