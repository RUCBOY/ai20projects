In the last years Field Programmable Gate Array (FPGA) devices started to pave their way into the realm of High Performance Computing (HPC), for examples see [1], [2], [3]. A well-known scientific application in this domain is Monte Carlo simulations of Quantum Chromodynamics (QCD), which are performed in the context of theoretical elementary particles physics. An iterative solver of a large sparse system of linear equations, the Dirac–Wilson operator, lies at the heart of such simulations and is the most compute-intensive kernel. In this work we describe our attempt to port the Conjugate Gradient algorithm [4] which is an example of the most naive of such iterative solvers to a single FPGA device and demonstrate that FPGA devices can compete with modern HPC solutions as far as such academic applications are concerned.
1.1. QCD Monte Carlo simulationsFrom an algorithmic point of view Monte Carlo simulations of Quantum Chromodynamics boil down to a numerical estimation of highly dimensional integrals. A set of complex numbers representing the values of basic degrees of freedom: gluon and quark fields, is associated respectively to each edge and point of the space–time lattice. An implementation of a Markov chain allows to construct representative candidates of possible configurations of gluon fields according to a desired probability distribution. Any function of fundamental quark and gluon variables can be evaluated on each such configuration and the estimate of the final result is obtained by taking an algebraic average over the estimates from all generated configurations. The larger is the set of available configurations the smaller are the statistical uncertainties and the more precise the final physical result is.As long as the probability distribution depends only on gluon fields, the Markov chain update can be performed locally and efficient algorithms allow to overcome the critical slowing down reducing the computational complexity to a manageable level. Once the quark field dependence is included in the probability distribution, in each update step the determinant of the Dirac operator’s matrix has to be estimated and the only applicable algorithm in such a situation is the Hybrid Monte Carlo algorithm [5], [6]. Instead of the determinant it is more convenient to estimate the inverse of the Dirac operator using an appropriate iterative solver. In many practical cases 90% of computing time is spent in that solver. It is thus crucial to optimize and fully adapt that part of the code to the micro-architecture the simulations are running on.
1.2. Search for new architecturesIn the physically most interesting cases the Dirac matrix can achieve dimensions of order 109×109 and therefore a distributed, high performance system is required to handle such a task in a reasonable amount of human time. Various HPC solutions are being used with a particular emphasis on fast interconnects as frequent local binary exchanges as well as global operations are required. On typical processors the single-node problem is memory bandwidth bound and hence a fast and large cache memory is desirable.Since several years the HPC field witnesses a major shift in the paradigm of the micro-architecture employed, as more and more many-core processors and accelerators are being used. Modern FPGA devices are being considered as candidates for next generation of HPC solutions and some computing centers have already opened FPGA clusters to general public [7]. A dedicated pure FPGA cluster running in production mode for theoretical chemistry application was reported in [8]. It is natural to ask whether other traditional HPC applications, such as the Monte Carlo simulations of QCD, can benefit from these new computing resources. In order to answer that question we investigate the performance achieved on a FPGA device by the naive solver, the Conjugate Gradient algorithm. Its numerical complexity is directly proportional to the numerical cost of multiplying a vector by the Dirac matrix. This matrix–vector multiplication appears ultimately in any other more involved solver, so it is a valid benchmark, while keeping the setup as simple as possible.
1.3. OutlineThe paper is composed as follows. We start by briefly introducing the basic ingredients of lattice QCD, the most important being the Dirac matrix which is defined in Section 2.1. For the sake of completeness we present the standard Conjugate Gradient algorithm in Section 2.2 and describe the structure of input and output data in Section 2.3. In Section 3 we provide a brief overview of the main advantages of the FPGA technology, highlighting concepts which are crucial from the high performance perspective. In Section 4 we describe previous work in this subject. In Section 5 we pay special attention to the way the part which runs on the host and the part implemented in the logic are separated. We discuss various ways of enforcing the parallelization of the main kernel function in the hardware in 6. Section 7, where we describe our methodology and the details of our runs, is devoted to benchmark results. We focus on the resource utilization (Section 7.1), problem size limits (Section 7.3) and time to solution benchmarks (Section 7.4). We end with conclusions and a discussion of further research directions in Section 9.
