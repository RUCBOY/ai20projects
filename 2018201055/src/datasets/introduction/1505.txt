Computing the greatest common divisor (gcd) of two polynomials over some field or unique factorization domain is a fundamental and significant problem in mathematics and computer science community. As far as 300 B.C, Euclid gave a remarkably simple procedure to solve this problem. Since that time “Euclid’s Algorithm” has evolved to become one of the most useful tools in mathematics. According to Knuth [24], “Euclid’s algorithm, …, we might call it the granddaddy of all algorithms, because it is the oldest nontrivial algorithm that has survived to the present day”. Although the algorithm presented by Euclid computes the positive gcd of two given positive integers, it is readily generalized to apply to univariate polynomials over a field, and further to multivariate polynomials over any unique factorization domain in which gcd can be computed. As the most common scenario in computer science community, this paper mainly focuses on univariate polynomials over some finite field Fq, where q=pα for some prime p and an integer α > 0.
Given some finite field Fq and two polynomials a(x),b(x)∈Fq[x]. The extended version of Euclid’s algorithm (called “extended Euclidean algorithm”) not only outputs d(x)=gcd(a(x),b(x)), but also simultaneously finds u(x) and v(x) such that d(x)=a(x)u(x)+b(x)v(x), where u(x) and v(x) are two polynomials over Fq with degu(x)<deg(b(x)/d(x)), degv(x)<deg(a(x)/d(x)). The algorithm is particularly useful when a(x) and b(x) are relatively prime. In this case, u(x) is the multiplicative inverse of a(x) modulo b(x), and v(x) is the multiplicative inverse of b(x) modulo a(x). It is ubiquitous performing inversion operation in some extension field of Fq. Though the extended Euclidean algorithm is ingenious and can efficiently calculate the polynomials d(x), u(x) and v(x) within O(log n) polynomial multiplications and thus O(nlog2n) field multiplications [2], where n=max{dega(x),degb(x)}, it may still confront obstacles in engineering practice. Especially, in the cryptography community, we often need to handle polynomials with high degree or large coefficients. e.g. in Federal Information Processing Standard FIPS 186-4 [15], the digital signature algorithm (DSA) needs to perform modular inversion in a prime field Fp, where p is large prime with bit length 1024, 2048 or 3072. And one of the recommended elliptic curve digital signature algorithms (ECDSA) requires to manage polynomials over F2 with degree 571 and more. In these cases, the modular inversion (i.e. the extended Euclidean algorithm) becomes one of the most time-consuming operation during the implementation of these algorithms. Also, with the development of mobile internet and IoT, more and more lightweight devices (e.g. smart cards, RFID tags and mobile phones) are interacted with other components of their environment. It is a heavy burden for these clients with limited computing capacity to carry out expensive operations. Therefore, outsourcing the extended Euclidean algorithm for polynomials with high degree or large coefficients is of great significance.
Cloud computing offers on-demand network access to a shared pool of configurable computing resources that can be efficiently deployed with minimal management cost. By leveraging the cloud computing services, the resource-constrained clients can employ the enormous computation resources by outsourcing computation in pay-on-demand manners instead of purchasing the costly software and hardware equipments by themselves. However, the discrepancy of the trusted domain between the client and the cloud brings many security concerns and challenges towards this attractive computation paradigm [1], [16], [27]. First, the client’s outsourced data may contain sensitive information, e.g. client’s medical records or private keys. Once the critical information is exposed, it will bring serious losses to the client. Meanwhile, out of financial incentives, the cloud may be curious, lazy or even malicious, which makes the cloud try to steal client’s private information, return random or even intentionally falsified results to the client. Moreover, some accidental events such as software bugs, hardware failures or outsider attacks can also result in false computational results. To tackle the above obstacles, a “well defined” outsourcing computation scheme should fulfill the following properties: (1) Privacy. A secure outsourcing computation algorithm must protect the privacy of the input/output data of the computation task. In other words, the cloud server can not infer anything about the client’s sensitive information. (2) Verifiability. A secure outsourcing computation algorithm can make the client detect the cloud server’s any misbehavior with a nonnegligible probability and recover the wanted results from the correct results sent back by the cloud server. (3) Efficiency. The local-client’s time cost of a secure outsourcing computation algorithm must be cheaper than that of doing the work locally from scratch.
1.1. Related workIn 1992, Chaum and Pedersen [9] first proposed the idea of “wallet with observers”. It permits service providers to set up a secure hardware in their clients’ computer to help those clients with limited resources perform complex cryptographic operations. Since then, how to design a “well defined” secure outsourcing algorithm has drawn increasing interests from the scientific and engineering communities. In the area presence of large-scale and thereby time-consuming scientific and engineering computing problems, the study of computation outsourcing mainly moves towards two directions. One is to dwell on a generic outsourcing mechanism, which devises a fully homomorphic encryption (FHE) scheme so it can be suited to outsource arbitrary scientific computation. Gentry [18] brought forward the first FHE scheme that implements arbitrary outsourced calculation of ciphertext data in 2009. Although subsequent works [7], [8], [14], [19] have made much progress in this area, the generic mechanism still suffers from poor efficiency and thereby is impractical for practical applications.The other direction of research aims to devise application-oriented outsourcing algorithms for some special heavy computational tasks [30], such as large-scale matrix operations [4], [25], [38], [41], large-scale systems of linear equations [11], [35], linear programming [10], [34], key updates in cloud storage auditing [37], and large-scale graph algorithms [6], [39]. Among these works, securely outsourcing fundamental operations in cryptography becomes a popular topic. As one of the most common cryptographic operations, modular exponentiation often involves large-scale integers which make it time-consuming. Therefore, secure outsourcing of modular exponentiation has been extensively investigated. In 2005, Hohenberger and Lysyanskaya [23] first introduced the security model and associated formal definitions of securely outsourcing cryptographic fundamental operations, and then brought forward the first secure outsourcing scheme of modular exponentiations, but the verifiability probability of their scheme was only 12. Chen et al. [12] further improved their scheme by virtue of a new logical split on the base number and the exponent, and achieved higher efficiency and a promotion on verifiability. Subsequently, by modifying Chen et al.’s technique, Ren et al. [28] put forward a secure verifiable outsourcing algorithm of modular exponentiation, which, though adds a little computation cost, can detect the cloud servers’ malicious behavior with the optimal probability 1. However, all of the above-mentioned algorithms are based on one malicious server in two untrusted program model, which requires two non-colluding cloud servers and thereby makes too strong a security assumption. Motivating by amending this flaw, Dijk et al. [32] introduced an outsourcing algorithm of modular exponentiation based on one untrusted program model, but their algorithm only protects the privacy of the exponent. Wang et al. [36] also put forward a scheme based on one untrusted program model, while its efficiency was not satisfactory and the verifiability probability of outsourcing single modular exponentiation was merely 12. Later, by executing a small-exponent modular exponentiation on the local side, Ding et al. [13] presented an algorithm of outsourcing modular exponentiations based on one untrusted program model, which achieved high verifiability. Recently, Ren et al. [29] come up with an improved outsourcing algorithm by using the well-known Euler’s theorem, and the outsourcer can perceive the cloud server’s misbehavior with the optimal probability 1. Before the advent of Zhou et.al’s work [40], all the pioneers’ literature only focused on keeping the privacy of the base and the exponent in the modular exponentiation. Zhou et.al. [40] initialized the study on the secure outsourcing algorithm to conceal the modulus, and gave a surprisingly efficient security outsourcing algorithm based on one untrusted program model, which not only concealed the base and the exponent but also concealed the modulus.Another common basic cryptographic operation is modular inversion which essentially is the extended Euclidean algorithm. Owing to the prevalence and high resource consumption of this operation in virtually all the public-key algorithms which are often designed in a large-scale finite field or ring, it is meaningful to study the outsourcing algorithm of this operation. By employing Chinese Reminder Theorem (CRT), Su et al. [31] presented the first algorithm of outsourcing the modular inversion operation in case that the modulus is a large composite and factor-known integer. Although their algorithm achieves decent local-client’s computational savings, there still exist several open problems when directly generalizing this algorithm to outsource the extended Euclidean algorithm for large-scale polynomials. First, Su et al.’s algorithm is based on two untrusted program model. It requires two non-colluding cloud servers which is a too strong security assumption for practical application. Second and more importantly, their algorithm is merely devised for some special kind of large integer ring which is not applicable to a large finite field. Consequently, how to securely outsource the extended Euclidean algorithm for arbitrary finite field based on single untrusted program model, which is much higher demand in practice, is left as an unsolved problem.
1.2. Our contributionsMotivated by the aforementioned attractive problem, this paper explores the practically secure outsourcing mechanism of the extended Euclidean algorithm for large-scale polynomials over some finite field. Here, “large-scale” means polynomials with high degree or large coefficients. By skillfully applying three kinds of transformation techniques, we securely and efficiently realize the outsourcing implementation of the extended Euclidean algorithm for large-scale polynomials. Overall, our contributions are mainly reflected in the following four aspects:(1)The novelty of the technique. By utilizing variable substitution technique, our algorithm fulfills the concealment of the coefficients of the input/output polynomials, and, through multiplying by a random polynomial and unimodular matrix transformation, the algorithm achieves the goal of concealing the input/output polynomials’ degree. The synthesization of these three succinct techniques makes the proposed algorithm secure and effective.(2)Robust security. Our proposed algorithm is based on single untrusted program model, and the cloud server’s malicious behavior can be detected by the client with the optimal probability 1. Furthermore, according to the rigorous security analysis, our algorithm fulfills the one-way argument of input/output privacy.(3)High efficiency. The proposed algorithm only needs one round communication between the client and the cloud, which greatly reduces the communication overhead. Besides, our algorithms achieves high efficiency on the local side, which reduces the local-client’s time overhead from O(nlog2n) to O(nlog n) field multiplications. Comprehensive experimental results demonstrate that the proposed algorithm performs decently faster than the algorithm without outsourcing.(4)Extensive applicability. Our algorithm has shown to be useful in many fundamental algorithms in cryptography and coding theory, e.g. the secure outsourcing for the time-consuming key generation step of the celebrated NTRU cryptosystem.
1.3. Road mapWe organize the rest of our paper as follows: In Section 2, we introduce the system model and the related security definitions. Then we give some necessary preliminaries in Section 3. The main algorithm and its security analysis are presented in Section 4, and the performance assessment is given in Section 5. In Section 6, we provide an important application of our algorithm. Finally, Section 7 summarizes the work.
