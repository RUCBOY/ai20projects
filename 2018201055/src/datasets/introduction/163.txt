The climate is the key driver of life (Rasmussen et al., 2019), and climate change and variability directly affect the relationship between nature and humanity (Díaz et al., 2015). Consequently, diverse disciplines require climate data, from forest disturbance analysis (Seidl et al., 2017) and crop yield research (Ray et al., 2015) to ecosystem sensitivity assessment (Seddon et al., 2016) or urban climate adaptation (Shi et al., 2016). In situ meteorological recordings have been used as the reference for climate observations and will continue to play a crucial role in future climate observation systems (Weatherhead et al., 2018).
While individual recordings contain limited data, time-series collected at climate stations rapidly create large amounts of raw data that require corresponding storage capabilities and handling competences. While larger research programs, such as Biodiversity Exploratories in Germany (Fischer et al., 2010), that operates over 300 climate stations, are supported by dedicated computer science groups, smaller projects or individual researchers do not have access to such resources, even though they might also operate climate sensors and create large amounts of raw data.
Working with raw data from climate sensors raises the challenge of managing these large amounts of the recorded fine-grained time-series information. Structured file-system approaches (Clauer et al., 2014) or relational database management systems (RDBMS) (Kabas et al., 2010), (Mainwaring et al., 2002), (Göttlicher et al., 2010) may be used for storing time-series. However, Time-series Management Systems (TSMS) are a more specific solution and offer more efficiency (Tahmassebpour, 2017). TSMS can be broadly structured into external and internal architectures or storage engines (Jensen et al., 2017). External storage engines may simplify the usage of existing components, such as RDBMS. However, the maintenance of separate storage and processing components is more complicated and data transfer times may be high. Internal storage engines offer short access times and an embedded design, also allowing more simple installation. All systems require an advanced level of expertise for configuration and operation due to their flexibility to handle a variety of time-series information in a variety of IT systems. Furthermore, distributed databases complicate management and should only be considered if a single machine does not fulfil performance requirements. The open geospatial consortium2 (OGC) contributes the sensor web enablement initiative (SWE) to sensor-specific standards (Broering et al., 2011). The OGC standard SensorML structures sensor metadata (Botts and Robin, 2007), while the OGC standard sensor observation service (SOS) enables web-based sensor data access. While the full capabilities of SensorML are not widely used and it is difficult to use (Paolo et al., 2019), SOS provides access to sensor data without on-demand processing capabilities (Jirka et al., 2012). Currently, there is no easy-to-operate, user-friendly software system to store and process time-series data in an efficient manner.
To create data products that are ready for data consumers, stored data must be further processed. This may be challenging for researchers without a computer science background to conduct without assistance. In RDBMSs, Structured Query Language (SQL) is used for processing, which is not suitable for time-series (e.g. data extraction, joins) (Law et al., 2011). TSMS data models fit better; however, several solutions require knowledge of domain-specific time-series query languages. For climate data, both groups lack important functionalities that still need to be implemented, such as calendar-based aggregations, quality checks, and gap-filling. To overcome such limitations and provide an easy-to-use alternative, we aimed to construct a climate data-specific processing engine with embedded high-performance time-series storage.
Here, we present a novel approach to handling time-series data focusing on point measurements of environmental properties. Our open-source time-series database, TubeDB, combines efficient embedded storage and data processing with a simple setup (distribution as zip-file, no further installation, and no dependency on external components such as database servers). TubeDB is a domain-specific solution for small-to-medium-scale research projects using up to a few thousand climate or other environmental monitoring sensors. TubeDB can be accessed through a self-explaining web-browser interface or a well-documented R-package. For administrative purposes, there is a set of simple configuration files and shell-scripts, and additional extensions can be integrated into the flexible processing workflow through Java classes. Thus, TubeDB offers efficient and user-friendly database management that can easily be tailored to the needs of various research projects utilising time-series data.
