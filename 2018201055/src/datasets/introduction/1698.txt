Networked systems are evolving at a rapid pace toward programmatic control, driven in large part by the application of software to networking concepts and technologies, and evolution of the network as a critical subsystem in global scale systems. This is of interest to major science collaborations that incorporate large scale distributed computing and storage subsystems. This software-network innovation cycle is important as it includes a vision and promise for improved automated control, configuration, and operation of such systems, in contrast to the labor-intensive network deployments of today. However, even the most optimistic projections of software adoption and deployment do not put networks on a path that would make them behave as a truly smart or intelligent system from the application or user perspective, nor one capable of interfacing effectively with facilities supporting highly automated data analysis workflows at sites distributed around the world.
Today, domain science applications and workflow processes are forced to view the network as an opaque infrastructure into which they inject data and hope that it emerges at the destination with an acceptable Quality of Experience. There is little ability for applications to interact with the network to exchange information, negotiate performance parameters, discover expected performance metrics, or receive status/troubleshooting information in real time. As a result, domain science applications often suffer highly variable (from excellent to poor) performance, especially so in highly distributed data intensive environments.
Indeed, the ability to interact and negotiate with the network infrastructures within a science ecosystem should be a hallmark of truly smart networks and applications. The current static, non-interactive network infrastructures do not have a path forward to assist or accelerate domain science application innovations. We therefore envision a new smart network and smart application ecosystem that will solve these issues and enable future innovations across many Research and Education (R&E) domain science communities. The Software-Defined Network (SDN) for End-to-end Networked Science at the Exascale (SENSE) [1] project has developed an architecture and implementation to address this vision. Key contributions of this work include an architecture definition, reference implementation, and deployment. This provides the basis for further innovation of smart network services to accelerate scientific discovery in the era of big data, cloud computing, machine learning and artificial intelligence.
The SENSE solution was built upon the previous Software-Defined Networking (SDN) work [2], which has been a subject of much discussion and research over the past decade. The crux of the SDN concept is software control and programmability of network elements and resources in a manner which enhances network services, management, and resource use. Multiple frameworks and systems have been developed which carry out the basic goal of software-controlled services across a heterogeneous mix of network elements. While many of these systems are open source, the reality is that significant deployments in the field have been few and limited. These deployments are typically either small isolated systems, or vertically integrated systems from larger operators who have complete control over all the network resources needed by the higher-level applications being served. A lesson learned is that basic software-defined control functionality does not solve many of the key issues as needed to enable pervasive deployment of end-to-end automated services across general cyberinfrastructure. These issues include handling of multiple administrative/control domains, resource state hiding/visibility, scalability, and real-time responsiveness, all of which need to be tailorable for specific deployments and application requirements.
Initial SDN work was mostly focused on the SDN controller south bound interface and network element control mechanisms. Multiple mechanisms utilizing technologies such as OpenFlow [3], NETCONF and Yang [4], and others were defined. It was eventually realized that the SDN controller northbound interface was where the users obtain services, and that the exact mechanisms used on the southbound side were not as interesting from a user/application perspective. Subsequent SDN controller northbound work resulted in several systems focused on specific use cases and point solutions.
Partly because of these issues, much of the SDN research and development energy has transitioned to orchestration services/systems. There are now multiple open source orchestration projects [5], [6], [7], [8], which include mechanisms to interact with multiple underlying SDN systems via their SDN Controller Northbound Application Programming Interface (API). However, there has been relatively little architectural work to define what is needed in an SDN controller northbound interface to enable orchestration systems to address issues associated with systems that extend “east and west” across multiple administrative/control domains, heterogeneity among the architectures and policies in each domain, as well as resource state hiding/visibility, scalability, and real-time responsiveness. In addition, there has been even less work done in building systems which will enable the desired smart-application-to-smart-network interactive ecosystem, where in the case of major science programs the “application” may itself be a data management system that deals in real-time with computational workflow among sites on several continents.
In summary, current SDN and orchestration technologies have the following issues which inhibit development of an integrated, interactive smart network and smart application ecosystem:

•Current SDN Technologies - The SDN Controller Northbound API solutions are narrowly focused designs which are typically driven by an underlying southbound API feature set. The opposite approach should be used, where the user-facing API should be developed based on user/application requirements, with the southbound API and feature sets correspondingly adapted. With such a layer-based orchestration architecture, the SDN Controller Northbound API should be constructed with the orchestration layer as its user.•Current Orchestration Technologies - The current orchestration architecture and associated implementation projects have not defined the requirements and features needed for the API between the orchestrator and underlying SDN Controllers. This would be the SDN Controller Northbound Interface, which would also be the orchestrator southbound interface. These requirements and the orchestrator functionality should be driven by the user/application requirements and therefore reflected in the orchestrator northbound interface.•Combined SDN and Orchestration Technologies - The current solutions are focused on traditional service provisioning, customer onboarding, and operations/maintenance. While updated technologies such as Network Functions Virtualization (NFV) and automated provisioning are being employed in service of this paradigm, the service and use model is not much changed from a customer perspective, outside of the ability to initiate automated functions. These systems are not currently on a path to provide the degree of realtimeness and interaction needed for the smart network and smart application ecosystem envisioned by the Research and Education (R&E) community [9]. For example, the information exchange between the SDN Controller and orchestrator is not designed with the ability to (i) include/exclude real-time states, (ii) adjust the degree of resource/topology sharing/hiding as required by local policy and/or user requirements, and (iii) tailor operations to optimize scalability or real-time responsiveness. In addition, the orchestrator functions are not designed to take advantage of enhanced interactions with underlying SDN controllers with a focus on interaction, real-time responsiveness, and intelligent services.•End-to-End Solutions - Current SDN and Orchestration solutions are not end-to-end in the context of application workflows. Domain science application workflows need solutions which manage all resources along the end-to-end path. This needs to include the networking stack inside the end systems, as well as the devices along the network path.
The problem statement and solution objective which motivates this work are as follows:
Problem Statement: Current SDN and orchestration systems do not supply the degree of interaction, realtimeness, and intelligent network services needed for the next generation of domain science workflows. An integrated smart network and smart application ecosystem is needed to enable application workflows to ask questions, iterate on solutions, receive recommendations, and access full life-cycle status and troubleshooting information. Future SDN enabled infrastructures need mechanisms to provide topology and state information in real time based on fine-grained policy, scalability, and service objectives. End system resource management needs to be integrated into the orchestration of end-to-end network resources. In the longer term end-to-end system operation needs to be monitored at several layers with enough granularity, to supply a foundation for future system optimization through such mechanisms as reinforcement learning.
Solution Objective: Domain science application workflows need real-time, interactive, end-to-end orchestrated SDN services across large, distributed, multi-domain networks.
In this paper we present the SENSE model-based orchestration system which operates between the SDN layer controlling the individual network regions, and users/applications needing a variety of end-to-end network services. The SENSE system provides a solution to the identified problem and includes a novel set of APIs and methods for interactions with users/applications, as well as with the underlying software-controlled network infrastructure.
Multiple science community vision and requirement reports [10], [11] have identified these types of network services as being important for the next generation workflows, including many that will be driven by Exascale computing resources and big data. Also driving the need for these types of network services is the emerging DOE Superfacility concept which includes the seamless integration of multiple, complementary DOE Office of Science user facilities into a virtual facility to fundamentally transform and accelerate the scientific discovery workflow. The SENSE system provides the mechanisms needed to synchronize and coordinate the connection of multiple distributed compute, storage, and instrument resources with deterministic performance. These intelligent interactive services provide methods for application driven workflow planning and operations assistance, which will be needed to realize the Superfacility vision.
As an example, the current Exascale for Free Electron Lasers (ExaFEL) [12] workflows utilizing multiple data transfers over best effort network paths are being replaced by SENSE services providing deterministic network paths capable of supporting real-time data streaming directly to compute memory or burst-buffers. This mode of operation will also support computational steering, where instruments use data streaming to drive preliminary compute results which are then used to calibrate and guide experiment configurations to create real-time science feedback loops.
It should also be noted that this new class of smart, interactive networked services is not expected to replace the existing best effort routed IP services in use today. Most science data flows will continue to use traditional IP routed services. However, based on historic use patterns and formal requirement studies [13], there will be a set of science-driven use cases which do require these types of advanced, end-to-end network services. While these use cases will make up a small subset of the total science data flows, they are expected to be responsible for the majority of the bandwidth utilization. Another important observation is that the traditional IP routed services and these advanced smart network services will need to run over common infrastructure, as a key aim is to not require separate or parallel network infrastructures. Advanced smart network services can be realized via using advanced IP features, such as segment routing, or direct access to the underlying Layer 2 or Layer 1 infrastructures over which traditional IP network services are run.
The remainder of this paper will describe the SENSE Solution (Section 2), SENSE Services Implementation (Section 3), Testbed Deployment (Section 4), Use Cases (Section 5), Performance Evaluation Analysis, Results and Analysis (Section 6), and Summary and Future Plans (Section 7).
