Synthetic biology has found many applications that range from biomedicine [1] to waste management [2]. These applications often rely on engineered biological processing structures to detect, process, memorise and distribute vital information. Even though several programmable biological circuits have been proposed in recent years [3] the term programmable in biological context usually refers to the programming of such circuits using genetic engineering approaches. Only in rare cases biological circuits can be reprogrammed or reconfigured after they have been implemented in living cells, i.e. in vivo. For example, circuits exhibiting different modes of response, namely circuits switching from oscillatory behaviour to bistability and vice versa, have been implemented in a two-strain bacterial population where the type of response was tuned simply by changing a ratio between strain concentrations [4]. Multiple modes of behaviour were as well achieved in uncoupled monoclonal cellular populations [5,6]. These implementations were again limited to two types of behaviour, namely oscillatory and bistable. Another programmable circuit example presents an engineered biological switch that turns on the bioproduction in response to cell growth indicators [7]. However, more complex logic circuits that could be configured even after their biological implementation, i.e. during the execution of their function within their biological application, simply by introducing either internal or external programming signals have not been reported yet.
Configurable logic blocks (CLBs) present a basic functional unit and a fundamental part of programmable logic used within the field-programmable gate array (FPGA) circuits [8]. Within the CLBs, look-up tables (LUTs) present the basic programmable unit and can be used to implement an arbitrary logic function with predefined complexity. LUTs are typically built out of configurable static random-access memory (SRAM) cells to store the configuration and multiplexers to select a specific SRAM cell to drive the output. FPGA circuits present an attractive alternative to application-specific integrated circuits (ASICs), which require vast amount of work that includes architecture, logic and physical design, and to some degree resembles the laborious design of synthetic biology circuits. FPGA circuits on the other hand support rapid design process and can be easily (re)programmed to implement an arbitrary set of logic functions.
We propose a computational design of configurable (bio)logic blocks (CBLBs) that constitute the basic blocks of field-programmable biological circuits. CBLBs can be used in a similar manner as CLBs within the FPGA circuits, which means that they can be configured during the execution of their function in vivo using external or internal programming inputs, for example, with specific proteases or inducers as already reported [9,10]. The function of the engineered CBLB constructs can thus be changed without additional genetic engineering during the execution of the current program the biological construct is executing. This can be regarded as field-programmability, which is as well one of the main benefits of the FPGA circuits.
The amount of genetic parts that can be implemented within a single cell is limited by several biological constraints [11]. Large number of engineered biological parts might impose metabolic burden as well as retroactivity problems within a single cell [[12], [13], [14]]. Moreover, each of the biological wires used to transmit the results of the computation of a specific logic gate needs to be orthogonal to the basic cellular machinery as well as to other engineered biological wires to avoid the signal crosstalk [[15], [16], [17]]. Even though this problem can be partially solved with the application of engineered transcription and translation regulators [18,19], better results can be obtained with the division of labor within the cellular population coupled with different communication mechanisms, such as quorum-sensing [20].
We opt to design the CBLBs within a coupled cellular population, which allows us to construct cellular logic circuits with a relatively large number of engineered biological parts. The proposed design is based on the distributed implementation of two unary logic gates, namely YES and NOT gate, each representing its cellular module as described in Ref. [21]. These can be used to implement a biological memory as an input layer of a CBLB and a biological multiplexer as an output layer of a CBLB. While the memory stores the current CBLB configuration, the multiplexer is used to execute a given logic function.
The proposed design is based on distributed logic modules as described in Ref. [21]. These present an implementation of two unary logic gates, namely identity (YES) and inverter (NOT) gate. Each of these modules is implemented within a separate cell, and shares its inputs and outputs with other modules within the population via quorum-sensing-based communication mechanism [5]. The latter is applied to implement biological wires used to distribute the results of the computation among modules. Different engineered quorum-sensing based signalling mechanisms can be applied here (see, for example [[22], [23], [24]]) to increase the number of available orthogonal biological wires and to reduce the cross-talk within the intercellular signalling system.
In electronic systems, YES and NOT gates can only be used to implement the identity and the inverter functions. However, when two different biological modules express the same output molecule, their result can be interpreted as an OR gate since these modules usually share the same medium. The proposed modules can thus be used for the implementation of an OR gate and present a functionally complete set. This can be used to implement an arbitrary binary logic function. Biological implementations of YES and NOT gates have already been applied to the design of different logic structures, such as the majority gate and the 4-to-1 multiplexer [21], as well as a multicellular memory device based on the toggle switch topology [10]. Moreover, a set of plug-and-play multicellular circuits that can be used as cellular biosensing and actuating devices have been reported recently [25].
In the rest of this paper, we present the design of the proposed CBLB circuits. We establish its deterministic and stochastic computational models and analyse their response using computational simulations as well as parameter investigation techniques. We show that the proposed design is robust and feasible to be implemented within living cells.
