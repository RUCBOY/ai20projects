The investigation on the conditions under which Turing patterns appear in physical systems has been a highly transited avenue of research from the mathematical, the numerical and the physical points of view. It is well known that many nonlinear systems exhibit Turing patterns under suitable conditions on the parameters of the model and the initial data. Some diffusion–reaction systems exhibit the presence of patterns, like some coupled systems describing the interaction between inhibitor and activator substances in chemistry [1], [2], especially in chemical reactions with chlorine dioxide, iodine, and malonic acid [3]. In fact, several different Turing patterns are also found in the chlorine-iodide-malonic acid reaction, including hexagonal, striped [4], and oscillatory structures [5]. Outside the chemical sciences, there is also evidence of the presence of this kind of nonlinear behavior. For instance, there is experimental evidence on the presence of azimuthal Turing patterns in Kerr combs generated by whispering-gallery-mode resonators [6], and the theory suggests that diffusion-reaction systems may be used to understand the formation of this type of patterns in biology [7]. Even the labyrinthine structure of the cerebral cortex has been identified as a complex three-dimensional Turing pattern [8], among other applications [9]. Moreover, it is well known that the Brusselator is a system which exhibits the presence of that type of structures [10], [11].
The physical models described in the paragraph above are diffusive equations. It is well known that these systems have the physical limitation that any perturbation is instantaneously propagated throughout the system. For that reason, hyperbolic forms of these equations are physically preferred. It turns out that a wide variety of Turing patterns have been found also in hyperbolic systems. For example, Turing instabilities have been investigated in diffusive predator–prey models with hyperbolic mortality [12], [13], in hyperbolic models for locally interacting cell systems [14], in the hyperbolic chaos of standing-wave patterns generated by a modulated pump source [15] and in the spreading of infectious diseases in hyperbolic susceptible–infected–removed models [16]. Also, the presence of various wave and Turing patterns has been studied in the context of hyperbolic forms of the Brusselator [17], [18], in some hyperbolic models for self-organized biological aggregations and movement [19], in network systems through collective patterns and single differentiated nodes [20], in predator–prey models with spatio-temporal delays [21] and in hyperbolic vegetation models for semiarid environments [22], just to mention some.
In recent years, fractional derivatives have been introduced to mathematical models in order to provide more realistic descriptions of the physical phenomena. For instance, many fractional systems have been obtained as the continuous limit of discrete systems of particles with long-range interactions [23]. However, independently of that, fractional derivatives have been successfully used in the theory of viscoelasticity [24], the theory of thermoelasticity [25], financial problems under a continuous time frame [26], self-similar protein dynamics [27] and quantum mechanics [28]. Moreover, some distributed-order fractional diffusion–wave equations are used in the modeling of groundwater flow to and from wells [29]. As expected, the complexity of fractional problems is considerably higher than that of integer-order models, whence the need to design reliable computational techniques to approximate the solutions is pragmatically justified [30], [31]. In this direction, the literature reports on various methods to approximate the solutions of fractional systems. For example, some numerical methods have been proposed to solve fractional partial differential equations using fractional centered differences [32], [33], the time-fractional diffusion equation [34], the fractional Schrödinger equation in multiple dimensions [35], the fractional Korteweg–de Vries–Burgers equation [36], fractional FitzHugh–Nagumo monodomain models in two spatial dimensions [37], distributed-order time-fractional diffusion–wave equations on bounded domains [38] and some Hamiltonian hyperbolic fractional differential equations that generalize various well-known equations from quantum field theory [39], among other problems [40], [41].
From the numerical point of view, the investigation on the design of numerical methods to solve fractional partial differential equations has witnessed intense developments in recent years. Two milestones in this respect are the book by Diethelm on the analysis differential equations with derivatives of the Caputo type [42], and a recent survey and software tutorial for the numerical solution of fractional partial differential equations by R. Garrappa [43]. However, it is worth pointing out that several individual efforts have reported on novel techniques to solve differential equations of the hyperbolic type with fractional partial derivatives. For example, there are works in the literature on high-order implicit–explicit schemes for the space fractional nonlinear Schrödinger equations [44], locally extrapolated exponential splitting scheme for multi-dimensional nonlinear space-fractional Schrödinger equations [45], some new computational techniques for the fractional Gardner and Cahn–Hilliard equations [46], preconditioned iterative methods for fractional diffusion models appearing in financial mathematics [47], high-order methods for space fractional reaction–diffusion equations with non-smooth data [48] and trapezoidal methods for fractional differential equations [49] among other interesting reports. Moreover, some applications of those schemes have been proposed to physical problems on systems of particles with nearest-neighbor [50] and long-range interactions [51], [52].
In spite of all the efforts to investigate mathematically and numerically physical systems governed by fractional differential equations, the computational simulation of fractional models still represents a challenge. Indeed, it is well known that the numerical approximations of fractional derivatives take up a lot of computer resources and time. This is a consequence of the fact that fractional derivatives are computed using historic or global information [53]. In order to alleviate this problem, various reports in the literature aimed to propose computationally efficient implementations to solve fractional problems [54]. Some of those implementations use the parallel calculation capabilities of new computers [55], [56]. However, we must point out that many of those approaches result complicated for people with little knowledge on scientific programming. The purpose of this work is to derive a computer routine to simulate the spatial dynamics of a system of space-fractional hyperbolic partial differential equations in three dimensions. As expected, the problem may be computationally highly demanding and complex. However, the computer model proposed in this paper is easy to implement for any scientist with basic knowledges on computer programming. Moreover, the approach exploits the advantages of the matrix algebra routines of Fortran 95, though the coding can be carried out also in C++, Matlab and other mathematical software. As we will show, the scheme can be applied to the investigation of three-dimensional Turing patterns in (fractional or non-fractional) hyperbolic systems.
This manuscript is organized as follows. In Section 2, we introduce the fractional model of interest in this work. Mathematically, the model is an initial-value problem governed by two space-fractional hyperbolic partial differential equations in three spatial dimensions, which generalizes various physical systems with damping. We introduce the definition of Riesz fractional derivatives, and describe a more general system that can be treated under the same methodology proposed in this work. The discrete nomenclature and the numerical methodology to solve the fractional system is presented in Section 3. As we will see, the scheme is explicit, and its computational implementation is described in Section 4. Our computational approach is based on an equivalent matrix presentation of the scheme, and a pseudo-code is presented at that stage. It is worth mentioning that the implementation is motivated by the advantages of the matrix routines available in Fortran (though similar functions are available in C++ and Matlab). An illustrative application of the scheme to the investigation of three-dimensional complex Turing instabilities is provided, and we close this work with a brief section of concluding remarks. For the convenience of the reader, a preliminary parallel implementation of our code in Fortran 95 is provided in Appendix B.
