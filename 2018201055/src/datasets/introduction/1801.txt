String constraint solving (in short string solving) is an emerging important field, given the ubiquity of strings in different domains such as test-case generation [1], program analysis [2], model checking [3], web security [4], and bioinformatics [5]. The string solving approaches that have been proposed so far are mainly based on: automata [6], [7], [8], word-equations [9], [10] and unfolding (using either bit-vector solvers [11], [12] or Constraint Programming (CP) [13]).
Automata and word-equations handle unbounded-length strings, but have limitations when combining string and integer constraints, and suffer from scalability issues: automata growth in the first case, disjunctive case-splitting in the second. Unfolding approaches are based on bounded-length strings: they fix a length bound λ and then map each string variable to a vector of λ elements (either by compiling down to integer/bit-vector constraints [14], [11], [12] or using dedicated propagators [13]). This approach adds flexibility but sacrifices high-level relationships between strings, and can become very expensive when the maximum string length λ is large — even if generated solutions are very short.
A recent CP approach introduced the dashed string abstraction [15], [16], [17], [18]. This approach can be seen as a lazy unfolding over bounded-length strings, where the goal is to mitigate the dependency on the length bound λ. Informally, a dashed string consists of a concatenation of distinct set of strings called blocks. The core idea is to encode in a compact way potentially very long strings, and very big sets of strings, by discriminating between the (number of) characters that may appear in a string, and those that must appear. Ideally we aim to find, if there exists, the dashed string that better abstracts a given set of concrete strings. The empirical evaluations conducted in [15], [16], [17], [18] demonstrate the effectiveness of this approach, which has been implemented in the G-Strings [19] string solver.
In this paper, we provide a comprehensive review of the dashed strings approach for string constraint solving. In particular, we:
•formalise the model and the theoretical properties of dashed strings, by correcting and refining the notions first introduced in [15];•explain in much more depth, and formally prove correctness of, the Equate algorithm first introduced in [16], which constitutes the basis of most propagators for dashed string solvers;•provide an overview of the propagators and the branchers we devised for string solving, and the tools we implemented based on dashed strings;•report a new empirical evaluation where we compare the dashed string approach against state-of-the-art string solvers on the recently introduced StringFuzz string benchmarks [20].
