According to the 2016 Kaspersky study of Industrial Control Systems’ vulnerabilities, memory corruption issues, such as the overflow of a buffer, rank among the most prevalent vulnerabilities in embedded systems [1,6]. This is an especially serious threat to fields adopting the use of application-specific embedded systems that may be costly to update often (e.g., on a yearly basis) and may lack the hardware and software support to collect data and run sensitive applications. At the same time, embedded systems are becoming increasingly connected to build larger networks and meet the growing demand of internet of things (IoT) development; if not done carefully, this growth could spread vulnerabilities.
This paper focuses on a type of memory corruption attack that targets shared library symbol tables in program images. Proposed defenses against memory corruption attacks have focused on operating systems, compilers and linkers [2], relying on general-purpose, hardware-based security architectures. Most of these defenses have been shown to have poor compatibility with or require too much server or cloud software to be supported by many embedded systems. Furthermore, new attacks may not have specialized hardware already available to address such attacks. We focus on embedded systems which feature tightly coupled FPGAs. Furthermore, we believe this is the first time in which reconfigurable logic is used to provide security functionality previously implemented in a custom instruction set or other computer architecture modifications. This programmable logic could allow systems to be updated with minimal effort (i.e., modification to FPGA logic) to support the latest security-related architecture enhancements, including legacy systems with such programmable logic. We believe that a microcontroller chip incorporating programmable hardware can allow resource-constrained embedded devices to be robustly secure.
Our goal is to expand the previous work in [7] on hardware-software co-design to protect running programs from attempts to modify shared library symbol tables. The proposed solution stores shared library symbol tables in a hardware Root of Trust (RoT) and provides retrieval through our hardware/software co-design architecture. The scope of this research is limited to application-specific embedded systems on von Neumann architectures. We do not consider hardware attacks such as side-channel attacks and hardware Trojans.
This paper makes the following contributions to embedded systems security:
•Hardware RoT to protect symbol tables from malicious modification•Software library to support the storage/retrieval of symbol table entries to/from our proposed hardware RoT•Necessary software application modifications to utilize our hardware-software co-design flow•Quantitative comparison of hardware RoT with existing methods of protection
This article begins with a background on linking and hardware platform weaknesses in Section 2, a description of buffer overflow attacks in Section 3, a description of the threat model in Section 4 and a survey, in Section 5, of existing defenses for our threat model. Section 6 describes our proposed defensive architecture. The experimental contribution of the paper is detailed in Sections 7 and 8 with experimental results explained in Section 9. The paper finishes with a discussion and conclusion in Sections 10 and 11, respectively.
