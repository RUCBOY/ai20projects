Nowadays, various IoT devices such as cameras or sensors connect to the Internet. They are generally small size and their processing powers are also low. Therefore, in most IoT applications, stream data generated by these devices are transmitted to remote processing computers. The processing computers process stream data continuously and get various useful results. For example, in surveillance systems, a processing computer receives video data continuously from surveillance cameras and analyzes image data of each video frame to identify recorded people.
In IoT applications, a higher stream transaction rate leads a more frequent data analyses and enables performance improvements. In the above example, the number of the people identified increases as the transaction rate increases since they are moving and the probabilities to record them in the video increase. Here, a transaction includes the data collection and the analysis. Generally, the transaction rate is determined so as not to overlap transactions because a transaction time (from the start of a data collection to the finish of the analysis) lengthens when the transaction overlaps with the previous or the next transaction. Therefore, to improve the transaction rate, some methods reduce the transaction time [1], [2], [3], [4]. A shorter transaction time enables a shorter transaction interval of stream data and thus the stream transaction rate increases. They target periodic transactions and assume static transaction interval.
However, the transaction time dynamically changes depending on the communication time and the processing time of each transaction. Indeed, these times differ for each transaction in some existing methods [5], [6], [7]. Although a shorter transaction time enables a shorter transaction interval, the conventional methods assume static interval. Therefore, the transaction rate can be further improved by changing the transaction interval dynamically depending on these times. It is very difficult to determine the transaction interval so as to further improve the transaction rate because these times depend on the contents of the stream data. As explained above, the transaction rate decreases in cases that the transaction interval is too short and the transactions overlap. On the other hand, a longer transaction interval also decreases the transaction rate because the frequency that the data sources transmit the stream data decreases. It is required to determine the transaction interval to efficiently improve the transaction rate.
In this paper, we propose a method to improve the transaction rate by changing the transaction interval dynamically. In our proposed method, a processing computer sometimes changes the transaction interval to be the same length as the average transaction time. Frequent changes of transaction interval cause the inconsistency of the times to get data. To keep the consistency as possible, in our proposed method, the processing computer changes the interval every a fixed number of transactions. Moreover, our proposed method adopts a progressive quality improvement (PQI) approach to reduce the transaction time. In the approach, the data amount of transmitted data is reduced by transmitting the data that have necessary quality.
The main contributions of this paper are summarized as follows:
•A dynamic interval method to improve the transaction rate under the PQI approach.•An adoption of the PQI approach.•A performance evaluation of our proposed method by a simulator and a real situation.
Edge computing, Fog computing, and MEC Servers get attractions to realize the real time processing of IoT streams. Our proposed method in this paper achieves a faster stream transaction compared with a previously proposed methods and can contribute to realize low latency, fast round trip time systems under these paradigms.
The remainder of this paper is organized as follows. In Section 2, we introduce some related work. In Section 3, we will explain our assumed system environments. Our proposed method is explained in Section 4, Our implementation is explained in Section 5 and the performance evaluation results are shown in Section 6. Finally, we will conclude the paper in Section 7.
