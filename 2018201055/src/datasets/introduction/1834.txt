The rise of personal devices and Internet-enabled equipments makes computer networks more complicated. For example, the Internet of Things (IoT) allows hundreds of devices connecting and exchanging data with each other [31,34]. In addition, the recently increasing cloud services cause an unprecedented growth of both public and private cloud services. Under such environments, it is very difficult to provide efficient network management and avoid configuration errors, i.e., it may require stopping the current services to add a new service. With the rapid development of the IoT, this problem would become more challenging [23].
In order to mitigate this issue, Software-Defined Networking (SDN) technology is proposed to revolutionize network design and operations. It enables the programming of network services in a centrally controlled way via software applications and open APIs. That is, it centralizes management by abstracting the control plane from the data forwarding function [7]. The centralized management can help simplify network management and decrease the configuration errors [37]. Due to its advantages, SDN has become a promising solution in practice. According to a survey from Verizon [1], based on the experiences of 165 senior IT leaders from large organizations, it is found that around 15% of organizations have already implemented SDN, and up to 57% of respondents expect to deploy SDN in the near future.
In practical usage, SDN still faces many security issues like insider threats, where an internal device can be utilized by intruders to attack other devices and even the central controller. For instance, attackers and cyber-criminals can try to gain access to Virtual Machines (VMs) under SDN and compromise one VM to launch intrusions. For protection, an intrusion detection system (IDS) can be deployed in each node to help identify malicious nodes. Generally, an IDS can be categorized as rule-based or anomaly-based [38]. The former detects an intrusion by comparing its stored rules with current events. The latter detects a suspicious event by figuring out a significant deviation between the pre-defined profile and the current events. If there is a rule match or the deviation exceeds a threshold, then an alarm will be sent to notify security managers [27].
For SDN environments, the distributed nature requires deploying a collaborative intrusion detection network (CIDN), which allows the data exchange among different nodes. In order to detect a malicious node inside SDNs, trust management schemes are often needed to measure the reputation of an entity. Motivated by our previous studies [16,18,19], in this work, we focus on challenge-based CIDN, which measures the reputation of target nodes by sending challenges in a periodic way and investigate its performance in detecting malicious nodes under SDN environments. The contributions of our work can be summarized as follows:
•We first introduce the background of SDN and then describe how to apply the challenge-based CIDN in SDN environments. Similar to our former studies, a challenge can include several alarms asking for severity. As the testing node knows the actual severity in advance, it can compute a satisfaction level based on the received feedback.•In the evaluation, we explore the performance of challenge-based CIDN against malicious devices or nodes in a simulated SDN environment with relevant switches and controllers. The experimental results indicate that such a detection mechanism works well in SDN by identifying malicious nodes in a fast way.
The remaining parts of this paper are structured as follows. Section 2 introduces the background of SDN and reviews relevant research studies on CIDN and trust management in SDN. Section 3 describes the architecture of challenge-based CIDN and how to deploy it in SDN. Section 4 evaluates the application of challenge-based CIDN in SDN against insider attacks. We discuss open challenges in Section 5, and conclude our work in Section 6.
