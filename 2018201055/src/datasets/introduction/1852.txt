Reducing reachability of a graph is to find edges whose removal disconnects all the specified vertex pairs while minimizing the side effect. The side effect is traditionally defined as the sum of weights of edges deleted. In this paper, it is defined as the number of the sets of reachable labels that have to be disconnected. In many graph cut related applications, it is hard to quantify the edge costs, or unnecessary to parameterize the references indicated by edges. Therefore, we consider more on the side effect of applying a cut, that is, find a cut disconnecting all specified vertex pairs while preserving reachable pairs as much as possible.
In fact, such kind of cuts has a broad application in many fields of science and engineering, especially computer science. For example, in the area of network security, an effective way to prevent network security attacks (e.g., identity snowball attack [1], [2]) is to reduce the reachability of the network by disconnecting some particular roles. At the same time, it is expected to prevent the reachability of all the other roles. Similarly, it is an alternative way to reduce some reachability by link breaking so as to achieve the denial of malicious DDoS attacks (e.g., bad flow removing [3]). As argued in [3], the hard constraint is to remove the undesired reachable pairs by edge deletion. Meanwhile, the other good flow should be preserved as much as possible. In software engineering, a huge body of literature tries to discover logical causality (such as, data cleansing [4], [5] and view propagation [6], [7]) or sufficient condition of finite-state models (such as, non-deterministic automata network [8], [9], etc.), which is to find a set of transitions such that disabling them could prevent the reachability to some specific states exactly. Again in IoT [10] and crowd-sensing, data are generated and exchanged by different devices and users with a risk of leaking sensitive information. An important task is to find network links on the data transmission paths between senders and malicious attackers whose blocking prevents privacy leakage while maintaining network connectivity.
To understand this class of reachability reduction problems, we propose a unified model to generalize such graph reachability reduction problems. In our model, we are given a graph where each vertex associates with a label representing its role in some specific application. In such context, two labels are said to be disconnected if any vertex carrying one of the two labels cannot reach any one carrying the other label. Given some label pairs intended to be disconnected, one is asked to find a cut which is a set of edges, such that in the resultant graph after removing the cut, label pairs remaining connected are maximum.
On the theoretical aspect, we provide a more generalized definition for the reachability preserved cut problem in vertex labeled graphs, so as to perform a comprehensive complexity analysis on this problem.
1.1. Reachability preserved cutIn the following, we introduce some basic notations followed by the problem definition including its decision and optimization versions.Vertex labeled graphs. A vertex labeled (directed) graph G is a quintuple (V,E,L,π), in which V is the vertex set {v1,v2,…,vn}, E is the edge (arc) set {e1,e2,…,em}, L is the label set {1,…,l}, and the mapping π:V→L assigns each vertex a label from L. Let π−1(i) be the set of vertices taking label i such that π−1(i)={v:π(v)=i}. Clearly, if π is an injection, then |π−1(i)|≤1 for each i∈L, that is, each vertex takes a label distinct from any other one. For simplicity, given any vertex labeled graph G(V,E,L,π), it is referred to as G(V,E) when π is an injection, or when we talk about the structure of it, such as tree, path, DAG, etc.Reachable labels. Given a vertex labeled (directed) graph G=(V,E,L,π) and an integer k>1, any subset R⊆L is k-wise reachable if 2≤|R|≤k and there is a (weakly) connected component C in (directed) graph G such that π−1(i)∩C≠∅ for every i∈R. We use S(G,k) to denote the set of all k-wise reachable label sets of G. Obviously, for any 2≤k≤n, we have |S(G,k)|≤∑i=2k(|L|i). Especially, when π is an injection, we have |S(G,k)|≤∑i=2k(ni).In this paper, we study the maximum reachability preserved cut problem which can be defined as follows,Download : Download high-res image (55KB)Download : Download full-size imageFor clarity, we state the decision version of (k-Mrp-Cut) as follows,Download : Download high-res image (48KB)Download : Download full-size image Fig. 1 illustrates the optimal solution of 2-Mrp-Cut. We were given a vertex labeled graph G(V,E,L,π) where π is an injection. As we mentioned, we denote G(V,E,L,π) as G(V,E) for simplicity. Let the input negative set be S-={{s1,t1},{s1,t2},{s2,t2},{s3,t3}} and the positive set S+=S(G,2)∖S-. We show the differences between 2-Mrp-Cut and the well-known minimum s-t cut problem.•Minimum s-t cut. In Fig. 1, each set of S- is a 2-wise reachable label set. Minimum s-t cut is to find a minimum set of edges whose removal disconnects the two vertices of every set in S-. The optimal solution is the cut {(s2,t2),(v3,v4),(s3,t3)} in which each edge intersects with the blue dashed line in Fig. 1. After removing the three edges, two connected components {s1,s2,s3,v1,v2,v3} and {t1,t2,t3,v4,v5} are left in the resultant graph G′. Obviously, the number of 2-wise reachable label sets of G′ is|S(G′,2)|=(62)+(52)=25.•2-Mrp-Cut. The optimal solution of 2-Mrp-Cut should be the set of edges marked by red crosses in Fig. 1. It destroys all the paths connecting the two vertices in each set in S- while preserving 2-wise reachable label sets in S+ as many as possible. This cut separates the graph into two connected components {s1,s2,s3,v1,v2,v3,v4} and {t1,t2,t3,v5}. The number of 2-wise reachable label sets of the resultant graph G′ is|S(G′,2)|=(72)+(42)=27.•A feasible solution of 2-Mrp-Cut may be the edges intersecting with the green dotted line in Fig. 1, which separates the graph into three connected components {s1,s2,s3,v1,v2,v3,v4,v5}, {t1,t3}, and {t2}. In this resultant graph G′, the number of 2-wise reachable label sets is much less than 27, say|S(G′,2)|=(72)+(22)+0=22.Download : Download high-res image (132KB)Download : Download full-size imageFig. 1. An example of the 2-Mrp-Cut problem and an optimal solution of it. (For interpretation of the colors in the figures, the reader is referred to the web version of this article.)Different from some well-known graph cuts, Mrp-Cut is aware of side effects on the reachability rather than the cost of a cut. Similar with our problem, another two problems also care about this kind of side effects caused by applying the cut. One is the minimum k-cut which is to separate the given graph into at least k connected components by removing minimum number of edges. Leighton and Rao [11] developed one of the most breakthrough approximation algorithms by using the divide-and-conquer strategy to solve the cut problem. The decision version of k-cut problem is to determine whether there is a cut of size at most s. For a fixed k, the problem minimum k-cut has been proved as O(|V|k2) polynomial time solvable [12]. But if k is a part of the input, the problem becomes NP-hard [13]. Another problem is the minimum multiway cut problem [14]. It can be reduced to minimum s-t cut problem in undirected graphs and has been proved to be NP-hard as well. The difference between our model and well-known cut-related problems is that Mrp-Cut does not care about the cost of a cut itself but the side effect caused by the removal of a cut. Although many related works (on cuts, clustering, reachability problems, etc.) have been proposed and investigated, there is still few work studying our reachability preserved cut problem, but they are essentially different from our work.The main results of this paper are summarized as follows. We study the computational complexity of the reachability preserved cut problem, and show the hierarchy of it complexity ranging from P to Σ2P. Especially, we found that k-Mrp-Cut is NP-hard even if k=2 and the structure of G is very simple. We also show that k-Mrp-Cut is harder in digraphs than that in undirected graphs. Finally, a polynomial tractable case of k-Mrp-Cut is identified, that is, if G is a path graph, then 2-Mrp-Cut can be solved polynomially. In addition, the algorithm can be trivially extended into some restricted tree cases. These results provide the evidences and directions for different applications of the reachability preserved cut.
