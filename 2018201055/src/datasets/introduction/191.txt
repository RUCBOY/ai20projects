The discrete geodesic problem is to compute geodesic distances on polyhedral surfaces. As a fundamental problem in computational geometry, it has a wide range of applications in robotics, geographic information systems and computer graphics [1]. The classic discrete geodesic algorithms are the Mitchell–Mount–Papadimitriou (MMP) algorithm [2], the Chen–Han (CH) algorithm [3] and their many variants [4], [5], [6], [7]. Given a manifold triangle mesh and a user-specified source vertex, these algorithms partition the mesh edges into intervals, called windows, and propagate them from the source to other vertices in a continuous Dijkstra’s style. During the propagation, a window can be split and generate one or more child windows. When a window lights a vertex, it updates its geodesic distance. These algorithms compute exact solutions on arbitrary manifold triangle meshes and differ in the way of window organization and the propagation scheme.
Among the above-mentioned algorithms, vertex-oriented triangle propagation (VTP) [7] is the most efficient one. Instead of propagating windows individually, VTP groups the windows of the same half-edge, and propagates the window lists across the triangulated faces in an ascending order of vertex distances, which are maintained by a priority queue. Computational results show that VTP runs 2∼15 times faster than the other exact algorithms [2], [3], [4], [5], [6]. Since there are O(n2) windows on a triangle mesh with n vertices, VTP has a theoretical time complexity O(n2). For regularly tessellated triangle meshes, VTP runs in O(n1.5) time empirically.
This paper aims at improving the performance of VTP via parallelization and approximation. The sequential VTP algorithm iteratively takes a vertex v from a priority queue (ordered by the negative distance to the source), and collects the window lists associated to the half-edges incident to v, and propagates them one by one. Our parallel VTP (or PVTP in short) supports parallel window list propagation across multiple triangles. Specifically, it collects K window lists from multiple vertices, and propagates T (specified by the user) of them simultaneously, where T is the number of threads. After all the K window lists are propagated, we adopt a delayed-writing strategy to collect the newly generated window lists and updated vertices so that we can avoid writing conflict. Extensive evaluation on a wide range of 3D models with various degrees of anisotropy shows that PVTP improves the performance of the sequential VTP algorithm by a factor of 2.5∼3 for T=4 and 4∼5 for T=8 on triangular meshes with regular tessellation and over 1 million vertices.
We also develop an approximate variant of VTP. We observe that for all the window propagation based exact algorithms, the propagation slows down when the wavefront has a long circumference, hereby containing a large number of pending windows. To balance speed and accuracy, we propose a window resetting strategy. Denote by h the average edge length. When the radius of the wavefront is a multiple of λh, we delete all the windows generated so far and take the vertices on the wavefront as new sources for the subsequent propagation. By resetting window at regular distance intervals, we can significantly reduce the total number of windows generated and improve the propagation speed. The parameter λ balances the accuracy and the speed. When λh is less than the minimal edge length, AVTP reduces to Dijkstra’s algorithm. On the other hand, for a sufficiently large λ so that λh is greater than the longest geodesic distance on the mesh, AVTP becomes the exact VTP algorithm. AVTP has a theoretical time complexity O(nλ), which is also confirmed by computational results. It is worth noting that the proposed parallelization and approximation techniques can be either used separately or combined together.
The rest of the paper is organized as follows: Section 2 reviews the related work on discrete geodesics, followed by background knowledge on windows and vertex-oriented triangle propagation in Section 3. Sections 4 Parallel VTP, 5 Approximate VTP document the proposed parallelization and approximation techniques, respectively. Section 6 reports experimental results. Finally, Section 7 concludes the paper and points out a few future directions.
