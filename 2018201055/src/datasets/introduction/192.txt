Advanced Persistent Threat (APT) is one of the most prominent cyber attacks that has the potential to cause significant damage to various organizations and businesses. It is a stealthy attack in which attackers gain unauthorized access to a network for a long period of time. According to Kaspersky Lab [1], a backdoor program, called Carbanak, caused a billion dollar in cumulative losses for a financial institution. Furthermore, more than 80 million social security numbers were siphoned from Anthem, a big health insurance company, which was only detected after nine months [2].
Most secured systems maintain a strong boundary between the internet and the intranet, thus attackers choose targets that have access to hosts behind the network security functions (e.g., firewalls, intrusion prevention systems, etc.). It is difficult for attackers to launch attacks against assets that reside in the intranet. Thus, an attacker usually leverages social engineering techniques (e.g., phishing, pretexting, baiting, etc.) to trick network insiders into executing malicious code or surrendering credentials. This allows the attacker to gain access to the victim’s computer and gradually explore for valuable information by exploiting vulnerabilities of other intranet entities. This is commonly known as Lateral Movement (LM).
During the LM phase, attackers tend to use legitimate system tools, which make the detection of APT a challenging endeavor. However, Machine Learning (ML) techniques have been widely used for APT detection [3]. ML is an ideal tool to extract knowledge from data and learn system behavior [4]. Some research utilize a single ML model, while others combine different learning techniques to form an ensemble or a hybrid model for intrusion detection. For instance, Kaiafas et al. [5] build an ensemble classifier that leverages voting mechanism, whereas Kim et al. [6] employ both Support Vector Machine (SVM) and Decision Tree (DT) to build a two-stage classification model. These techniques demonstrate significant advances in intrusion detection.
APT detection methods generally rely either on network flow data [7], [8], [9], [10], or host system logs [11], [12] to uncover evidence of APT. Network-based intrusion detection has been well explored but has several shortcomings. Firstly, there is limited information that can be extracted from network data. For privacy concerns, it is illegal to inspect network payload without user consent [3], making it non-trivial to extract meaningful information beyond packet statistics and the basic five tuple (i.e., source IP, destination IP, source port, destination port, and protocol). In addition, 72% of the recent network traffic is encrypted using protocols, such as Transport Layer Security (TLS) [13]. This makes inspection of packet’s payload challenging without significantly degrading system performance. Furthermore, attackers launching APT tend to be cautious and often leverage custom protocols, making it harder to detect abnormal behavior within network data.
On the other hand, host-based intrusion detection can overcome the aforementioned limitations. At the end host, data is decrypted, allowing for extraction of information, including payload entropy, packet drop rate, and login failures, which can improve detection performance. Furthermore, operating systems have built-in logging functionalities, which provide abundant information. By enabling or disabling different logging levels and policies, only useful information can be logged. There are multiple stages in APT (cf., Section 2) and certain stages will leave footprints allowing for the detection of intrusion in its early stage. For example, an intruder can gain access to the target host within the intranet, but this action would generate suspicious logs on the end host.
Since the ML algorithms were designed without taking security into consideration [14], both network-based and host-based intrusion detection systems are vulnerable to attacks from adversaries. Therefore, any ML-based system must be designed with defense strategies against adversarial attacks. There are numerous works that attempt to tackle this issue (cf., Section 2). For example, Marco et al. [15] present a taxonomy, identifying and analyzing attacks against ML-based systems. In addition, a variety of defense techniques are proposed in their work to protect systems from different types of adversarial attacks. Biggio et al. [14] develop systematic approaches to defend against the different types of adversarial attacks.
Remote Desktop Protocol (RDP) is designed by Microsoft to provide remote display and input capabilities, while Remote Desktop Service (RDS) is a native service on Microsoft Windows platform that implements RDP. This service is frequently used by legitimate network administrators. However, it is also a primary tool used by attackers during LM [16], since discriminating between legitimate and malicious use of this tool is challenging. We surveyed nine distinct APT incidents and five of them (i.e., over 50%) used RDP during the attack. Therefore, in this paper, we detect anomalous RDP sessions based on evidence from host logs with a focus on optimizing recall. The primary contributions of this work are as follows:

•We highlight the limitations of two publicly available Windows event log datasets from Los Alamos National Laboratory (LANL) [17], [18]. To overcome their limitations, we combine these two datasets while preserving their realistic properties.•We propose an ML-based approach for detecting malicious RDP sessions. We explore different feature sets and evaluate various supervised ML techniques for classifying RDP sessions in Windows event logs.•We compare the performance of our proposed approach to a state-of-the-art method [5], and demonstrate that our ML model outperforms in the classification of RDP sessions in Windows event logs. In addition, we show that our model is robust against certain types of adversarial attacks.
The rest of the paper is organized as follows. Section 2 provides a background and presents the current state of existing host-based intrusion detection systems. Section 3 describes the characteristics and properties of the two datasets we employ in this paper. Section 4 presents the approach of crafting our synthetic dataset based on the existing dataset. Furthermore, the features extracted from this dataset are elaborated, and ML techniques and their performance evaluation metrics are discussed. In Section 5, we delineate our evaluation results in detecting anomalous RDP sessions and benchmark the robustness of our proposed model. Section 6 highlights our main contributions and provides a brief summary of this paper. In addition, this section instigates future research directions.
