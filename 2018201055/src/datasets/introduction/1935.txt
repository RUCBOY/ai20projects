Cloud Computing (CC) is a rapidly developing concept in the domain of distributed computing which could be applied in diverse fields such as data storage, data analysis and IoT applications [10]. CC is an advanced technology that can change the way how traditional businesses work. It offers various facilities to registered clients in the form of online services which like to avoid user investment in computing architecture. Some of the services by CC are Infrastructure-as-a-Service (IaaS), Software-as-a-Service (SaaS) and Platform-as-a-Service (PaaS) [17]. For every service, a user should request the Cloud Service Provider (CSP) via internet. The CSP has to manage the resources in order to satisfy the requests received from clients. SP leverages the scheduling technique to schedule the input requests as well as control the processing resource in an effective manner. Task scheduling and resource management provide high economic rate and resource application until the specified limits. The main barriers in the utilization of CC operations are allocating and scheduling the resources. In order to overcome these complexities, many researchers showed their interest in task scheduling process in CC. The main work of task scheduling is to organize the input request in a definite way so that every resource is utilized in an efficient manner. Each service is provided to numerous clients and several tasks might be executed at the same time. If the system does not apply scheduling method, then it results in longer waiting time for the process to be performed. Unfortunately, few requests get terminated due to long waiting time that exceeded the maximum limit. While scheduling is carried out, the concern scheduler is required to monitor some of the limitations such as behavior of the task, size of the request, execution time of the task, available resource and the load induced on the resources.
Task scheduling is the main problem involved in CC. The merit involved in CC is its efficient usage of all the resources which can occur only when the task scheduling is carried out properly [2]. Hence, both task scheduling and resource allocation have been considered as mandatory operations for all processes to be performed. At present, people using internet could gather information from any location at any time without any idea about the host structure. These kinds of hosting infrastructures include different systems and abilities which are controlled by CSP. CC improves the potentials of host infrastructure that can make use of internet services. CSP gains efficiency through facilitating the clients by making use of Cloud Services (CS). Clients apply the CS to employ the whole processing services from software to hardware. The services offered in CC follow the pay-as-you-go model. The utilization of resources may increase or decrease depending on the CSP users and their demand for applications. It is considered as a merit of CC though it comes with additional cost. The CS user can choose different services based on the application required. However, this freedom of optional service may lead to challenging issues that needs to be detected properly. CC research has two main parts namely task scheduling and resource allocation. The efficient usage of the resource is based on scheduling and load balancing techniques to avoid the arbitrary allocation of sources. CC aims at resolving difficult operations using scheduling techniques.
Load balancing and task scheduling are important players in CC environment; thus, the current research work proposes out a novel technique in order to obtain better results with the help of hybridizing firefly and Improved Multi-Objective Particle Swarm Optimization (IMPSO) technique, abbreviated as, FIMPSO. It applies Firefly (FF) algorithm to minimize the search space whereas the IMPSO technique is implemented to identify the enhanced response. IMPSO works by selecting the global best (gbest) particle with a small distance of point to the line. With the application of minimum distance from a point to line, the gbest particle candidates could be elected. The simulation outcome from the proposed model was found to be too optimized when compared with alternate models [1], [3], [12], [16], [24].
The upcoming sections are planned as follows. Relevant studies are discussed in Section 2. The proposed FIMPSO algorithm is described in Section 3 and validated in Section 4. At last, the conclusions are drawn in Section 5.
