Quantum computation promises a regime with unprecedented computational power over classical devices, offering numerous interesting applications, such as factorization [1], quantum simulation [2], [3], and quantum machine learning [4], [5]. However, before quantum computers become prevalent to the public, one might expect that only organizations with sufficient resources could operate a full-scale quantum computer, analogous to today’s supercomputers. Furthermore, individuals who have demands for quantum computation could access the service through the internet, i.e., quantum cloud computing. In fact, several small-scale quantum cloud services have already been launched (for example, the IBM quantum experience and Rigetti Computing), which can be operated by remote clients through the internet. As a result, many simulations performed from quantum cloud servers have been reported (see Ref. [6] for a summary).
In the near future, it is not impossible that these clouds may claim to offer 100 or more working qubits and many layers of quantum gates, where quantum supremacy [7], [8], [9], [10], [11], [12] could be achieved. However, one may naturally ask, is there a real quantum computer behind the cloud? Or, would it just be a classical computer simulating quantum computation? For ordinary clients who only have control and access of classical computer, a natural task is to verify whether these cloud servers are truly quantum.
Alternatively, the question can be formalized as follows: is it possible for a purely-classical client to verify the output of a quantum prover? This question has been extensively explored for more than ten years. In 2004, Gottesman initialized this question, which Aaronson wrote down in his blog 2. A straight-forward idea is to run a quantum algorithm solving certain NP problems, for example, Shor’s algorithm for integer factorization [1]. Such problems might be hard for classical computation, but are easy for classical verification once the result is known. However, the challenge is that a full quantum algorithm typically requires thousands of qubits and quantum error correction to be implemented, which is out of question in the noisy intermediate-scale quantum (NISQ) [13] era.
Note that the verification problem have different variants. For example, one may assume that the supposedly “classical” client may actually have a limited ability to perform quantum operations on a small number of qubits. This line of research has already attracted much attention [14], [15], [16], [17], [18], [19], [20]. Without any quantum power, the client might still be able to verify delegated quantum computation which is spatially separated and entanglement can be shared [21], [22]. Currently, this approach does not seem to fit the setting of the available quantum cloud services, as they require two entangled servers. These two lines of research reveal the outstanding challenge for establishing a rigorous verification scheme based on a classical client interacting with a single server using only classical communication.
Until recently, Mahadev [23] has made important progresses, and proposed a protocol that allows a classical computer to interactively verify the results of quantum computation, assuming that the learning-with-errors problem [24] is computationally hard even for quantum computer. Despite these great efforts, we are still facing the problems of “non-interactively” verifying near-term quantum clouds, which would be too noisy for implementing full quantum algorithms but may be capable of demonstrating quantum supremacy.
Here we report an experimental demonstration of a simple but powerful cryptographic verification protocol, originally proposed by Shepherd and Bremner [25] in 2008. We extended the theoretical construction in terms of n-point correlation. The implementation was first performed with a 5-qubit NMR quantum processor in the laboratory. Additionally, we also benchmarked the performance of the verification scheme by actually implementing the protocol with the IBM quantum cloud processors 3.
The verification protocol implemented is based on a simplified circuit model of quantum computation, called IQP (instantaneous quantum polynomial) model [25]; the qubits are always initialized in the “0” state. The IQP circuits contain three parts. In the first and the last part, single-qubit Hadamard gates are applied to every qubit. The middle part of an IQP circuit does not contain an explicit temporal structure, in the sense that diagonal (and hence commuting) gates acting on single or multiple qubits are applied. On one hand, the IQP model represents a relatively resource-friendly computational model to be tested with near-term quantum devices. On the other hand, the IQP model has been proven to be hard for classical simulation [26], [27], under certain computational assumptions, similar to Boson sampling [28]. Moreover, in the framework of fine-grained complexity, it is shown that IQP circuits with over 90 qubits cannot be efficiently simulated with constant multiplicative error on current classical computers [29].
