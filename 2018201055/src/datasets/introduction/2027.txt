Many current performance studies of computer systems are evaluated by subjecting the system under evaluation to a workload obtained from publicly available traces. Some examples include the work in Tadakamalla and Menasce (2018), Carvalho et al. (2017), Liu and Cho (2012), and Mishra et al. (2010) that use the well-known Google traces (Reiss et al., 2011) obtained over 29 days in a cluster of around 12 thousand servers. While the use of publicly available traces as inputs lends significant credibility to performance studies, it almost always precludes the use of analytic models that rely on strict stochastic assumptions for the workload process and on steady-state conditions. A common example of analytic model of computer systems are Queuing Networks (QN) (Baskett, Chandy, Muntz, Palacios-Gomez, 1975, Menascé, Almeida, Dowdy, 2004, Reiser, Lavenberg, 1980), which can be used to represent a network of queues through which jobs circulate during their execution. The advantage of analytic models is their efficiency in computing the performance metrics of interest for a set of input parameters. However, because the use of traces as inputs limits the applicability of analytic performance models, simulation or prototype implementations has been used in combination with traces to obtain the desired performance metrics. This approach is less general and more time consuming.
This paper shows how one can combine the use of traces as input and QNs as analytic models of computer systems. In particular, we discuss the use of closed Queuing Network (QN) models during finite time intervals to estimate the execution time of jobs submitted to a computer system. Queuing theory has extensively studied the problem of estimating job execution times under steady state conditions both in the case of single queues or queuing networks (see e.g., Baskett, Chandy, Muntz, Palacios-Gomez, 1975, Menascé, Almeida, Dowdy, 2004, Reiser, Lavenberg, 1980, Kleinrock, 1975). Early results on queuing theory were derived assuming certain stochastic assumptions (e.g., steady-state equilibrium, Poisson arrivals, exponentially distributed service times). Some of these results were later generalized to more general distributions (Baskett et al., 1975), but still the steady-state equilibrium assumption was required in these cases.
However, the results obtained under stochastic assumptions proved to be quite robust even when these assumptions were violated. The reason for the robustness of many analytic models of computer systems was explained by Jeff Buzen in his formulation of operational analysis of computer system performance (Buzen, 1976). Operational analysis establishes mathematical relationships between variables that can be measured during a finite time interval. If these relationships are always true they are called operational laws and if they require some assumptions they are called operational theorems. The validity of the assumptions in operational theorems can also be assessed by taking measurements during the same finite interval during which the relationships are established. Examples of operational assumptions are: (1) flow balance (i.e., the number of arrivals is equal to the number of departures during a given time interval), (2) Homogeneous arrivals (i.e., the arrival rate does not depend on the queue size), (3) homogeneous service times (i.e., the mean time between completions does not depend on the queue size), and (4) one-step behavior (i.e., a queue length can only vary by increments of  ±  1) (Buzen, 1976). Note that steady-state implies flow balance but the converse is not true (Buzen and Denning, 1980b).
Buzen and Denning have derived in Buzen, Denning, 1980, Buzen, Denning, 1980 the operational counterpart of the Mean Value Analysis (MVA) (Reiser and Lavenberg, 1980) equations for solving closed QN models. They showed that the MVA equations are valid for finite time intervals if flow balance, one-step behavior, and homogeneous service times are met. As will be seen later in this paper, this is a key aspect on which we rely on.
This paper considers the following problem, the understanding of which is better illustrated with the help of Fig. 1. The figure shows a computer system (top right) and a queuing model of that system (bottom right), which represents the processors, I/O devices and their respective queues. The system model can be solved using simulation techniques (Severance, 2001) or analytic models such as queuing networks (Baskett, Chandy, Muntz, Palacios-Gomez, 1975, Menascé, Almeida, Dowdy, 2004, Reiser, Lavenberg, 1980).Download : Download high-res image (265KB)Download : Download full-size imageFig. 1. Methods for characterizing arrival processes in modeling.
The left-hand side of Fig. 1 shows three typical methods for characterizing the arrival process of jobs to a computer system. Method (a) is trace-driven and consists of a job trace that can be either replayed against the real system in order to derive actual measurements or used as input in trace-driven simulation studies. Method (b) is distribution-driven and consists of generating job inter-arrival times (and their features) as random numbers that follow a desired probability density function. This is a typical method used in discrete event simulation. Finally, method (c) is analytic expression-driven and considers the mathematical expression that characterizes job inter-arrival time distributions. This method is used for deriving expressions for the solution of analytical models of computer systems. This paper shows how to combine methods (a) and (b), typically used in simulation studies for generating job arrivals, with analytic system models, which are used here to estimate contention for shared resources (e.g., processors and I/O devices). The advantages of this approach are:
1.The system model can be solved through efficient analytic methods (e.g., mean value analysis Reiser and Lavenberg, 1980) instead of more complex and time-consuming simulations.2.Analytic models can be employed in situations for which they were not designed for, such as using a job trace as input. Note that the conventional approach for dealing with job traces as input to analytic models requires processing the trace in order to fit a known distribution for the job inter-arrival times. A difficulty may arise if this distribution does not meet the assumptions required by the analytic model.3.Parts of the system can be implemented to process traces as input and other parts can be modeled through analytic models (see e.g., Section 6).
The main contribution of this paper is an algorithm, which we call the Trace-Driven Queuing Network (TDQN) algorithm, for estimating the execution times of jobs in a job stream. These jobs are executed by a computer system and contend for its resources. The algorithm was validated against experimental results using jobs derived both from a micro-benchmark and from well-known benchmarks. The validation shows that the absolute relative error between measurements and predictions by the TDQN algorithm is below 10% most of the time and is at most 15%. These errors are considered to be acceptable for execution time prediction Lazowska et al. (1984). As an additional contribution, we show how the TDQN algorithm can be used to estimate the makespan of a stream of jobs submitted to a scheduler, which decides which node in a computer cluster will process the job.
The rest of this paper is organized as follows. Section 2 provides a brief background on closed QNs. Section 3 describes the notation and formalizes the problem description. Section 4 presents the TDQN algorithm. The next section discusses validation results with a micro-benchmark and with three UNIX benchmark programs. Section 6 shows how the TDQN algorithm can be used to predict the makespan of a stream of jobs submitted to a computer cluster under several scheduling policies. Section 7 discusses some related work. Finally, Section 8 presents some concluding remarks.
