The ever-increasing data demand in many science and engineering domains has posed significant challenges to storage systems. Parallel/distributed object-based store [21], such as Luster [3], Ceph [31], and Sheepdog [26], has been widely used to provide required storage capability, and more importantly, to deliver high data-accesses speed.
To achieve highly optimized data-access performance of storage systems, understanding and leveraging data-access patterns have been proven effective. For example, PDLA [35] describes an I/O data replication scheme that replicates identified data-access pattern (i.e., spatial-related access pattern), and saves these reorganized replications with optimized data layouts based on access cost analysis. Arguably, the better the access pattern is understood, the better the storage system can be optimized and tuned.
As a result, numerous studies have been conducted to identify, characterize, and leverage data-access patterns in storage systems. One well-known method is to analyze spatial/temporal behaviors of data accesses to identify I/O access sequence [9], [11], [19], [20], [34]. Another important method is to analyze semantic information such as the access correlations between file blocks/objects by mining I/O semantic attributes, which can potentially discover  more  complex  patterns, especially semantic patterns [6], [8], [15], [28], [33]. Other methods also exist at different I/O layers, such as application-/client-side trace analysis [20], server-side trace analysis [16], [17], or both server and client I/O analysis [6]. While existing studies show the feasibility of I/O characteristic discovery through various approaches, they have three shortcomings as discussed below, which also motivates this research.
First, many of these approaches are limited to specific and predefined features. A feature refers to an attribute of a data access. For example, the object ID of an object access is a feature; the data access size is another feature. Many existing studies investigate one or more rather specific, predefined features to analyze access patterns. The resulting insights, although valuable, often lead to an incomplete view of access patterns. For example, object ID and access time help obtain temporal I/O behavior, but, if access length and offset are considered, spatial correlation of data accesses can be further derived. In general, more features indicate more I/O behaviors, i.e., read/write operation code reveals read/write types and target node ID provides object location. Given the increasing complexity of I/O behaviors, it is inadequate to attempt to discover I/O characteristics with only specific or predefined features. It is critical to analyze abundant features thoroughly for I/O characteristics discovery.
Second, existing approaches often introduce bias. Clearly, treating all features equally is not accurate because distinct features can have significantly different impacts on I/O characterization. However, selecting the desired set of features is often daunting and introduces bias, which requires domain knowledge and assumptions about storage systems and applications. Besides, we will not know whether we have a desired set of features until we have completed the entire analysis process. For instance, the authors in study [6] presented an iterative process to initially select some basic features, e.g., total I/O size and read–write ratio for a file, and then add new features if the analysis results leave some system design choice ambiguous. They still need to interpret the output results and derive access patterns by looking at only the relevant subset of features, again using domain knowledge. Moreover, the system may exhibit various data-access patterns for a given application. For example, the scientific computing applications in study [29] show various data-access patterns for massive data processing. Identifying representative features manually would not adapt to this scenario, and may lead to an untenable analysis. This drawback largely limits the efficiency of using access patterns for tuning storage system and optimizing the performance.
Third, existing approaches often have limited adaptability and have constraints on utilizing discovered I/O characteristics. They usually focus on either mining spatial/temporal patterns of applications for I/O acceleration, or exploring more complex patterns for data/block access optimizations. However, I/O characteristics are very useful in many other scenarios too, such as in storage system tuning, data prefetching, data placement, data organization, etc. A comprehensive, holistic design on discovering I/O characteristics and optimizing storage systems is strongly desired.
In this paper, we present a new design methodology to overcome these shortcomings of existing methods discussed above. Specifically, we propose to capture features of data accesses on object-based storage systems as many as possible (more than 20 in our test cases), including features like object ID, access time, target node, and others we can collect, to generalize data-access pattern discovery for various applications. Based on the rich set of features, we use access correlations among objects to identify different patterns. We utilize machine-learning based strategy (principal component analysis, PCA [13]) to find the most important “key features” automatically among all collected features in an unsupervised way. This eliminates the bias from users or domain knowledge requires for applications, and provides an automatic, extensible way to identify the dominant data-access patterns. Based on the learned key features, we apply a clustering algorithm (i.e., DBSCAN) to mine the objects’ I/O similarity, particularly “key feature correlations”, and group highly relevant object IDs, which can be leveraged to improve the I/O performance.
We have implemented the data-access pattern discovery and the prefetching mechanism based on the identified patterns on Sheepdog, a production object-based store. We evaluated the performance benefits using standard benchmarks and synthetic workloads. Our results confirm that our proposed solution can accurately identify the data-access patterns under various workloads and the prefetching strategy can efficiently leverage pattern analysis results to improve the read cache hit ratio (up to 48.24%) and the overall performance (up to 42%). These proof-of-concept evaluations indicate that our I/O characteristic discovery methodology is highly promising for I/O tuning and optimizations. A preliminary study of this research appears in [36]. The key contributions of this research are five-fold:

•Introduce a new I/O characteristics discovery and data-access pattern analysis strategy based on a large number of collectable features of I/O accesses for object-based storage systems.•Utilize machine-learning based techniques to identify key features for I/O accesses and to cluster objects by mining objects’ I/O similarity for I/O performance optimizations.•Eliminate human bias in discovering I/O patterns without requiring domain knowledge about applications’ I/O behaviors.•Design and implement a data prefetcher prototype based on I/O characteristic discovery on a real storage system.•Conduct extensive evaluations on Sheepdog system as a case study to validate the proposed I/O characteristic discovery solution.
The rest of this paper is organized as follows: Section 2 introduces the background of object storage and I/O trace. Section 3 describes the design and implementation of I/O characteristic discovery methodology. Section 4 describes the use case of prefetching by leveraging access patterns for performance improvement. Section 5 presents extensive evaluation results. Section 6 reviews the related work and Section 7 concludes this paper.
