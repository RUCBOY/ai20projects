Software-defined networking (SDN) (N.Mckeown et al., 2008) is an emerging networking paradigm that changes the limitations of current network infrastructures, by breaking vertical integration, separating the network’s control logics from the underlying routers and switches, promoting centralization of network control, and introducing the ability to program the network (SDN, 2014). SDN architecture can be simply depicted as a composition of different layers, as shown in Fig. 1. The network’s control logics (such as routing, traffic engineering or security policy) developed in application plane are uploaded into the SDN controller via Northbound interfaces (NBI) and translated into a group of corresponding forwarding rules used for OpenFlow switches. After that, the forwarding rules are distributed to the associated OpenFlow switch in the data plane via Southbound interfaces (SBI).Download : Download high-res image (149KB)Download : Download full-size imageFig. 1. The overview of SDN architecture.
Currently, SDN has been increasingly utilized to enforce the security of complex networks because of its programmable, centralized intelligent control as well as real-time network traffic view. For instances, Garay et al. (2014) proposed a SDN-based network access control mechanism, flownac, which is a centralized EAP (Extensible Authentication Protocol) for IEEE 802.1x wireless local area network (WLAN). Yakasai and Guy (2015) proposed a network access control mechanism, flowidentity. This mechanism integrates EAP security authentication mechanism into the SDN controller. Hu et al. (2014) proposed a dynamic firewall mechanism based on SDN, flowguard. Koerner and Kao (2016) proposed a device security authentication mechanism based on MAC address and SDN. However, SDN-based security enforcement mechanisms rely heavily on some security policies containing underlying network information (such as MAC address, IP address, switch port and etc.). These security policies need to be specifically developed by network managers, and loaded into the SDN controller by means of specific APIs or manual input. But such traditional security policy management is becoming more and more difficult because it is nearly impossible for network managers to fully understand all of underlying network configurations. Moreover, with the emergence of multi-controller SDN (Phemius et al., 2014), network managers need to manage a variety of heterogeneous SDN controllers at the same time. In this case, the same security policy often needs to be developed and deployed for different types of SDN controllers, which inevitably increases the complexity and difficulty for management. Therefore, facing the increasingly complex and huge SDN networks, we urgently need a novel security policy management mechanism which can be completely transparent to any underlying network information. That is it can permit network managers to define abstract high-level security policy model without containing any underlying network information, and by means of specific model transformation methods, the high-level security policy model can be automatically transformed into its corresponding lower-level security policy model containing underlying network information. Moreover, after loading the generated low-level security policy model into the system model of data plane, we must ensure the system model of data plane can hold all of security properties defined in high-level security policy.
Based on these insights, we propose a security policy model transformation and verification approach for SDN in this paper. The main idea of the approach is to specify the security policies used for SDN networks, such as access control policies or firewall policies, as a formal security policy model (SPM). SPM is of a high-level security policy model without containing any underlying network information. Then, we establish the system model of SDN’s data plane and the mapping rules between the policy objects of SPM and the system objects of system model of data plane, and then propose a security policy model transformation mechanism which transforms SPM into its corresponding low-level security policy model (RSPM) by means of these mapping rules. After model transformation, to be practically useful, we must prove that the system model of data plane updated by RSPM can hold all of security properties defined in SPM. Thus, we design a security policy verification mechanism based on the model checking techniques and a group of validation conditions. That is if all of validation conditions are proven to be true after verification, it proves that the system model of data plane updated by RSPM can hold all of security properties defined in SPM, thus the proposed policy model transformation mechanism is available. Otherwise, it is unavailable. Hence, the contributions of this paper can be concluded as follows.
•We specify the current security policies used for SDN networks, such as access control policies or firewall policies, as a formal security policy model (SPM). SPM is of a high-level security policy model without containing any underlying network information.•In order to transform SPM into its corresponding low-level security policy model containing underlying network information, we establish the system model of SDN’s data plane and the mapping rules between the policy objects of SPM and the system objects of system model of data plane.•Based on the established system model of data plane and mapping rules, we further propose a security policy model transformation mechanism which can automatically transform SPM into its corresponding lower-level security policy model (RSPM) containing underlying network information.•In order to verify the system model of data plane updated by RSPM can hold all of security properties defined in SPM, we propose a security policy verification mechanism based on model checking and a group of validation conditions. That is if all of validation conditions are proven to be true, it proves that the system model of data plane updated by RSPM can hold all of security properties defined in SPM, thus the proposed policy model transformation mechanism is available. Otherwise, it is unavailable.•Finally, we utilize a comprehensive case to illustrate the feasibility of this approach. We first establish the system model of data plane and SPM for this case, then transform SPM into its corresponding RSPM using security policy model transformation mechanism, and verify whether the system model of data plane updated by RSPM can hold all of security properties defined in SPM using security policy verification mechanism.
The remainder of this paper is structured as follows. Section 2 discuss some related works. Section 3 is the framework of this approach. The system model of data plane of SDN is proposed in Section 4. SPM is proposed in Section 5. Section 6 presents how to transform SPM into RSPM, which consists of the mapping rules and security policy model transform algorithm. Section 7 presents how to verify the system model of data plane updated by RSPM can hold all of security properties defined in SPM, which consists of validation conditions and security policy verification algorithm. Section 8 is a comprehensive case. Finally, Section 9 concludes this paper and presents some future directions.
