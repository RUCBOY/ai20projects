The joint ACM and IEEE curriculum guidelines for undergraduate computer science degree programs emphasize the relevance of the knowledge area “Architecture and Organization (AR)” [1]. According to these instructional guidelines and curriculum suggestions, students should acquire an understanding and appreciation of computer system functional components, their characteristics, performance, interactions, and, in particular, the challenge of harnessing parallelism to sustain performance improvements.
One of the knowledge units included in AR is “Interfacing and Communication”. The focus here is on the hardware mechanisms for supporting input/output (I/O) device interfacing. Topics like I/O fundamentals (e.g., handshaking, buffering), buses (bus protocols, arbitration, direct-memory access), and introduction to networks (communications networks as another layer of remote access, among others that should be considered by instructors) are included.
Indeed, teaching computer architecture requires a lot of effort by the instructor. Simulators can improve the teaching process, increase student willingness and ease ability to learn the material [2], [3]. Commonly, computer simulation is used as a supporting tool in the process of understanding the concepts of both computer architecture and computer organization, e.g., CPU [4], [5], assembly language [6], cache memory system [7], on-chip hardware components [5], and so on.
Understanding how computers work is hardly possible without having specialized computer laboratories or tools suitable for courses. These laboratories are too expensive to be available in all universities, especially, in poor countries [8], [9]. Also, it is necessary to periodically invest money to upgrade them.
An important question arises: are these labs flexible enough to be appropriate for assessing the workloads in various testing environments? Using computer architecture simulators in lab activities adds a new dimension to textbook theory by strengthening practical teaching.
Computer simulators are programs that contain a representation of authentic systems or hypothetical situations. They have a number of features that are of particular help in the teaching of science [10]. By changing parameter settings of system-under-test (SUT) a simulation model, professors and students can test “what if” cases, and gain insight on “unusual” workload patterns.
Regarding the I/O subsystem topic, Larraza-Mendiluze et al. [11] highlight the need for more educational research in order to make it less abstract and more attractive. To this end, developing and using different resources and educational methodologies based on a theory of learning should be considered [12], [13].
A traditional course model, in which the lecturer follows a text book, exhibits slides, and presents some theoretical exercises, is not enough to assure a through comprehension of what is being taught. The problem is due to both the teaching model and the lack of appropriate tools capable of translating the theory being presented into a more practical reality. Without a practical vision, the student tends to lose touch and just “float” around the introduced concepts and mechanisms without gaining insight into of what is really going on [14].
The study of computer hardware usually involves a lot of abstract concepts, complex hardware structural interconnections and dynamic hardware behavior. Commonly, it is hard for students to imagine how digital signals propagate inside computers to operate in different functional units.
Visualization of the activities, which occur inside a computer, might be an important aspect for improving computer science education [15], [16]. Computer-based visualizations like animations and simulations are effective teaching-learning resources across computer science domains.
In [17], the authors argue that such a technology, no matter how well it is designed, is of little educational value unless it engages learners in an active learning activity.
In this paper, we present the application of the NICSim-vhd tool [18], [19] as an experimental learning environment to teach computer architecture. The tool leads students through a more active participation in the learning process. We strongly believe that visualization is better than a thousand words when it comes to constructing a mental model of a machine operation. A major idea behind our approach is to take advantage of VHDL simulation visualization for skills training.
The rest of the paper is organized as follows. In Section 2, we discuss related work. In Section 3, we explain the pedagogical foundations of our work. In Section 4, we present the learning platform. In Section 5, we show how the learning platform can be used in classes for simulation visualization. In Section 6, we present simulation visualization in the context of Bloom’s Taxonomy. In Section 7, we present our conclusions.
