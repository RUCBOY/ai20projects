Block-based programming is quickly becoming the way that younger learners are being introduced to the field of computer science (Bau, Gray, Kelleher, Sheldon, & Turbak, 2017). Led by the popularity of tools such as Scratch (Resnick et al., 2009), Blockly (Fraser, 2015), and Alice (Cooper, Dann, & Pausch, 2000), millions of kids are engaging with programming through drag-and-drop graphical tools. For example, Code.org's Hour of Code initiative, which includes dozens of activities that incorporate block-based programming, has recently surpassed 500 million “hours served” and has reached learners in every country on the planet (Code.org, 2017). This highlights how the excitement around computer science is a global phenomenon. Due in part to the success of such tools and initiatives at engaging novices in programming, block-based programming environments are increasingly being incorporated into curricula designed for high school computer science classrooms. Examples of such curricula include Exploring Computer Science (Goode, Chapman, & Margolis, 2012), the Computer Science Principles project (Cuny, 2015), and Code.org's curricular offerings (Code.org Curricula, 2019).
Many uses of block-based tools in formal educational contexts presuppose that such tools will help prepare students for later instruction in text-based languages (Armoni, Meerbaum-Salant, & Ben-Ari, 2015; Brown et al., 2016; Dann, Cosgrove, Slater, Culyba, & Cooper, 2012). This transition is often a part of the larger computer science trajectory where block-based introductory courses are intended to prepare students for the transition to professional, text-based languages. This can be seen in how the transition has been studied to date (e.g. Armoni et al., 2015; Dann et al., 2012; Powers, Ecott, & Hirshfield, 2007). This assumption was also echoed by the high school students who participated in the study presented in this work, who made statements such as “[block-based programming] is a good start, then once we know the commands and everything, we can move on to Java” and “[block-based programming] is getting us ready for what we're going to be doing”. While work has been done focusing on learning that happens while using block-based tools (e.g. Franklin et al., 2017; Grover & Basu, 2017; Weintrop & Wilensky, 2015a), less work has rigorously tested the transition from block-based introductory tools to text-based languages in formal settings (Blikstein, 2018; Shapiro & Ahrens, 2016). A systematic review of the literature on the role of visual programming concluded that there is uncertainty concerning the effectiveness of block-based languages when looking beyond introductory contexts (Noone & Mooney, 2018). This question is of great importance given the growing role of block-based tools in K-12 education around the world and their impact on the teaching and learning of computer science (Blikstein, 2018; Caspersen, 2018).
This paper seeks to understand if and how the modality used (block-based versus text-based) prepares learners for conventional text-based languages. This line of inquiry is consequential for both the research community as it is an open question that can inform future research on design and learning, as well as practitioners who are tasked with making decisions around learning environments and pedagogy in their classrooms every day. More specifically, this paper answers the following research question:
In high school introductory computer science classes, how does the modality used for introductory programming instruction (block-based versus text-based) impact learners when they transition to a professional text-based programming language?
This paper presents the results of a quasi-experimental study designed to answer this question. The study took place in two high school computer science classrooms and compares isomorphic block-based and text-based programming environments. Students spent five weeks working in either a block-based or text-based version of the same introductory programming environment before transitioning to Java. The same teacher taught both classes and students in each condition used the same curriculum and had the same time-on-task. The findings from the first five weeks of the study are reported in (Weintrop & Wilensky, 2017a). This work is a continuation of that paper, specifically focusing on what happened after leaving the introductory environments and moving to Java. To understand how the design of introductory tools prepare learners for programming in professional programming languages, we present comparative outcomes of content assessments, attitudinal surveys, and investigate programming practices that emerged after the transition to Java.
