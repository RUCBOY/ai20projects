Complex real-time systems; such as satellites, nuclear power plants, military, and aerospace control systems, are designed for long-term operations and strict timing requirements. These complicated and costly systems shall be in service for years without a significant upgrade. For instance, a significant software update may cause a catastrophic problem like in the case of “X-ray Astronomy Satellite “Hitomi” (ASTRO-H)” anomaly. The communication was lost with Hitomi when an in-orbit software update was being uploaded [1]. This kind of systems are characterized by reliability, predictability, and heritage of operation, whereas they do not rely on the fast progress at integrated circuits speed, novel processors architectures and the number of cores. The software for such systems is designed for a specific platform to achieve the desired parameters such as frequency, priority, worst-case execution time, bounded jitter, energy, and cost.
1.1. Problem statementThe particular constraints are real-time systems which operate continuously in a harsh environment for years. This research focuses on loosely coupled computer systems. The considerable system is space-systems such as satellites. In-system programming is a critical operation, whereas operation for long life without updates is inferior. The requirement to add new features without software upgrading is highly needed. Subsystems from different vendors with various platforms and RTOSs should be able to communicate not for exchanging data but also exchanging tasks. Exchanging tasks between subsystems for load balancing and fault tolerant can improve system reliability and hence a commonly spoken language, execution platform, and support framework are required.
1.2. Proposed approachThe dilemma among long-term operations and upgrading cost for that kind of systems can be resolved by using a platform-independent real-time virtual machine, which accepts the old and new developed code, supports task placement between nodes on the network and remote command-execution while preserving real-time constraints.A real-time virtual machine called structured byte code (SBC- RTVM) is introduced. SBC- RTVM is based on three principles that are: source-code/SBC-code automatic generation, SBC platform independence, and real-time task properties conservation. SBC-RTVM can exchange and execute source code written in a different language for different platforms while preserving origin real time constraints. SBC generation, SBC-RTVM architecture, and inter-process communications among heterogeneous loosely-coupled computers are introduced. The proposed solution is best appropriate in satellite OBC with other subsystems.ANSI C, C++, Python, and Java are the most common programming languages used in such real-time systems. This research will focus on ANSI C language which considered as one of the most used languages in such complex systems.The paper is structured as follows. Section 2 discusses the related approaches in task transfer techniques, centralized control systems overview and the state-of-the-art related to the real-time virtual machine. Section 3 presents the” Structured-Bytecode SBC and the generator engine. Section 4 introduces the proposed “Structured Bytecode real-time virtual machine SBC-RVM” design and implementation with a framework for task placement in a loosely-coupled computer system. Section 5 discusses the proposed algorithm and its implementation on real hardware with satisfactory results. Section 6 is the concluding remarks.
