1.1. Context of the problemThere continues to be increasing interest from researchers, educators, and policymakers in developing computational thinking (CT) at different educational levels, especially for K-12. In her influential article “Computational thinking” published in the Communications of the ACM in 2006, Jeannette Wing used the term computational thinking to represent how computer scientists think when they are approaching a problem. She argued that CT is a set of attitude and skills that is universally applicable and important for everyone to learn (Wing, 2006); and called for adding CT to every child's basic skill set, along with reading, writing, and arithmetic. In January 2016, President Obama announced Computer Science for All, the most recent government initiative to promote computer science (CS) education and CT for students in K-12 education (The White House, 2016).Although the definition of CT varies among authors, the most frequently-cited definition by Cuny, Snyder, and Wing (2010) describes CT as “the thought processes involved in formulating problems and their solutions so that the solutions are represented in a form that can be effectively carried out by an information-processing agent.” It focuses on the conceptualization and underlying thought processes of solving a problem computationally rather than syntactically. Moreover, it is becoming generally accepted that the main components of CT include problem decomposition, abstraction, algorithmic thinking, conditional logic, recursive thinking, and debugging (Grover & Pea, 2013). Research has shown that CT may bring about a variety of cognitive and non-cognitive benefits, especially for learning in STEM subjects (e.g., Barr & Stephenson, 2011; Repenning et al., 2015; Sneider, Stephenson, Schafer, & Flick, 2014).Increasing attention is also being paid to introducing CT to middle school children because the middle school years are a critical stage when children develop their relationships with specific academic fields and establish initial career orientations (Grover, Pea, & Cooper, 2014, pp. 343–348; Tai, Liu, Maltese, & Fan, 2006). However, middle school students often hold negative attitudes toward CS (Yardi & Bruckman, 2007), which can hinder them from developing CT skills. In this context, researchers have been actively exploring opportunities to introduce CT to middle school students with an aim to improve their attitude toward CS.Programming, being a fundamental skill of CS, is also employed as a vehicle for CT development (Grover & Pea, 2013). Furthermore, to preclude learners from being distracted from the focus of CT on conceptualization and the underlying thought processes of solving a problem, block-based programming environments, represented by Scratch (Resnick et al., 2009), Snap! (Harvey & Mönig, 2010), and Blockly (Fraser, 2013), have been widely used to reduce the complexities related to the syntax of programming languages.In terms of informal settings, Scratch and other block-based environments follow the tradition of constructionism (Harel, 1991; Papert, 1980) and encourage children to come up with their own ideas for a project (usually games, animations, or media projects) and to create personally meaningful artifacts through programming. This approach (often called design-based), has shown some success in motivating children into programming activities (Monroy-Hernández & Resnick, 2008), but has fallen short in relation to fostering deeper learning (e.g., Brennan & Resnick, 2012; Meerbaum-Salant, Armoni, & Ben-Ari, 2011).Another less documented type of environment that can be used to introduce children to CT in informal settings is video games. In general, video games are very popular among secondary school students, and well-designed educational games can be good vehicles to foster a variety of valuable skills in education (Gee, 2007; Shute & Ventura, 2013). Video games that can foster CT usually provide players with a motivating context where they need to construct programs to solve a problem (e.g., Horn et al., 2016; Kazimoglu, Kiernan, Bacon, & Mackinnon, 2012; Weintrop & Wilensky, 2012). Compared to design-based environments, such games have the potential to promote more intentional learning and provide richer learning support through different game mechanics (e.g., Land, 2000; Mayer, Mautone, & Prothero, 2002). However, research on using video games to foster CT skills is very limited. A number of video games have been developed to teach programming, such as Wu's Castle (Eagle & Barnes, 2009), CodeCombat (https://codecombat.com/), CodeSpell (Esper, Foster, Griswold, Herrera, & Snyder, 2014), and MiniColon (Ayman, Sharaf, Ahmed, & Abdennadher, 2018). But these games use a text-based programming language that requires the player to pay considerable attention to the details of syntax, which is not well aligned with CT (Kazimoglu et al., 2012). From the limited number of studies conducted with children (Esper et al., 2014), these types of games did have a positive impact on children's attitude toward programming and CS, as well as on some components of CT, such as conditional logic and debugging. However, their alignment with CT skills was incomplete.A few games, though not explicitly targeting CT, based their design on block-based programming languages, such as LightBot (Gouws, Bradshaw, & Wentworth, 2013), RoboBuilder (Weintrop & Wilensky, 2012), games at Code.org, Blockly Games (https://blockly-games.appspot.com/), Run Marco (https://runmarco.allcancode.com), and the latest version of CodeSpell. However, their impact on CT development has not been evaluated or only evaluated to a small extent. The results are very preliminary considering the small sample sizes and the qualitative nature of the evaluations (Giannakoulas & Xinogalos, 2018; Kazimoglu et al., 2012; Weintrop & Wilensky, 2012).In summary, research has shown some promising results regarding the cognitive and attitudinal impacts of video games on CT development among children, such as promoting learning of some CT components, and improving attitudes toward CS. However, the potential of video games in this regard seems not fully tapped. Video games can be designed to target CT skills, including using a block-based language like Blockly, to enable the player to further shift his or her cognitive focus from the syntax of programming to particular CT skills.
1.2. Purpose of the studyThis study aimed to investigate the cognitive and attitudinal impacts of playing a video game that targeted the development of CT skills among middle school students. Toward this end, we designed and developed a web-based video game called “Penguin Go.” It used Blockly as the code editor, and was carefully designed to align with main components of CT. Also, we integrated different types of learning support into the game to facilitate CT learning during gameplay. A detailed description of the game can be found in the “Interventions” section.In addition to the overall impact of the game, one particular variable we explored in this study involves constraints imposed on the number of blocks used in a program, and how that affected the game's impact. We expected that such constraints would drive the player to look deeper into the structure of the problem, as well as the program he or she originally created, to identify common logic that can be used multiple times in the program to tackle different parts of the problem, and thus reduce its size. During this process, we expected the player to identify essential properties common to multiple objects or procedures, and ignore irrelevant differences among them. This is what Wing (2010) defined as the process of abstraction, the keystone of CT (Wing, 2008). Features similar to this have been included in games like Lightbot, Blockly Games, and Program your bot, to encourage players to create reusable code blocks, such as loops, functions, or modules (Kazimoglu et al., 2012), which is considered good programming practice. However, the impact of such constraints on CT development had not been evaluated prior to this study.The attitudinal impact of this feature is related to multiple factors. First, the feature exerts additional constraints on gameplay, which is usually not preferred by video game players (Klimmt, Hartmann, & Frey, 2007; Ryan, Rigby, & Przybylski, 2006), and thus may result in reduced enjoyment. Furthermore, the additional challenges associated with the constraints may affect a player's enjoyment of gameplay. According to Csikszentmihalyi (1997), challenging yet achievable levels of difficulty is a necessary condition for a player to experience the state of flow in which the player is immersed completely into the activity with deep enjoyment. Since the perceived difficulty depends on the skill levels of each individual student, the impact of the constraints may vary among them. In short, we had no definite hypothesis regarding how this constraint feature may influence students' attitudes. Given the potential benefits of such constraints and the absence of clear empirical evidence regarding their effects, we believe that investigations like would be valuable.
1.3. Research questionsThe research questions of the study were:1.Does playing Penguin Go have a positive impact on middle school students' CT skills?2.Does playing Penguin Go have a positive impact on middle school students' attitudes toward future learning in CS?3.Does playing Penguin Go with constraints imposed on the number of blocks in a solution have a greater impact on middle school students' CT skills than playing Penguin Go without such constraints?4.Does playing Penguin Go with constraints imposed on the number of blocks in a solution have a greater impact on middle school students' attitudes toward CS than playing Penguin Go without such constraints?
1.4. HypothesesBased on the literature review regarding the impact of video games on CT skills and attitudes toward CS, as well as the aforementioned features of the game, we made the following hypotheses:1.Playing Penguin Go would have a positive impact on middle school students' CT skills.2.Playing Penguin Go would have a positive impact on middle school students' attitudes toward CS.3.Adding constraints on the number of blocks in a solution to Penguin Go would further improve students' CT skills.4.We did not have a definite hypothesis regarding the effect of constraints on the number of blocks on middle school students' attitudes toward CS. The investigation in this regard was exploratory in nature.
