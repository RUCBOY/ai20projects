In a 2005 white paper titled “An architectural blueprint for autonomic computing” (IBM, 2005), IBM defines “autonomic” as “pertaining to an on demand operating environment that responds automatically to problems, security threats, and system failures”. The same reference [page 2] says “Self-managing capabilities in a system accomplish their functions by taking an appropriate action based on one or more situations that they sense in the environment. The function of any autonomic capability is a control loop that collects details from the system and acts accordingly”. This loop is formalised [ibidem, figure 4] as the so-called MAPE(-K) one, the acronym standing for “Monitor, Analyse, Plan, Execute (based on Knowledge)” — not so different from a sequence like “read from sensor, compare to reference, compute control, write to actuator” (based on knowledge of a model for system, disturbances and requirements). Furthermore, “touchpoint autonomic managers” (MAPE-K loops with a “sensor” and an “effector” touching the controlled system directly, like e.g. a pressure or a flow loop in a plant) are managed by higher-level “orchestrating autonomic managers” that “configure” them, like for example a central MPC could give set points to peripheral PIDs, or a loop analyser could retune them. Indeed, the similarity of Figure 2 in IBM (2005) to a hierarchical plant-wide control system is quite impressing.
Given the above, it should be apparent that computer engineering students have to study control, but quite surprisingly, in practice this does not seem to be so apparent at all. Most computer engineering students do not receive any control education; and those who do, most often take their basic “systems and control” course in a late semester of their BSc, and only if interested in embedded systems, real time, and the like.
As such, many computer engineers need control culture to manage and design their systems, but do not possess it. Present technologies suffer heavily from this gap, as does part of the computer engineering research as well (some evidence is given in the following). In this paper, that builds on the preliminary one (Leva, 2013), the problem is analysed and a solution is proposed, by addressing the research questions below.

RQ1Do computer engineering students really need control education independently of their specialisation?RQ2If so, what is the best pedagogical goal for them?RQ3If such a goal can be sketched, is there a means to turn it into a didactic activity effective and compact enough for being inserted in an existing curriculum with feasible effort?
