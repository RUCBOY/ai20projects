With the increasing complexity of optimization problems in engineering, solving large-scale problems is challenging with traditional algorithms. Novel and sophisticated algorithmic schemes are required [1]. The genetic algorithm (GA), a stochastic search algorithm based on the principle of natural selection and recombination [2], has become a potential and promising option. GA uses genetic operators such as crossover and mutation to find the optimal chromosomes in the entire search space. Compared with traditional deterministic optimization algorithm, GA intrinsically has the advantages of parallelism and strong global optimization ability, so that it is efficient for solving combinatorial optimization problems on large-scale parallel machines [3].
In recent decades, with the fast development of the high-performance computing (HPC) systems, genetic algorithms evolved from serial to parallel and can fit well with not only traditional platforms (e.g. CPUs), but also some novel architectures (e.g. GPUs). Although those optimization problems, such as the knapsack problem [4], the shop scheduling problem [5], and the traveling salesman problem [6], are easy to be resolved using serial or original genetic algorithm, it is difficult to achieve the desired result in a short time when the objective problem becomes more complex due to huge data volume and complicated constraints. The parallel genetic algorithm is thereby attractive because of its intrinsic advantages [7] of parallelism. For example, Dorronsoro et al. [8] proposed a parallel genetic algorithm to solve the capacitive vehicle routing problem more efficiently, and Nitisiri et al. [9] reported a multi-threading technology to achieve parallel individual computing so that passengers could obtain the best railway scheduling solution in the shortest time. However, the computing power of CPUs is usually limited, and it leads to inadequate use of computing resources.
Benefiting from the development of heterogeneous multi-core supercomputers, Zhao et al. [10] proposed a parallel genetic algorithm of CPU + GPU to solve the task scheduling problem. Rathomi et al. [11] developed a two-level parallel algorithm of multi-core CPU + many-core GPU. Hou et al. [12] described an enhanced parallel genetic algorithm for hardware and software partitioning. However, none of the above algorithms considers the time consuming caused by data communication. Liu et al. [13] reduced the communication delay through the asynchronous migration strategy. However, the effectiveness is severely affected by specific problems. Huang et al. [14] proposed a fast parallel genetic programming framework by using the environment-vector-based multipopulation mechanism and the hierarchical parallel computing mechanism, but the data size of this method is small. Liu et al. [15] designed a Hybrid Parallel Genetic Algorithm with Dynamic Migration Strategy Based on Sunway Many-Core Processor, but the convergence speed was still not ideal.
On the other hand, computing power has also been significantly increased, and we are almost reaching the Exa-scale computing era. However, the performance gap between the software and hardware is still large, and lots of computing power is wasted. Besides, the time complexity analysis of the genetic algorithm is still the main index to judge the performance of a algorithm [16]. Therefore, it is necessary to figure out efficient algorithms with good scalability to fit the architectures well.
The Sunway TaihuLight supercomputer was announced in June 2016, and it is the first system in the world that has a peak performance of 125 PFlops. Sunway TaihuLight has been widely applied in various applications, such as climate modeling [17], [18], earthquake simulation [19], [20], and life science [21], [22].
The parallelism and scalability of GA take full advantage of heterogeneous many-core systems. We deploy GA on Sunway TaihuLight and perform a series of wise operations for it to reduce the gap between software and hardware performance, such an implementation could be a guidance for other analogous algorithms deployed on heterogeneous parallel machines.
In order to expand the individual diversity of GAs and reduce the communication overhead, we propose a large-scale parallel genetic algorithm for heterogeneous many-core processors. The major contributions include:
1. Cellular model and Island model are wisely performed on the lower and upper levels on Sunway processor, respectively, to better deal with bottlenecks from communication overhead, individual diversity, as well as premature convergence.
2. Fine-grained tuning mechanisms such as register communications are applied to further exploit the localities of the local memory, while the underlying Cellular model well implements the selection and crossover in a high parallel efficiency.
3. The hybrid parallel genetic algorithm can well handle a variety of problems, including those with large-scale data and simple fitness function, and also those with small-scale data and complex fitness function.
The remainder of this paper is organized as follows. In Section 2, we describe the related work and briefly introduce the development of genetic algorithms. Section 3 introduces the features and structure of Sunway TaihuLight and some preliminary knowledge of GA. Section 4 describes the proposed parallelization method. The parallelism implementation, the experimental results, and their analysis are in Sections 5 Implementation of the HPGA, 6 Experimental result and analysis, respectively. Finally, we conclude this paper in Section 7.
