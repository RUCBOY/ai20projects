In 1987, H. Landis Gabel published an often cited paper on X/OPEN, the consortium of (mostly European) computer vendors created to promote the UNIX operating system. He described the essence of his study in the following terms: “The objective of this paper is to answer a deceptively simple question. If open standards in the computer industry are as desirable as the conventional wisdom suggests, why do we not see more of them?” (Gabel, 1987: 91).
Although UNIX was developed in the late 1960s and early 1970s, it did not become truly popular as a commercial product until the mid-1980s. Thus, it could be argued that Gabel conducted his research on UNIX and X/OPEN at a time when UNIX was viewed at most as a partial failure if measured purely in terms of diffusion. It is not surprising, some would argue, that Gabel raised the issue of the limited diffusion of open systems at the very beginning of his study. Today he would surely write a different paper.
But would he? What operating environments have dominated the computer industry in recent years? How open are they? Table 1 gives us the answer. The table presents information on worldwide packaged software revenues for the top 50 vendors by operating environment in 2011. Specifically, it shows the share of each operating environment in total packaged software revenues. In other words, Table 1 provides an answer to the following question: What proportion of the value of all packaged software created by the top 50 world vendors and deployed on various computing platforms in 2011 was accounted for by each operating environment?Table 1. Worldwide packaged software revenues by operating environment, 2011, top 50 vendors (%).All softwareApplication development and deploymentApplicationsSystem infrastructureMainframe7.52%13.47%3.66%9.09%Unix21.87%25.69%23.00%16.67%Linux and other OSS7.00%11.71%5.15%6.18%Windows 32 and 6456.71%45.15%59.60%61.57%Other6.90%3.97%8.59%6.49%Total100.00%100.00%100.00%100.00%Source: authors' calculations on the basis of IDC (2012: 129 and 140–141).
Table 1 conveys a couple of fundamental messages. First, almost 57% of the value of all packaged software in 2011 was deployed on a Windows operating environment. Second, an additional 7.5% of the value of software was deployed on a mainframe operating system. Even without making the (quite reasonable) assumption that a large portion of mainframe operating environments were proprietary, the table suggests that proprietary operating systems were the dominant operating environments in terms of the value of software deployed in 2011, with UNIX and LINUX accounting for only about 29%.
So perhaps the question posed by Gabel is as relevant today as it was in 1987: If open systems are so beneficial, why are they not dominant? In this paper we explore this question but from the perspective of the companies that own or sponsor a standard. The question thus becomes: Is openness a good business strategy? Put differently, from the perspective of a company that owns or sponsors a computer or smartphone standard, is it better to make that standard open or closed?
For our exploration of these issues, we select a number of important operating systems in the history of computers and smartphones. Further, we distinguish between, and rely on, several notions of openness (West, 2007, Simcoe, 2008). First, there is the idea of “open systems” or “open standards.” Open systems can be open in the process or in the outcome. A system is open in the process if the process of shaping the system is open to the participation of all interested stakeholders. A system is open in the outcome if the system's key specifications are available to everybody, and especially if the system is licensed to all interested licensees at a reasonable rate.
Second, there is the idea of “open innovation” (Chesbrough, 2005, Chesbrough et al., 2008), which implies that innovation happens not only within the boundaries of the firm that owns or sponsors the standard but also outside those boundaries. In other words, open innovation suggests the presence of an array of companies that cooperate with one another in generating the innovation that drives the growth and diffusion of the standard. Open innovation may happen around a standard that is more or less open, although the need to facilitate open innovation may force the owner of the standard to introduce more openness than it would otherwise.
Third, there is “open-source software.” When we talk about open-source software in 1950–1980 we mean that, during that period, computer customers and independent software vendors had access to the source code and used it for a variety of purposes. Customers, for example, modified the source code according to need. More recently, free software and open-source software (OSS) have somewhat more technical connotations. The key feature of free software and most OSS is “that the source code is available for public access, open to study and modification, and available for redistribution to others with few constraints, except the right to ensure these freedoms” (Scacchi, 2011: 614–615). Free software is usually licensed under the GNU general public license (GPL), whereas OSS may use either the GPL or other licensing models that allow for the integration of software that may not be free software. Free software is always available as OSS, but OSS is not always free software (Scacchi et al., 2006).
And then there is, finally, the idea of “open governance” of open-source projects (Laffan, 2012). The open-governance index (OGI) measures whether the decision-making process within an OSS project is open, accessible, and transparent to all users or, alternatively, concentrated in a specific set of users. More specifically, the OGI comprises 13 governance measures in four areas: (a) access (availability of latest source code, developer support mechanisms, public roadmap, and transparency of decision-making process); (b) development (the ability of developers to influence the content and direction of the project); (c) derivatives (the ability of developers to create and distribute derivatives of the source code); and (d) community (a community structure that does not discriminate across developers).
The literature on open systems, discussed in the next section, has identified two fundamental trade-offs associated with standard openness: first, diffusion versus appropriability, and second, diversity versus control. More openness usually leads to more diffusion but may compromise appropriability of returns. More openness leads to more participation by members of the ecosystem, and usually to more diversity, but it may also lead to loss of control and fragmentation, which in turn may conspire against further diffusion. The main contribution of this study is that we provide a comprehensive examination of the history of computers and mobile phones in light of these trade-offs and, in the process, we provide answers to the question whether openness pays or not. Our key finding is that the most successful operating systems in history are “partially open:” they have managed to combine the right dose of openness with the right measure of control.
The paper is organized as follows. Section 2 examines the main concepts and trade-offs identified in the literature on open systems. Section 3 focuses on IBM and its operating systems between 1950 and 1980. Section 4 covers the UNIX operating system between 1970 and 1990. Section 5 examines Microsoft's attempt to bring UNIX under control on the personal computer in the 1980s, and Section 6 studies a similar attempt by Sun Microsystems on the scientific workstation. Sections 7, 8, and 9 examine openness in smartphone operating systems—Symbian, the iOS, and Android. Section 10 presents our conclusions.
