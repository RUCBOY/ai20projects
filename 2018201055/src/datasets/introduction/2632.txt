Graph drawings are difficult to analyze when their elements (vertices and edges) are placed in an unorganized way, ignoring basic aesthetic criteria. The graph drawing problem consists in creating a representation of a given graph in such an organized way that it is easily readable. The range of topics in the graph drawing field goes from visual perception to algorithms or models and it currently constitutes a well-established area in Computer Science (see for example Kaufmann & Wagner, 2001). The conventional wisdom that a picture is worth a thousand words can be adapted here by adding that it is even better if the picture is generated automatically rather than manually.
The graph drawing literature (see Battista, Eades, Tamassia, & Tollis, 1998) reports several standards to represent the vertices, such as dots, circles, or boxes, and more importantly, to represent the edges: straight lines, polygonal and/or orthogonal paths, or arbitrary curves. Graph drawing resources (papers, software, conference proceedings) are usually classified according to these different types of representations, also called drawing conventions. In this paper, we focus on hierarchical representations, which are also known as layered graphs, where directed acyclic graphs are represented by arranging the vertices on a series of equidistant vertical lines, called layers, in such a way that all edges, drawn as straight lines, point in the same direction. It should be noted that working with hierarchical representations does not limit the scope of our work since there are several methods to transform a directed acyclic graph into a hierarchical graph, the most well-known being the procedure in Sugiyama, Tagawa, and Toda (1981). Table 1 shows some applications of hierarchical graphs.Table 1. Some hierarchical graph applications.ContextReferencesData representedWorkflow visualizationVanhatalo, Völzer, Leymann, and Moser (2008)Work to be executed by the project team.Software engineeringChen and Chau (1996) and Burch et al. (2012)Calling relationships between subroutines in a computer program.Database modelingHu, Li, Cheng, and Liu (2016)Data connection, processing and storing inside the system.BioinformaticsLemons, Hu, and Hlavacek (2011)Structured molecules with multiple functional components.Process modelingGschwind, Pinggera, Zugal, Reijers, and Weber (2014),Fernández-Ropero, Pérez-Castillo, and PiattiniAnalytical representation or illustration of an organization’s business processes.Network managementOselio, Kulesza, and Hero (2013) and Kriegel, Kröger, Renz, and Schmidt (2008)Set of productive actions.VLSI circuit designBhatt and Leighton (1984)Design of integrated circuits (ICs) of new semiconductor chips.Decision diagramsR. Mateescu (2008) and Matuszewski, Schönfeld, and Molitor (1999)Logic synthesis and circuits.
Although generally speaking the perception of the quality of a graph representation is fairly subjective, edge crossing minimization is a well-recognized method to obtain a readable drawing. Other aesthetic criteria to capture the notion of readability include: bend, length and area minimization, angle maximization, and symmetries and clustering (see Kaufmann and Wagner (2001) for a detailed description). In this paper, we target edge crossing minimization because of its importance as an aesthetic criterion and its difficulty in terms of heuristic optimization (it is an NP-Complete problem, even when the graph only has two layers, as shown in Garey & Johnson, 1983). The problem of minimizing the edge crossings in a Hierarchical Directed Acyclic Graph (HDAG) has been typically addressed as the problem of finding the optimal ordering of vertices in each layer (Martí & Estruch, 2001).
Graphs have become a fundamental modeling tool in several fields, such as project management, production planning or CAD software, where changes in project structure result in successive drawings of similar graphs. The so-called mental map of a drawing reflects the user’s ability to create a mental structure with the elements in the graph. When elements are added to or deleted from a graph, the user has to adjust his/her mental map to become familiar with the new graph. The dynamic graph drawing area is devoted to minimizing this effort. As described in Branke (2001), considering that a graph has been slightly modified, applying a graph drawing method from scratch would be inefficient and could provide a completely different drawing, thus resulting in a significant effort for the user to re-familiarize him/herself with the new map. Therefore, models to work with dynamic or incremental graphs have to be used in this context.
To illustrate the incremental problem, we consider the hierarchical drawing in Fig. 1, which shows the optimal solution of the edge crossing minimization problem of a graph with 50 vertices and 5 layers. It has been obtained with CPLEX by solving the classical mathematical formulation of the problem shown in Section 3. We increment this graph now by adding 20 vertices (4 in each layer), and their incident edges. Fig. 2 shows the optimal solution of the edge crossing minimization problem of the new graph, where the new vertices and edges are represented with dotted lines.Download : Download high-res image (708KB)Download : Download full-size imageFig. 1. Optimal drawing for crossing minimization of a given graph.Download : Download high-res image (1MB)Download : Download full-size imageFig. 2. Optimal drawing for crossing minimization of the incremented graph.
Although the number of crossings in Fig. 2 is minimum, 99, this new drawing was created from scratch, and it ignores the position of the vertices in the original drawing of Fig. 1. For example, vertex 6 in the first layer is in position 7 in Fig. 1, but in position 10 in Fig. 2. We can say that Fig. 2 does not keep the mental map of the user familiarized with Fig. 1. Therefore, in line with the dynamic drawing conventions (Branke, 2001), we propose to reduce the number of crossings of the new graph while keeping the original vertices close to their positions in Fig. 1.
The literature on incremental graph drawing is scarce. We report in the next section the main contributions of its few papers. In particular, regarding hierarchical graphs, previous efforts only preserve the relative positions of the original vertices (Martí, Martínez-Gavara, Sánchez-Oro, & Duarte, 2018). As it will be shown, this may result in poor incremental drawings (i.e., the mental map of the drawing is not properly kept). In this paper, we consider a robust model with constraints on both the relative and the absolute position of the original vertices when minimizing the number of edge crossings in a sequence of drawings. In this way, we help the user to keep his or her mental map when working with a drawing where successive changes occur. In particular, our model restricts the relative position of the original vertices with respect to their position in the initial drawing (as in Martí et al., 2018), and also restricts their absolute position within a short distance of their initial position (as in Battista et al., 1998 in the context of orthogonal graphs).
As far as we know, this is the first time that both constraints are included in incremental drawings in hierarchical graphs. In this paper, we propose a mathematical programming formulation to obtain the optimal solution for medium-sized instances. We also propose heuristic methods, based on GRASP and Tabu Search, to obtain high-quality solutions for large-size instances. Additionally, we adapt the well-known LocalSolver black-box optimizer to solve this problem. We perform an empirical comparison with these four methods.
The study reported herein goes beyond solving a particular optimization problem. Tabu Search and GRASP can be considered as representative or even flagship procedures of two important classes of metaheuristic methodologies: memory-based and memory-less methods. The explicit use of memory structures constitutes the core of a large number of intelligent solvers, including Tabu Search (Glover & Laguna, 1997) or Path-Relinking (Ribeiro & Resende, 2012). On the other hand, we can also find successful metaheuristics, such as Simulated Annealing (Kirkpatrick, Gelatt, & Vecchi, 1983) or GRASP (Festa & Resende, 2009), with no memory structure in their original designs. Following previous papers on heuristic optimization (Martínez-Gavara, Campos, Gallego, Laguna, & Martí, 2015), here we try to answer an open question in the field: is the use of memory a good idea or is it simply better to resort to semirandom designs? In this paper, we compare both designs, memory-based and semirandom, when solving the incremental graph drawing problem.
Considering that we are introducing a new problem, we motivate it and revise similar problems in Section 2. Then, we propose a mathematical programming formulation in Section 3. The main contributions of our paper are described in Section 4, where we apply metaheuristic methodologies to obtain efficient solutions for this problem. The paper finishes with an extensive computational experimentation to assess the merit of our methods, and with the associated conclusions in Section 7.
