Coding or computer programming was first developed with school children in mind in the 1960s with a vision that it would transform learning (Feurzeig, Papert, & Lawler, 2011). It was introduced into some primary schools through the programming software, LOGO during the 1980s then all but disappeared within a decade (Albion, 2016). The demise of computer programming was attributed to the focus of teaching moving to other computer skills, such as word processing and Internet searching which were regarded as more valuable at the time (Moreno-León, Robles, & Román-González, 2016; Pinkston, 2015). Since 2010 computing has been introduced in the primary school curriculum in Estonia, Greece, England and Australia (Albion, 2016; Balanskat & Englehart, 2014), enabled by the availability of programming tools appropriate for younger learners (Resnick et al., 2009) and the development of computational thinking and coding curriculums (Kafai & Burke, 2013).
The revival in computer programming is evident in policy documents. For example, the K-12 framework for computer science education (National Research Council, 2012) and conceptual guidelines for computer science education (Alano et al., 2017) in the context of the USA with similar documents in other countries. The global revival is attributed to three reasons. The first is an economic drive of preparing the future workforce with knowledge of computer programming both to supply the IT industry and more generally for workers of the future (Balanskat & Englehart, 2014). The second is an entrepreneurial ideal of students learning to be ‘producers’ of innovation (eg. Kalelioğlu, 2015). The third reason situates the knowledge and skills gained through learning computer programming as 21st century competencies that everyone should learn (Wing, 2006). The third reason provides the focus of this review, an exploration of the competencies gained through learning computer programming.
Lye and Koh (2014) suggest that programming can expose students to computational thinking. While the scope of computational thinking is debated, Wing (2006) defined it as a fundamental analytical skill that should be learnt alongside reading, writing and mathematics from an early age. She also said it goes beyond a narrow focus of learning programming syntax and develops capabilities to think conceptually and problem solve at multiple levels of abstraction.
A growing body of research has examined computer science or computational thinking based outcomes when children are learning to code (Grover & Pea, 2013; Lye & Koh, 2014). However, little research has explored outcomes beyond computer science and computational thinking. Researchers have suggested that the inclusion of coding in the school curriculum provides a range of learning outcomes which can be applied to areas other than computer science (Kalelioğlu, 2015; Moreno-León et al., 2016; Resnick et al., 2009; Wing, 2006). This brings into question whether students who are learning to code are just learning coding and computational thinking, or through the process of coding they are learning other skills. This review explores the empirical evidence to determine whether students who are being taught coding are learning more than computational thinking or computer programming in other words, are students learning to code or coding to learn?
This review focussed on the following research question: What educational outcomes, beyond computational thinking or programming skills can be identified as a result of learning how to code in school?
