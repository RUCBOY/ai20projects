Linear computer pipelines comprise a set of function units connected in a cascaded manner, whereby each unit executes its task in parallel. They have been the core of various commercial microprocessors, since they usually promise to provide massive throughputs at the expense of increased latencies [1]. Amdahl's law [2] suggests that for the number of pipeline stages approaching infinity, the speedup shall approach the number of data items to load (or the number of instructions in a program in case of a pipelined processor). However, deeper pipelines will incur increased power consumption and larger area overheads, due to which the speedup to area ratio becomes more relevant [3]. It has been the utopia of several researchers to optimize this comparison metric, especially in context of application specific embedded systems design. These days, the electronic design and automation (EDA) tools effectively perform this optimization, thereby relieving the designers from such complex analyses.
However, there may be situations where the pipeline stages are interlocked through some feedback loops,1 thus called nonlinear or dynamic pipelines [4]. Such pipelines are typically seen in floating point addition and multiplication [5], due to which various dynamic pipeline architectures have been proposed for digital signal processing during the past three decades [6]. In those situations, it is usual for data that are fed back to collide with the following (newer) data before they could access shared resource. It is then up to the controller to arbitrate the resource among the competing data, and controlling the backpressure simultaneously (by not allowing further data to enter the pipeline) [7], [8]. This problem is not new and has been addressed several times in the literature. In Section 3 we will present a simple example of such a pipeline to demonstrate a method of automatically loading new data into the pipeline without causing any collisions. We will also observe how different loading strategies (when to, and when not to allow new data to enter the pipeline) would lead to different throughputs. Finding the best among those strategies, with respect to throughput to area ratio, is an architecture level problem, and to the best of our knowledge, there is no generalized methodology that could optimize this metric for any given nonlinear pipeline. Proposing an intelligent framework that effectively does this job, therefore, makes the primary contribution of this work. In what follows, we enumerate the significant contributions and major constituents of the proposed framework:
1.Using the existing knowledge, we develop a mathematical model of dynamic pipelined organizations, which formally explains their management - namely collision avoidance, and throughput computation.2.An optimization engine, based on genetic algorithm (GA), is proposed, which, beside preventing collisions between data items, guarantees (near) optimal throughput to area ratio. The engine is primarily supposed to determine the time slots on which loading newer data items should yield optimal throughput.3.We perform exhaustive testing of the proposed framework on numerous nonlinear pipelined organizations by means of MATLAB simulations.4.Upon obtaining acceptable results, few of the given nonlinear pipelined organizations are modified as suggested by the optimization engine. Finally, we implement the latter on an FPGA for verification of results in terms of maximum operational frequency and resource utilization, and for a quantitative comparison with the original design.
The rest of the paper is organized as follows: The mathematical model of a complex pipeline, and its management in terms of improving throughput, are presented in Section 2. For better understanding of the model, an example of pipeline management is given in Section 3. Our problem statement and the proposed framework are presented in Section 4 and Section 5, respectively. The simulation results and analysis are given in Section 6, and we conclude the article in Section 7.
