The latest trend in network bandwidth is shifting from 1 Gbps towards 10 Gbps in access networks and is rapidly moving toward 100 Gbps and beyond in the core networks and data centers.
According to the timeline provided by the IEEE P802.3cd Task Force (IEEE 802.3, 2017), the standard of the optical and electrical signaling of 50 Gbps for both 200 Gbps and 400 Gbps (IEEE P802.3bs 400 Gb/s Ethernet Task Force) transmission rates is scheduled to be released by the end of 2018. As the development of new testing tools often lags behind, there is a strong demand for measurement tools and testing instruments that can provide an accurate evaluation of the performance of network equipment (Angrisani and Narduzzi, 2008) while satisfying the growing demand of increasing bandwidths.
Packet generators, commonly used to generate synthetic traffic for performance evaluation on network equipment, are implemented for both hardware and software platforms. Hardware-based packet generators are built with specific ASIC chips where precision and performance are optimized, but it has a high price and limited flexibility. Commonly seen models of hardware-based packet generators are manufactured by Spirent (Network, Devices & Services Testing - Spirent, 2018), IXIA (Ixia Makes Networks Stronger) and XENA (Xena Networks). Hardware-based packet generators are designed to generate predefined packet streams and perform network device validation according to RFC2544 (Bradner and McQuaid, 1999). Software-based packet generators, on the other hand, are accessible and have a much lower cost. Most of the software-based packet generators are open-source and can be readily downloaded, built and executed on commodity personal computers and servers (Zhang et al., 2015). Nevertheless, the accuracy of software-based packet generators is often not good enough, especially when conducting experiments that require the generation of a high packet rate and achieving accurate traffic profiles (Botta et al., 2010).
1.1. MotivationIt is known that the performance of state-of-the-art software-based packet generators has improved in various ways (Rizzo et al., 2012). For example, Pktgen (Olsson, 2005), a packet generator that runs in the kernel-space instead of userspace to increase the performance of packet generation. Pktgen-DPDK (Getting started with pktgen) developed by Windriver using the DPDK (Programmer's Guide Data Plane Development Kit 18.02.0-rc0 documentation) framework to provide line-rate traffic generation and receiving. MoonGen (Emmerich et al., 2015) is another packet generator based on the DPDK that support fast per packet customization with LuaJIT (LuaJIT). A. Botta et al. proposed the D-ITG (Avallone et al., 2004), a distributed packet generator that generates and receives packets from multiple nodes. However, there are no software-based packet generators which are capable of generating traffic profiles with various stochastic-processes in a distributed fashion.This has motivated us to design a packet generator which is accurate, scalable, and still highly cost-effective. Leveraging the techniques of dividing the desired traffic profile into multiple traffic components in a frequency domain, we propose a distributed packet generator system that is capable of synthesizing a specific traffic profile based on various stochastic processes. By generating packets based on each traffic component in multiple nodes, traffic can be aggregated with demanded traffic profiles.This packet generating system consists of a controller node and one or more worker nodes. The controller node processes the desired traffic profile within a time domain. Based on the domain transformation techniques, the major traffic components in the frequency domain are extracted to establish the packet generation logic, and is then sent to the worker nodes. Based on the control messages sent from the controller, the worker nodes accept the packet generation logic and generate packets in a synchronized and distributed fashion. For each worker node, the DPDK packet processing framework, commonly used in modern high-performance networking services, is adopted to achieve the generation of highest packet rate precisely. Therefore, the performance of the packet generator can be scaled horizontally across a cluster of worker nodes, achieving very high throughput of aggregating traffic.The main contributions of this work are summarized as follows.•A distributed packet generator system is developed based on a controller-agent architecture.•A novel Fourier-based profile decomposition and formulation methodology consisting steps of domain transformation, traffic component selection and reconstruction is developed, so that specific traffic profiles can be decomposed into multiple frequency components for remote worker nodes.•A control message protocol is proposed based on the publish-subscribe model along with Precision Time Protocol (PTP) (Postel and Anderson, 1994) for time synchronization among workers and controller. The controller can control remote worker nodes with accuracy in the sub-microsecond range to generate specific profiles of networking traffic at a high aggregated rate.•The system can be extended with multiple workers on multiple commodity PCs equipped with the off-the-shelf commodity network interface cards (NICs).The structure of this paper is as follows. Section 2 presents a general introduction to current high-speed packet processing frameworks that are used to speed up the throughput of packet generators. The common bottlenecks of such software-based packet generators are discussed. Domain transformation techniques and comparisons with other similar efforts are also discussed. Section 3 outlines the problem addressed in this paper. Section 4 describes the proposed design and implementations in terms of traffic feature extraction and reconstruction processes; Section 5 discusses the overall system architecture of the proposed design, and the testing setup and experiment results are covered in section 6. Finally, in section 7, we summarize the work presented and make suggestions regarding future work.
