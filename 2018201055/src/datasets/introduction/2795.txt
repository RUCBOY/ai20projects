Software Architectures (SA) are not a new thing in Computer Sciences. There are many authors who have defined and pushed forward the study of this concept (Bass et al., 2013, Kruchten, 2004). According to (Bass et al., 2013) a software architecture can be defined as “[…] the set of structures needed to reason about the system, which comprises the software elements, relations among them, and properties of both”. Also, the Human-Computer Interaction and Human-Machine Interaction concepts and research areas have been developing for a long time. The Association for Computing Machinery (ACM) defines Human-Computer Interaction (HCI) as “a discipline concerned with the design, evaluation, and implementation of interactive computing systems for human use and with the study of major phenomena surrounding them” (Hewett et al., 1992). Other authors, such as Alan Dix, define HCI as “the study of the way in which computer technology influences human work and activities” (Dix, 2009). Moreover, Human-Machine Interaction (HMI) has been defined in the past as “how we as humans interact with machines, and we define a machine as any mechanical or electrical device that transmits or modifies energy to perform or assist in the performance of human tasks“ (Cannan and Hu, 2011). Despite these definitions, the term is currently assumed in the same way as the HCI, with the only exception that it is associated mostly to robotics and industrial applications and machines (Cannan and Hu, 2011, Hewett et al., 1992, Hoc, 2000).
Both areas, one typically related to software engineering, and the other to fields such as perception, psychology, design, user research, etc. seem to be separated, but researchers have made many efforts to merge them in order to build better systems. Thus, (Tran et al., 2008) state that “the architectural design of interactive systems is the object of many pieces of research since the eighties”. Following the idea of the combination of both fields, (Seffah et al., 2005) comment that: “one of the common communication breakdowns between software engineers and usability professionals is the lack of strategies to inform the early design of software architectures with usability principles, which helps avoid late (and expensive) architectural changes to accommodate user experience requirements”. What is more, in more complex environments such as software ecosystems, the user, and his or her human factors are included as part of the whole, considering it as important as any other software component or restriction (García-Holgado and García-Peñalvo, 2016, García-Holgado and García-Peñalvo, 2017). According to (García-Holgado and García-Peñalvo, 2016), “the users are components of the ecosystem, they establish information flows with other components and they are affected if the ecosystem evolves”, we can consider that their usage and interaction with other (software) components in the system are as important as the interaction between the software components. It may result in considering the HCI process/characteristics to be at the same level as the other components or parts of the (eco)system when designing or developing a system.
Theoretically, combining both fields (SA and HCI/HMI) would contribute to the building of better systems that should include the best from both the systems and user-centered designs. As many authors claim (Bosch and Juristo, 2003, John and Bass, 2001), the software architectures should enclose the fundamental structure and ideas of the system, in order to offer the desired quality based on sound design decisions. This quality could be related to any part or goal of the system, such as structural quality, presentation quality, etc. (Seffah, 2015). It has been proven that system features can have an impact on the usability of the system, even if they are logically independent of the UI and not necessarily visible to the user. For example, Bass observed that even if the presentation of a system was well designed, the usability of a system could be significantly compromised if the underlying architecture and designs did not have the proper provisions for user concerns (Bass et al., 2001). We propose that the software architecture should define not only the technical issues needed to develop and implement functionality but also dialogs with the users.
Following all those ideas, the subject of this paper is the conjunction between software architectures and HCI/HMI processes: how can software architectures support HCI/HMI processes? How could software architectures help, improve, analyze, intervene or contribute to HCI/HMI processes? In the case of this paper, we will deal with these questions from the published literature in these research fields. To accomplish these goals, we conducted a systematic literature review following the guidelines proposed by (Kitchenham et al., 2009, Kitchenham and Charters, 2007).
The work is organized as follows. Section 2 presents the systematic review methodology, including its different aspects and steps required. Section 3 presents the results of the systematic review regarding the content of the selected literature. Section 4 discusses the findings in the process, commenting on the different solutions and approaches found in the literature and outlines the threats to the validity of the study. Finally, the 5th and last section includes some brief conclusions on the research.
