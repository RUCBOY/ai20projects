Software visualization refers to the visualization of different aspects of software [1]. It is considered an effective means for program comprehension, which is widely used in the context of software maintenance, reverse engineering, and re-engineering [2], [3].
In the last two decades, we have witnessed a proliferation of software visualization approaches defined to support a broad range of software engineering activities. Researchers have been exploring 3D representations for visualizing software [3]. Among these 3D representations one of the most popular is the city metaphor [2], [4], [5], [6], [7], [8]. For example, a target object-oriented software system is visualized as a city whose buildings represent its classes and whose districts depict its packages. The visual properties of the city artifacts represent software metrics. This metaphor was initially designed to let developers solve high-level program comprehension tasks on one system version [5]. Later, the city metaphor was adapted to analyze the evolution of software systems throughout their versions [9] and to identify design issues [10]. The city metaphor has been recently implemented in interactive software visualization tools that use virtual reality in an immersive 3D environment medium (e.g.,  [11], [12]).
There is a growing need for the assessment of software visualization approaches to demonstrate their effectiveness. Unfortunately, only a few software visualization approaches have been empirically validated so far (e.g., [2], [13]), which might be detrimental to the development of the software visualization field [3]. One of the reasons behind the shortage of empirical evaluation in that field lies in the considerable accidental complexity of such evaluations [11], [13]. In addition, the variety of software visualization approaches makes it difficult to reuse the experimental material and the design of past empirical evaluations.
We present the results of a controlled experiment conducted to compare the city metaphor implemented in a 3D visualization tool displayed on a standard computer screen and in an immersive virtual reality. We also compared these tools with Eclipse, a popular IDE (Integrated Development Environment) in both academia and industry, which represents the current state-of-the-practice and therefore is the natural baseline for the comparison performed in our experiment. The controlled experiment focuses on the support these tools provide in the comprehension of Java source code. Our experiment is based on the one by Wettel et al. [2]. With respect to this experiment, we deliberately introduced changes to some parameters. For example, we considered a further treatment—an implementation of the city metaphor displayed in an immersive virtual reality.
In this paper, we make the following contributions:
•A controlled experiment to assess the use of virtual reality in software visualization with a high number of participants (i.e., 42). This is valuable because it provides evidence on the benefits related to the use of an emerging technology (e.g., Oculus Rift, a head-mounted display) in the software engineering field. The practitioner could take advantage from this evidence to support adoption decisions of such a kind of technology.•From a scientific perspective, our experiment allows collecting further evidence on the benefits deriving from the use of the city metaphor for program comprehension, so bringing credibility to both software visualization and city metaphor.
The paper is organized as follows. In Section 2, we present work related to our research. In Section 3, we provide background information useful to better comprehend the research presented in this paper. The design of our controlled experiment is shown in Section 4, while the obtained results are presented and discussed in Sections 5 and 6, respectively. We conclude the paper in Section 7.
