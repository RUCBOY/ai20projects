In the last decades, communication technologies have become increasingly used and thus become essential for social, professional and personal living. This increase was mostly due to the popularization of electronic devices as well as the emergence of more sophisticated services. It is estimated that between 20 and 46 billion devices will be connected to the Internet by 2020 [1]. The imminent arrival of the Internet of Things (IoT) [2], Tactile Internet and Ubiquitous Computing, for instance, is an exponent of the communication technologies evolution because it enables connected devices to be controlled and accessed remotely as long as they are in a proper network infrastructure.
Although communication technologies are developed to facilitate access and information sharing, the huge amount of data and heterogeneity of connected devices makes management and security challenging issues [3], [4], [5]. A traditional network does not entirely support such heterogeneity, which is a limiting factor for future technologies. Also, innovation in legacy networks is very slow due to the non-standardized software and proprietary hardware, which makes internal operation of network devices difficult to configure and inflexible [6]. Furthermore, the high costs of maintaining current network structures are barriers to the evolution of network architectures and innovation in network services [7].
To settle these issues, Software-defined Networking (SDN) has been accepted as a new paradigm that decouples network control from the traditional hardware (e.g., switches and routers). Consequently, all networking elements (data plane) act as simple packet forwarding devices whereas all forwarding decision is in charge of a centralized control plane [8]. In this manner, SDN affords flexible network management by giving network operators direct control over network functioning and allow a logic control depending on the application-specific requirements in real time [9].
SDN implements exchanging messages between the network equipment and the control plane generally by OpenFlow protocol. Alongside OpenFlow, SDN environment has other essential components, such as: (a) flow table, where each entry has a rule consisting of value definition from one or more fields of the packet’s header; (b) actions, defining how packets should be routed, and; (c) accountants that maintain usage statistics of packet flows. The controller is responsible for making decisions and adding or removing entries in the flow table, according to the desired objective, acting as an abstraction of the physical layer [10]. A secure channel intermediates the communication between switch and controller through the access interface with SSL protocol.
Despite all the benefits provided by SDN, researchers argue that the centralization of control logic can be considered a central point of failure [11]. Attackers can scan network information such as topology, security breaches, and communication details between switches and hosts. This information may be used to launch a massive flood attack as Distributed Denial of Service (DDoS), overwhelming the controller and, consequently, undermining the entire network.
Following this reasoning, the contribution of this paper is to propose two anomaly detection methods and a mitigation strategy for handling DDoS and port scan attacks. The proposals aim to monitor network traffic to identify traffic behavior that may impair the proper SDN functioning. To achieve this specifically, the first anomaly detection method performs a DWT-based analysis while the second one uses a combination of K-means and Random Forest (RF). Both proposed methods are composed of two main steps. The first step employs DWT and K-means techniques to generate a forecast from the network traffic, named as Digital Signature of Network Segment Using Flow Analysis (DSNSF) [12], [13]. Using this traffic profile coupled with such techniques [14], network traffic is analyzed to seek DDoS and port scan anomalies. As soon as the threat is detected, countermeasures are triggered to counteract it and preserve the availability of the network.
The remainder of this work is organized as follows: Section 2 presents information about related work, Section 3 outlines network anomaly detection systems and its components, Section 4 analyses a realistic application scenario; finally, Section 5 concludes the paper.
