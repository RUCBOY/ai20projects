A large number of emerging applications in scientific areas including material sciences, bioinformatics, computer vision, and robotics ask for finding a densely connected subgraph of a given graph which maximizes a measure of correlation among its vertices. When the pairwise correlation is represented by the weight of an edge of the input graph, this problem can be modeled as a variant of the maximum (vertex-weighted) clique problem in which the goal is to find a complete subgraph (i.e., a clique) of maximum weight on its edges. This problem, which is known in the literature as the maximum edge-weighted clique problem, is the subject of study of this article.
In material sciences, the task is to find a set of materials with high pairwise similarity modeled as edge weights in a graph where the materials are vertices) which, due to having similar features, can be adopted interchangeably (Agapito et al., 2016). In bioinformatics, the focus is on extracting protein structures from protein-interaction networks where the vertices are proteins and the (edge) weights model their degree of interaction (Brown, Bahadur, Tomita, Akutsu, 2006, Butenko, Wilhelm, 2006, Li, Wu, Kwoh, Ng, 2010, Tomita, Akutsu, Matsunaga, 2011). A relevant application arising in computer vision and pattern recognition (Ma, Latecki, 2012, San Segundo, Artieda, 2015) and robotics (San Segundo & Rodriguez-Losada, 2013) is found in data correspondence problems, where two sets of elements with different features need to be matched. The problem can be solved by computing a maximum-weight clique in a so-called association graph whose vertices represent pairs of elements, one from each set, and an edge between two pairs indicates that they are compatible. Edge weights in this association graph can provide a quantitative measure of the quality of the corresponding association.
1.1. Max clique problemsGiven a simple undirected graph G=(V,E) with |V| vertices and |E| edges, a subset C⊆V of vertices is called a clique if every pair of vertices in C is connected by an edge in E. The classical Maximum Clique Problem (MCP) asks for determining a clique of maximum size.We focus, in this work, on the edge-weighted case, known in the literature as the Maximum Edge-Weighted Clique Problem (MEWCP). Letting c:E→R+ be a weight function associating a weight ce with each edge e ∈ E of the graph, the MEWCP asks for finding a clique C of G which maximizes the total edge weight of the edges whose endpoints are both contained in C. Formally, this corresponds to maximizing the quantityc(C):=∑e∈E[C]ce,where E[C]:={e={u,v}∈E:u,v∈C}, i.e., the subset of edges in E incident to two vertices in C. We denote by ωc(G) the optimal solution value of the MEWCP on G, and call it the edge-weighted clique number of G. An illustration is given in Fig. 1.Download : Download high-res image (91KB)Download : Download full-size imageFig. 1. A graph G with |V|=6 vertices and |E|=8 edges. The clique C={v1,v2,v4} (whose vertices are highlighted in green) is the (unique) maximum edge-weighted clique that G contains. The edge-weighted clique number of G is ωc(G)=c(C)=17. (For interpretation of the references to color in this figure legend, the reader is referred to the web version of this article.)Other generalizations of the MCP typically include the presence of non-unit weights either on the vertices or on both the edges and the vertices. The vertex-weighted case is known as the Maximum Vertex-Weighted Clique Problem (MVWCP), while the vertex and edge-weighted case is known as the Maximum Total-Weighted Clique Problem (MTWCP). See Hosseinian et al. (2017) for a recent survey.
1.2. NotationThroughout the paper, we adopt the following notation. For each u ∈ V, we denote by N(u) ≔ {v ∈ V: {u, v} ∈ E} the neighborhood of u. The complement of the graph G=(V,E) is the graph G¯=(V,E¯) where E¯:={e={u,v}withu,v∈V:e∉E} is the set of non-edges of G. A subset of vertices I⊆V is an independent set (or stable set) if it is a clique of G¯. The number of vertices of a largest clique of G (the clique number of G) is denoted by ω(G).For a subset of vertices U⊆V, we denote by G[U] ≔ G(U, E[U]) the graph induced by U, with vertex set U and edge set E[U]. E[U] corresponds to the subset of edges in E incident to two vertices in U (i.e., all the edges e={u,v} with u, v ∈ U).For each vertex v ∈ V, we denote by δ(v)⊆E the subset of edges incident to v. For each U⊆V, we denote by δ(U) the subset of edges incident to exactly one endpoint in U (i.e., all the edges e={u,v} with u ∈ U, v ∈ V∖U). Furthermore, we use δ(u, U) to denote the set of edges that are incident to u ∈ V and any vertex in U, i.e., δ(u, U) ≔ δ(u) ∩ δ(U).
1.3. Paper outline and contributionIn this work, we introduce a new combinatorial branch-and-bound algorithm for the MEWCP which employs a new bounding procedure which we specifically design for this problem. The procedure, while based on an Integer Linear Programming (ILP) formulation for the MTWCP, is purely combinatorial, and it operates on a suitably defined vertex and edge-weighted graph.The new algorithm, which is designed to efficiently perform the branching and bounding operations, significantly outperforms the state-of-the-art on a standard set of benchmark instances used in literature. We also test our algorithm on a benchmark comprising large-scale real-world networks with millions of edges, and show that, even for these challenging graphs, our method allows for finding optimal solutions within a very short computing time.The paper is structured as follows. Section 2 summarizes the main results in the literature on solving the MEWCP. Section 3 describes the new algorithm in detail, while Section 4 complements the previous section with an illustrative example. Extensive computational results are reported in Section 5. Section 6 presents some concluding remarks and elaborates on future research directions.
