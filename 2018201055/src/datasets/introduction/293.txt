In data centers, data-parallel cluster computation frameworks (e.g., MapReduce [1], Dryad [2], Spark [3], and Hadoop [4]) provide powerful computing ability for cloud computing, artificial intelligence, and big data. In these frameworks, performing a job requires to manipulate the data stored on thousands of machines, involving massive amounts of data transfer. According to [5], the data transfer phase is critical for each job, accounting for more than 50% of its completion time.
With the traditional network abstraction, “flow” has been used to improve the data transmission performance of jobs, such as file transfers and web access [6]. Among them, flow abstraction captures a series of packets from a single source to a single destination. To cater to the data-parallel computing paradigm, a new network abstraction “coflow” is proposed [7]. Coflow is defined as a collection of flows between two groups of machines with associated semantics and a collective objective, which is more suitable for data-parallel computing jobs. This is mainly because, in the data-parallel computing paradigm, the data transmission of a job usually involves a collection flows, rather than individual flows. To improve the communication performance of data-parallel computing jobs, many scheduling methods [8], [9], [10], [11], [12], [13], [14] have been proposed to optimize Coflow Completion Time (CCT). These research efforts greatly accelerate single-stage jobs, i.e. jobs that contain only one coflow, wherein optimizing CCT means optimizing Job Completion Time (JCT).
In many well-known data-parallel cluster computation frameworks, such as Dryad [2] and Hadoop [4], multi-stage jobs are common. Among them, each multi-stage job contains multiple coflows with dependencies, where a coflow cannot start until another coflow is completed, or a coflow cannot be completed until another coflow is completed. We call the former starts-after dependency, and the latter finishes-before dependency. In these multi-state job scenarios, minimizing CCT does not mean minimizing JCT and there is a large gap between them [15]. To tackle this problem, several heuristic algorithms [16] and approximation algorithms [15], [17] were proposed to optimize JCT recently.
In the above research work focusing on minimizing JCT, the underlying network is treated as a non-blocking big switch, in which a flow in jobs can be transmitted as long as its source and destination are idle. However, in real systems, network resources are limited. Scheduling methods that do not consider network resource constraints may increase both network bottlenecks and flow completion time, while reducing link capacity utilization, thereby increasing JCT.
In this paper, we take the network resource constraints into account and investigate how to schedule coflows in multi-stage jobs to minimize the total weighted JCT, where important jobs are assigned a higher weight. However, this problem is challenging when multiple jobs compete for network resources due to the following facts: (1) the release times, transmission requests, and importance are quite different among jobs, which makes it difficult to determine which jobs are eligible to be scheduled. (2) each job contains multiple coflows with dependencies, which further makes it difficult to determine which coflows within a job can be scheduled preferentially without violating the coflow dependencies. To clarify the multi-stage job scheduling problem under network resource constraints, we first formulate it as nonlinear programming and show its NP-hardness. Then, we relax it to linear programming, which suggests a priority order for jobs to occupy network resources. Based on this job priority order, we propose a polynomial-time algorithm to schedule coflows in jobs, in which the coflow in the job with higher priority can be prioritized. To ensure a feasible solution, we check coflow dependency constraints and link capacity constraints before scheduling in the algorithm. Finally, we conduct a performance analysis of the algorithm, which shows that it can achieve constant approximation ratios in many typical network scenarios. The main contributions of this paper are as follows.

•To the best of our knowledge, we are the first to study how to schedule multi-stage jobs under network resource constraints, so as to minimize the total weighted JCT.•We formally model the multi-stage job scheduling problem under network resource constraints and then prove its NP-hardness.•We propose a polynomial-time algorithm with a performance guarantee, and prove that our algorithm can achieve constant approximation ratios in many typical network scenarios.•We conduct extensive simulations based on a real-world data trace collected from Facebook. Simulation results show that our algorithm is close to the optimal job priority solution in total weighted JCT. Compared with the state-of-the-art, our algorithm can shorten the average weighted JCT by up to 48.46% and the execution time is 19.12× faster.
The remainder of this paper is organized as follows. We introduce related work in Section 2 and our motivation in Section 3. Section 4 presents the formulation of the multi-stage job scheduling problem with network resource constraints and shows its NP-hardness. Section 5 gives relaxation of the problem and proposes a polynomial algorithm based on the relaxation. The performance of this algorithm is analyzed in Section 6 and evaluated in Section 7. Section 8 concludes this paper.
