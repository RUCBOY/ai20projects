CPS is an interdisciplinary approach for combining communication devices, computation, and actuation for performing time-constrained actions in a predictive and adaptive manner [2], [3]. This is done using a feedback loop within the physical system, which enables the embedded and network systems to monitor and control the physical processes. In this way the design of a previous model can be modified using feedback from the physical system. This also makes the system more robust, reliable and free from any past errors. According to the National Institute of Information and Communication Technology (NIST) [4], cyber-physical cloud computing is “a system environment that can rapidly build, modify and provision cyber-physical systems composed of a set of cloud computing based sensors, processing, control, and data services”.
CPS consists of three main elements: cyber, physical, and network components. Each of these components consists of a few other components. For example, the cyber component consists of two components: cloud and IoT devices where the IoT devices work as a bridge between physical and cyber components. The network component is used for interlinking the cyber and physical components and transferring and controlling data as shown in Fig. 1. In order to develop a robust architecture for a CPS solution, data needs to be collected from various physical sources (for example traffic, education, and healthcare systems [5]) using IoT devices (e.g. sensor, mobile, and a camera). Every day larger applications with more devices are being connected with CPS, which means that a larger variety of physical conditions need to be considered, and this requires larger volumes of data to be extracted using IoT devices, and filtered and processed using cloud data centres (cloud). Therefore the main components of a CPS can be summarised as follows:1.Physical Component: This component does not have any computation or communication capability; it only includes biochemical processes, mechanical processes, or humans. Physical components collect and provide data, which is required to be processed in real time for controlling various activities. Such data is usually highly concurrent and dynamic.2.Cyber Component: is used for collecting, processing, reporting and controlling all the physical components within CPS. As it is challenging to manage the concurrent and dynamic data from the physical component of CPS, the cyber component is divided into two sub-systems. These are cloud data centers, and IoT devices [5].3.Network Component: is responsible for communication between the physical and cyber components or among the cyber components. The raw data is captured from components such as IoT devices and passed to the cloud. Also, cloud devices send control and feedback to the IoT devices using network components. Main factors that affect network communications are bandwidth, topology, latency, and congestion [6], [7].Download : Download high-res image (334KB)Download : Download full-size imageFig. 1. Cyber-physical system and an example of stream data management for highway monitoring system.
1.1. Research contextFig. 1 describes a conceptual implementation of highway traffic monitoring services using a cyber-physical system. The sensed data of highway traffic (for example the position of the cars) is sent as a stream of events that is physically separated and used for problems such as traffic monitoring and management. This requires the processing of huge volumes of data with high efficiency using the capabilities of multi-cloud environments [3], [8], [9].To effectively explore data processing in a multi-cloud environment, three services for highway traffic are considered. These are: (i) Toll Collection Notification, (ii) Accident Alerts, and (iii) Car Count (a detailed discussion is given in Section 4). The system will manage its resources in terms of sensor data and other saved data available in the cloud and provide the requested information to the driver. For example, the highway traffic system will send an alert to drivers on their navigation systems to inform them to take appropriate routes (push mode). Also the driver can request information about traffic routes, and then make informed decisions based on that information (pull mode).The performance of a cyber-physical application in cloud systems may vary considerably due to factors such as application type, interference effect (caused by other applications running in the same or different containers), resource failure and congestion. Quality of Service (QoS) denotes the levels of service offered by the cloud provider in terms of service features depending on the user’s/application’s requirements [10]. QoS is generally defined in terms of application specific features such as availability, pricing, capacity, throughput, latency, and reliability or user dependent features such as certification, reputation, and user experience rating. QoS is essential for both the user who expects the cloud provider to deliver the published services, and the provider who needs to find a balance between the offered service and functional cost. Agreement between the user and the provider on the quality of service offered leads to a Service Level Agreement (SLA) [11]. SLA creates transparency between user and cloud provider by defining a common ground, which is agreed by both user and cloud provider. Appropriate penalties are normally associated with the SLA, which are applied in case of SLA violations. Therefore, it is imperative to monitor the QoS provided by the cloud provider to check whether the SLA is satisfied or not. Monitoring is required for different purposes such as resource provisioning [12], scheduling [13], [14], [15], security [16], and re-encryption [17], [18]. To detect any performance anomaly or to ensure that SLA requirements are achieved, continuous monitoring is essential [19].In virtualized environments, an application may be distributed over multiple containers/VMs, each running some services communicating over REST-based APIs [20]. Monitoring is required at both individual container/VM level or at application level to guarantee that the QoS requirements of the application are satisfied. There are some lightweight endpoints available that can easily be plugged in to perform the monitoring operations for a single environment application. However, for complex containerized applications, it is challenging to have a single monitoring end-point, because each container may be hosted on different environments that do not support a common monitoring endpoint.
1.2. Research contributionsCurrently, there are multiple monitoring frameworks e.g. Docker stat, CAdvisor, DataDog, Amazon CloudWatch, CLAMS [21], available to monitor the applications running in the cloud. However, most of the frameworks are either cloud provider specific e.g. Microsoft Azure Fabric Controller, or virtualization architecture specific e.g. CAdvisor. These monitoring tools are not able to satisfy the complex dependent requirements of CPS that can provide holistic monitoring across multi-cloud scenarios supporting different types of virtualization. Monitoring the performance of services in such a complex environment is very challenging for the following reasons:•The deployment environment for cyber-physical applications in multi-cloud environments is very complex as there are numerous components running in heterogeneous environments (VM/container) and communicating frequently with each other using REST-based/REST-less APIs. In some cases, multiple components can also be executed inside a container/VM making any failure or anomaly detection very complicated. It is necessary to monitor the performance variation of all the service components to detect any reason for failure.•Considering the virtualization environment, deployment of cyber-physical applications in containers is very different from that in VM. Containers are defined in terms of namespace and cgroups that share the same host machine whereas each VM is isolated with its own operating system. Also, the resource limitation in containers can be hard or soft as compared to VM which is always strict (hard). A soft limit allows containers to extend beyond their allocated resource limit creating higher chances of interference [22]. Monitoring the performance of cyber-physical applications in such cross VM-container scenarios is very important to ensure that services are executing in a desirable way.•Modern applications can be distributed across multiple cloud environments including bare metal, public or private cloud depending on several features such as cyber-physical application component requirements, deployment locations, security concerns, cost, etc. Different cloud providers have their own way of handling deployment and management of cyber-physical application components. Due to the heterogeneity of cloud providers, it is complex to have holistic management of application components.Based on the aforementioned challenges, this paper addresses the following research questions:•How to monitor the performance of distributed software components of cyber-physical applications running on heterogeneous virtualization platforms within the same or different cloud service providers?•How to aggregate QoS measures of cyber-physical applications running in multiple cloud environments to give a holistic view of performance?To answer these questions, this paper makes following new contributions:•It introduces a novel framework: Multi-virtualization, Multi-cloud Monitoring in Cyber-Physical Applications (M2CPA) that provides a holistic approach to monitor the performance of CPS applications composed into multiple applications deployed/running in a multi-cloud and heterogeneous environment (e.g. using different virtualization technologies).•It validates the proposed monitoring framework M2CPA, via a proof of concept implementation that monitors cyber-physical application performance running across different cloud service providers using different virtualization means. Experimental analysis verifies the efficacy of our proposed monitoring framework.The rest of this paper is organized as follows. Section 2 discusses recent related work. The M2CPA framework design is presented in Section 3. Section 4 presents the proof of concept implementation of M2CPA and Section 5 discusses the outcomes of experimental evaluation. The paper concludes by giving some future work suggestions in Section 6.
