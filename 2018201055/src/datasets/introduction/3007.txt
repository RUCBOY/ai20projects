Self-Regulated Learning (SRL) is the active control students take over their learning to ensure they achieve their learning goals. There are different SRL approaches students employ to acquire knowledge, which were categorised by Barry Zimmerman and Manuel Martinez-Pons in the 1986 paper ‘Development of structured interview for assessing student use of self-regulated learning strategies’ (Zimmerman & Martinez Pons, 1986). Through the use of interviews with students, Zimmerman and Martinez-Pons devised a 14 category taxonomy for SRL strategies used by high school students, and has since been used as a framework for targeting particular SRL strategies for research. In Computer Science Education, SRL continues to be researched due to proven gains in students' understanding of learning materials when strategies are applied (Bergin, Reilly, & Traynor, 2005), resulting in higher grades and motivation (Kizilcec, Pérez-Sanagustín, & Maldonado, 2017), along with higher student confidence to obtain their goals from constructed plans (Alexiou & Paraskeva, 2010).
From this systematic literature review, we present e-learning tools that support Computer Science students in developing SRL strategies, applying the strategies to learn programming concepts to develop and debug programs. Teaching Computer Science students the skills to perform self-regulated learning has been researched in the classroom using web-based tools (Kauffman, 2004), where recommendations have been made for classroom environments to promote these skills by encouraging students to seek help from teachers to reduce misunderstandings (Cantwell-Wilson & Shrock, 2001). The literature review examines existing modern tools to apply SRL strategies in digital learning environments to determine if the same classroom recommendations are achievable within modern tools. Some of the modern tools presented in this review are included within Massive Open Online Courses (MOOCs), Intelligent Tutoring Systems (ITS), and Computer-Aided Instruction (CAI).
We were motivated to perform this review to determine if the original SRL strategies are relevant today to teach CS students these skills through the use of modern technologies and if any new tools that support new strategies have emerged since the creation of the taxonomy. Using Zimmerman and Martinez-Pons’ taxonomy as a framework, we identify modern CS tools that support these SRL strategies, highlighting potential future research from strategies less examined. This review establishes that tools have emerged to support emotional regulation which was not a strategy considered in the original taxonomy, suggesting reclassification of the taxonomy to include emotional regulation as a new category. Lastly, the review provides refactored SRL definitions for each category related to how Computer Science students utilise the strategy while learning.
1.1. Self-regulated learningPrior to Zimmerman and Martinez-Pons’ taxonomy, self-regulated learning was explored by the social learning community for two decades (Zimmerman, 1989). Using the previous SRL research, Zimmerman and Martinez-Pons were able to perform a think-aloud study with 44 male and 36 female high school students in their normal classroom and non-classroom environments, observing them using the 14 classified strategies (Zimmerman & Martinez Pons, 1986). Zimmerman (Zimmerman, 1989) defines self-regulated learners as those that ‘plan, set goals, organise, self-monitor and self-evaluate’. The development of SRL strategies by students is a complex issue, associated with the perceived purpose of engagement with the activity, their self-perception of their ability, and the situated context of the activity—these three factors impact upon the self-regulation strategies that the student then considers relevant for application (Paris & Turner, 1994).Zimmerman's triadic model (Zimmerman, 2000) of self-regulation places achievement goals as one of four processes that students utilise in the initial, forethought, phase of self-regulation. For example, a student who adopts a mastery-approach goal would view the purpose of activities as focused on developing learning and understanding. In this example, the student would then proceed to employ strategies positively associated with this purpose (Pintrich, 2000), adopting SRL strategies due to their association with achieving their learning goals. Nicholls (1992) expands upon this to identify that achievement goals identify not only what it means to succeed but also how this success will be achieved. In this view, a student's adoption of self-regulated learning strategies is not simply associated with those that are available to them, i.e. those that they have developed skill in, but is associated with those that they consider to be relevant to the situation and purpose.Since Zimmerman and Martinez-Pons’ SRL taxonomy, researchers have investigated other factors, like emotional regulation, that influence the student's success in learning and using SRL strategies. Emotional regulation can:•be applied by students when attempting to achieve their goals (Butler & Winne, 1995),•appear in combination with other SRL strategies to stabilise students' self-regulation (Carver & Scheier, 2000),•help them recognise their abilities in different domains by drawing on their self-regulation strategies, demonstrating how positive emotions in combination with self-regulation and cognitive ability contributes to higher learning success (Boekaerts, 2006),•include both emotional and instructional support, making students aware that though a new learning objective maybe difficult, they can control and adjust the learning situation to reduce stressors through the use of this strategy (Zimmerman & Kitsantas, 2002), and•help address the negative emotions students experience when doing software development (Kinnunen & Simon, 2010).Applying SRL strategies to introductory programming, research has been performed exploring mental models and learning strategies, although little explicitly addresses SRL strategies applicable to the software development process itself. Bergin et al. (2005) explore the relationship between SRL and introductory programming performance, specifically the use of metacognitive strategies, finding that students who perform well in programming tasks also exhibit frequent use of metacognitive behaviours. Violet (1991) explores the co-operative development of metacognitive strategies for an introductory computer science course, involving students in both the development of the strategy and the identification of modeling and coaching procedures designed to guide students through the strategy. The strategy introduced builds upon theories of social constructivism and cognitive development, and follows a simple five-step process of software design. They found that this instructional approach resulted in significant changes in students’ cognitive learning outcomes. Hanks, Murphy, Simon, McCauley, and Zander (2009) recognise a relative dearth of discipline-specific strategies performed by students when asked to provided advice to the next cohort. With peer advice being a combination of general advice (63%), attitudinal advice (34%), and programming-specific advice (23%).Students using these SRL strategies try to elevate their programming abilities based on Bloom's taxonomy (Buckley & Exton, 2003) of competence, beginning as novices attempting to elevate their skill set to experts. For Software Engineering students, the difference between these two categorisations of novice and expert is students' ‘ability to perform abstract thinking and to exhibit abstraction skills’ (Kramer, 2007). The categorisation of ‘expert-novice’ (Schoenfeld & Hermann, 1982), a subset of novices who are able to progress quickly in their development of discipline knowledge, presents an interesting challenge, since expert-novices are able to progress at a more rapid pace through a combination of intellectual development and advanced metacognitive strategies. However, it is not known which of these is the predominant factor, and whether the isolated development of metacognition in novices, in the case of software-development processes, will assist in their assimilation of discipline knowledge.Prior research has been performed on how students use digital technologies to aid, plan, and coordinate their learning in general (Yot-Domínguez & Marcelo, 2017). Yot-Domínguez and Marcelo (2017) provided a survey to students from several universities in a region of Spain to determine digital technologies they use to support their SRL strategies defined by Zimmerman (1989) and Pintrich (1999). Zimmerman (2008) discussed tactics for measuring SRL growth in online learning environments which included ‘computer traces, think-aloud protocols, diaries of studying, direct observation, and microanalyses’ (Zimmerman, 2008). Both studies were not focused on a given discipline, where as this review investigates e-learning tools that provide SRL support in e-learning environments specific to Computer Science.In our review, we use the taxonomy as a framework to discuss the e-learning platforms within each category describing how students learn by practising and exploring the skills. Practising and skills exploration as explicit exploratory orientations of learning are proposed by Flum and Kaplan (2006) as a means for enculturation of students into appropriate self-regulation strategies. The presentation of e-learning tools found to support the practising of self-regulated strategies is organised within Zimmerman and Martinez-Pons’ SRL strategies starting in Section 3. Table 1 presents these categories with the original definitions, alongside refactored meanings constructed to show CS students usage of these strategies while utilising e-learning tools. Also included in the table is an additional category of actions initiated by outside influencers, rather than student initiation.Table 1. Zimmerman and Martinez-Pons’ original SRL Strategies categories published in 1986.CategoriesDefinitionsCS Students' Usage1. Self-evaluationStudent-initiated evaluations of the quality or progress of their work.Student-initiated self-assessments to validate programming exercises.2. Organizing & transformingStudent-initiated overt or convert rearrangement of instructional materials to improve learning.Student-initiated development of design plans prior to programming coding assignments.3. Goal-setting & planningStatements indicating student setting of educational goals or subgoals and planning for sequencing, time, and completing activities related to those goals.Student setting programming goals and time aside when developing programming assignments or studying for a tests.4. Seeking informationStudent-initiated efforts to secure further task information from nonsocial sources when undertaking an assignment.Student-initiated use of online knowledgebases to assist in further understanding of programming objectives.5. Keeping records & monitoringStudent-initiated efforts to record events or results.Student-initiated effort to save or link to learning materials.6. Environmental structuringStudent-initiated efforts to select or arrange the physical setting to make learning easier.Student-initiated arrangement of windows for digital environment more conducive to learning.7. Self-consequencesStatements indicating students arrangement or imagination of rewards or punishment for success or failure.Students arrangement or imagination of rewards or punishment for success, failure, or achievement of awards during the learning process.8. Rehearing & memorisingStudent-initiated efforts to memorise material by overt or covert practice.Student-initiated efforts to memorise programming objectives by overt practice.9-11. Seeking social assistanceStatements indicating student-initiated efforts to solicit help from peers (9), teachers (10), and adults (11).Student-initiated efforts to solicit or discover answers to questions from peers (9), teachers (10), and adults (11) through social knowledgebases.12-14. Reviewing recordsStudent-initiated efforts to reread tests (12), notes (13), or textbooks (14) to prepare for class or further testing.Student-initiated efforts to reread notes, programming logs (12), tests (13), or learning materials (14) to prepare for class or further testing.15. OtherStatements indicating behaviour that is initiated by other persons such as teachers or parents and is unclear verbal responses.Learning behaviour prompted by outside influencers, such as teacher, parents, or digital agents.
1.2. E-learning platformsE-learning platforms take advantage of technologies that enable students to learn and seek out knowledge at their own learning pace, giving educators the ability to create ‘online courses, virtual seminars, and practical training’ (Feldmann, 2014). When we applied the search method for this systematic literature review, described in Section 2, results showed Computer Science e-learning platforms supporting SRL strategies within Massive Open Online Courses (MOOCs), Computer-Aided Instructions (CAIs), and Intelligent Tutoring Systems (ITS). In Section 3, we present the learning tools' platform, potentially showing more commonly used platforms or a trend for future tools.‘SRL is critical in learning environments that provide low levels of support and guidance’ (Kizilcec et al., 2017). Students need to engage skills like planning and time management to help them be self-directed to achieve their goals (Kizilcec & Halawa, 2015) Kizilcec et al. (2017) performed a study on six metacognitive strategies students could engage to support their learning in MOOCS: goal setting, strategic planning, self-evaluation, task strategy, elaboration, and help seeking. The quantitative study with 4831 learners spanning six MOOCs involved student surveys, final scores, and observations made on students' usage of course content. The results showed students who engaged goal-setting and planning skills achieved their goals. Though this study focused on MOOCs, it is possible that the same skills are also needed for other e-learning environments. Zimmerman and Tsikalas (2005) published a commentary on computer-based learning environments that support the three-phase cyclical SRL model (Zimmerman, 2000). The tools discussed support a variety of disciplines, but none specific to Computer Science.
