Every day, millions of young people use networked technologies. Whether Snapchatting, Instagraming, or playing online games, their most commonplace uses of computing technologies are networked. They are passionate about these tools, and have deep insights about how to improve them [1]. Yet, none of the most popular novice programming tools are designed to empower them to invent networked technologies of their own. This both limits young peoples’ learning about a computer science topic elemental to their daily lives, and impedes their abilities to fully realize their own design ideas.
Authenticity in learning environments can have several meanings, including personal meaningfulness, connection to the world outside the classroom, and thinking and doing in ways that reflect the disciplinary practices of experts [2]. Over the past several years, we have investigated how new programming environments can capture all three of the senses of authenticity just listed, exploring how networked creative computing tools can close the gap between youths’ daily experiences with networked technologies and the kinds of things they can learn about and make with novice programming tools. We have sought to empower youth (ages ten and older) to construct a variety of networked, creative, and interactive technologies. Further, we have designed our tools to enable students to work together within a variety of participant structures, leveraging networks as both a platform for design (i.e. students invent networked systems) and as a resource for peer production (i.e. networked tools enable students to collaborate on projects) [3]. For example, one adolescent might design and build an input device that communicates over the network with a synthesizer programmed by another participant, accessing her peer’s code over a network in order to understand how to make the input device communicate properly with the synthesizer. In this example, both the technical and social structure of the participants’ work mirror authentic disciplinary practices of computer science (e.g. defining and using Application Programming Interfaces (APIs) and collaborating with one another using these abstraction barriers as resources for coordination).
In this paper, we describe the techno-pedagogical design choices we have made to immerse youth in classroom-based networked computational participation [4], including both programming interactive networked systems, and enabling youth to work within different participant structures to construct and share their work. We begin by summarizing prior work on the topic of youth programming networked technologies. We then describe our programming system, BlockyTalky, and the classroom units we co-designed with teachers. Next, we present a qualitative case study of a classroom implementation of BlockyTalky, describing the variety of projects that students created and the social and technical processes through which students created them. We conclude by discussing next steps for our own work, and broader implications for the field.
