Computational thinking (CT) has been described as a general analytic approach to problem-solving, designing systems, and understanding human behaviors [[33], [6]]. The integration of CT within the K12 curriculum has also been argued for by the ACM committee on K12 education [12] and has become a focus of several researchers on educational computing [[28], [11]].
There are many efforts around the world aimed at introducing children to computer science and programming, such as code.org, Khan Academy, or the Raspberry Pi Foundation. Visual programming languages have come to play a prominent role in this movement and have been used to teach children programming [[20], [17]] as well as computational modeling [[28], [4]]. However, most of these efforts focus exclusively on the computer and neglect an equally important concept, the network. This is, of course, completely understandable: you need to learn how to program a computer before you can create networked/distributed applications. Nevertheless, the majority of computer applications we and our children interact with daily rely on the network to provide their functionality. The world-wide web, messaging apps, online games, social networks (e.g., Twitter and Facebook), streaming music and video services (e.g., Pandora, Netflix, and YouTube), home assistants (e.g., Amazon Echo), and massive open online courses are just a few of the most popular examples. Even embedded systems are becoming networked at a rapid pace, with cars and home automation being the prime examples. These advances have created a demonstrated need to teach distributed computing as a part of basic computer literacy. Fortunately, the ubiquity and utility of the applications will make the adoption by a novice much more attractive.
We believe that it is not enough to introduce computer programming into the K12 curriculum — it is also necessary to teach distributed computing concepts to young learners. At the college level, the ACM IEEE Computer Science curriculum (2013) [15] advocates introducing the following topics to CS majors: asynchronous and synchronous communication, reliable and unreliable protocols, and the need for concurrency in operating systems. We argue that with the help of a carefully designed visual representation, an intuitive user interface and a sophisticated cloud-based infrastructure, it will be possible to teach some of the key underlying concepts of distributed computation to high school students. To this end, we have developed a new learning environment called NetsBlox, an extension of the visual programming paradigm of Snap! [[13], [29]], which, itself, is an extension of Scratch [20]. NetsBlox introduces a few carefully selected abstractions that enable novice programmers to create distributed computing applications.
The literature on educational computing is rife with observations of the impediments that keep young students from learning the basic constructs of programming. Programming languages tend to have only a few components which are combined in many different ways, and students find it challenging to understand the semantic results of different combinations, especially to achieve particular goals [[30], [23]]. When students try to assemble language elements, they often get confused with syntax problems as they struggle to understand semantic ones [23]. By alleviating syntax issues, students can focus on the semantic problems [14]. In fact, research comparing learning in a more and a less syntactically strict language, Java and Python, respectively, attributed the greater success of students in Python to reduced syntactic complexity [10]. Another documented programming challenge in the literature is students’ lack of understanding of computational processes. Many students do not understand how traditional programming languages are interpreted by the computer, e.g., how control flows and how variables get updated [5]. Some research claims that visual programming languages can make these processes more accessible by making control flow constructs more natural.
Alleviating syntactic complexity is an important pedagogical affordance of a visual programming paradigm. In such an environment, students construct programs using graphical objects on a drag-and-drop interface [17]. This significantly reduces students’ challenges in learning the language syntax (compared to text-based programming), and thus makes programming more accessible to novices. Examples of some visual programming environments are Scratch [20], Snap! [[13], [29]], AgentSheets [24], StarLogo TNG [18], ViMAP [27] and Alice [7].
We start by introducing Scratch [20] because it is one of the most mature and widely used approaches and Snap! is based on its visual formalism. Fig. 1 shows the Scratch web-based editor with a simple example Pong program loaded. A Scratch program consists of one or more sprites that can have multiple visual representations (“Costumes”) and one or more scripts. The example Pong program has three sprites (a ball and two paddles shown in the bottom left window). The currently selected paddle sprite has three scripts (shown in the rightmost window). As can be easily seen from the code, the top script handles what happens at startup (when the green flag is clicked, the orientation and position of the paddle is initialized), and the other two respond to the up or down arrow keys, respectively (the paddle moves up or down, but it is never allowed to reach the border). The program is executed on the “stage” in the top left window. The area in the middle shows the available computing blocks (instructions, operators, etc.) grouped by various color coded tabs. The shape of the block is based on the role. For example, one can only insert hexagons as a condition into an ‘if’ block header; no other shapes are accepted. This prevents syntax errors altogether.Download : Download high-res image (322KB)Download : Download full-size imageFig. 1. Scratch example.
1.1. Understanding concurrencyAlthough researchers have been investigating approaches for teaching and learning computer programming in K12 classrooms, very few studies have looked at how K16 students can learn about concurrency. A few researchers have pointed out that Scratch can be used productively to introduce basic ideas of concurrency to novices [[22], [19]]. Meerbaum-Salant et al. [22] investigated and classified two types of difficulties experienced by students in understanding concurrency using Scratch. Type I concurrency occurred when several sprites were executing scripts simultaneously, such as sprites representing two dancers. Type II concurrency occurred when a single sprite executed more than one script simultaneously; for example, a Pac-Man sprite moving through a maze while opening and closing its mouth. They found that Type I concurrency seemed to be much more intuitive for students and easier to grasp.Maloney, et al. [19] reported on an experiment where Scratch was used by students in an after-school club. These students were self-selected and self-paced, receiving no formal instruction. An analysis of the projects revealed that the majority of the student who actually constructed executable scripts used both sequential and concurrent execution. However, as the authors themselves note: “…without realizing it, most Scratch users make use of multiple threads”. The researchers did not investigate if the use of concurrency demonstrated an understanding of this concept. The internalization of concepts was measured by counting the portion of projects using them. These measures were higher (about 50%) for user interaction and loops, lower for conditional statements and for communications and synchronization (about 25%), and much lower for Boolean logic, variables and random numbers (about 10%).Visual programming environments have also been used to simplify parallel programming as demonstrated by Feng et al. Their research introduced an extension of Snap! [29] with explicit parallel programming concepts [9]. The system also added the ability to generate textual parallel code from visual blocks. Snap! blocks are translated to OpenMP [1] code, enabling execution on different HPC platforms. Developing parallel code in a popular visual programming environment enabled parallel programming concepts to be accessible to a wide range of audiences ranging from sixth graders to domain scientists.In Snap! multiple scripts may appear to be running concurrently but are simply context switching rapidly. This extension added true parallelism by adding three native blocks: parallelMap, parallelForEach and MapReduce, which were processed in parallel using HTML5 web workers and the Paralleljs [25] library. This enabled the given concurrent scripts to run in parallel rather than simply context switching. Where Feng et al. [9] targeted concurrent programming education on individual machines, the aim of NetsBlox is distributed computing and computer networking.
1.2. Paper organizationThe rest of the paper is organized as follows. The next section presents a brief overview of NetsBlox followed by a detailed description of the distributed programming primitives employed. Their utility is illustrated through a few example applications in the subsequent section. Section 5 describes how an example high level distributed computing pattern can be implemented and taught using NetsBlox. It is followed by an overview of the network model and software architecture of the tool in Sections 6 Network model, 7 NetsBlox infrastructure. The paper concludes with a description of two classroom studies involving middle and high school students.
