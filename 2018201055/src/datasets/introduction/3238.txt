According to the prolific software engineering researcher Robert Glass, “The most important factor in software work is not the tools and the techniques used by the programmers, but rather the quality of the programmers themselves” (Glass, 2002). In support to this statement, a significant number of studies advocate that a way to improve software developers’ productivity and software quality is to focus on people (Boehm, 1988, Google Inc. 2014, Lee and Shneiderman, 1978, Sammet, 1983). Having this as common denominator, effort has been made to analyze from different perspectives the role of the human factor in software development. For instance, several empirical studies have emphasized the impact of the human factor in software engineering (Capretz et al., 2015, Kosti et al., 2016, Kosti et al., 2014). These studies use psychometric measurements in order to find connections between factors, such as personality, job attitude and performance on one side, and preferences or project outcomes or effects on the other side. Software developers employ a number of distinct cognitive processes when engaged in one of the various tasks of software development, such as coding, debugging and code comprehension. This has driven a number of researchers to employ cognitive neuroscience in order to better characterize and understand programmers' mental effort (Parnin, 2011, Fritz et al., 2014, Nakagawa et al., 2014, Siegmund et al., 2014, Floyd et al., 2017).
Registering brain activity, and subsequently decode it, appears to be a highly appealing procedure, since it opens the possibility to track the workings of the programmer's brain in action. The opportunities extend even further. Such a brain-centered approach may allow the empirical validation of theories regarding the cognitive processes associated with programming (Soloway and Ehrlich, 1984), may offer novel alternatives to programmers’ training and education and can also lead to technical and methodological innovations in the field, such as improved programming languages, APIs, or development platforms. If researchers manage to measure and interpret brainwave patterns in terms of workload induced by the different software development activities, then, it would become feasible to detect the types of activities that cause particular stress or to compare alternatives for achieving a given goal in terms of brain workload. Overall, monitoring the mind of programmers could lead to novel or enhanced practices in SE. Taking advantage of recent technological advances in mobile EEG scanners, we attempted to characterize the electrical brain signals, recorded over the head and in an unobstructed way while programmers were engaged in some of their usual activities. The signals, known to form brainwaves, have been extensively studied for understanding cognition and were expected to directly reflect the underlying mental efforts.
The goal of this study is to demonstrate an inexpensive technology (mobile EEG scanners) as a way to monitor a programmer's mental effort. Hence neural correlates of programmers' workload were sought as a means to derive brain signatures indicating, in an objective manner, that they were experiencing some difficulty in performing the assigned task. If this exact sense of difficulty expressed by a programmer could be related to the brain signatures, then we could use this information to quantify the effectiveness or usability of programming languages, APIs, and development tools. The particular task we tried to explore was program comprehension, which is an integral part in contemporary SE practice, i.e. in the context of code reuse. It requires various cognitive processes, such as working memory and attention. In accordance with a recent study (Siegmund et al., 2014) we contrast this task with the task of inspecting code for syntax errors, which is a simpler one but of similar nature and hence can provide us with a suitable baseline. More specifically, in our experiment (see Fig. 1, Fig. 2), the subjects performed tasks that came in pairs. The execution of a single task is referred to as a trial.Download : Download high-res image (402KB)Download : Download full-size imageFig. 1. A) The employed Brain Computer Interface. B) The overall experimental procedure.Download : Download high-res image (295KB)Download : Download full-size imageFig. 2. A) Emotiv EPOC electrode positions. B) An example of a syntax task as used in the experiment. C) A participant embedded in our BCI.
Regarding the choice of these cognitive processes, they are preferable than other tasks in the software development life cycle or testing, with the most critical reason being the inherent technical issues in EEG-recordings. A “good-quality” EEG signal can be obtained only when the subject avoids excessive movements (as we discuss in Sections 3.3 and 5). The incorporation of the selected tasks leads to an experimental procedure, which is easier to be controlled as the programmer fixates on the screen for a certain amount of time. On the other hand, tasks as debugging or testing require physical involvement of the subject and uncontrolled movements. Other tasks are of great interest as well, but many steps remain to be taken and problems regarding the experimental conditions need to be solved before targeting such an ambitious goal.
During the first trial of the paired tasks, participants had to comprehend the presented code snippets (comprehension task), while during the second trial they had to detect the syntax errors injected in one of the code snippets (syntax task). In a separate session, each participant provided a description of the code snippets and rated them regarding the difficulty in understanding. The signal analysis pipeline included standard steps leading from the multichannel signals to the detection of activation and co-activation patterns (see Fig. 3) that were then compared between tasks. Moreover, we proceed with a multivariate analysis, in order to model the relation between neural activity traits and task difficulty.Download : Download high-res image (604KB)Download : Download full-size imageFig. 3. Exemplifying the signal-analytic procedure leading from the multichannel signal to the detection of activation and coactivation patterns based on a trial from a comprehension task. The wiring diagram (left) indicates the 14 sites at which the SP measurements are estimated and the 91 sensor pairs for which functional coupling estimates are derived. The traces (middle) correspond to θ-band brainwaves.
The contribution of this paper is threefold:

•It serves as a feasibility study about recording brain activity by means of a low cost, commercial EEG device and analyzing the brainwaves for the purpose of understanding and characterizing programmers’ mental effort.•It demonstrates that patterns of brain activations and functional connectivity can be used to form biomarkers that reflect the mental workload induced in a programmer.•It introduces a method and a multivariate regression model that can be used to estimate the programmer's experienced difficulty during code comprehension.
The next section serves as an introduction to EEG, compares it with other neuroimaging techniques and discusses their use in the study of programmers' brain functionality. Section 2 discusses work having a similar direction to ours. Section 3 describes the experimental setup, the adopted signal-analytic methodology and the multivariate regression prediction model methodology. Section 4 is devoted to results. Section 5 discusses possible shortcomings of our approach. Section 6 includes a summary of this study and a discussion about future developments.
