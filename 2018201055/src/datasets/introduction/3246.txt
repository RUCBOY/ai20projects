Entrepreneurship has been identified as a key solution for future employment. For example, to support the development of entrepreneurial skills, knowledge, and attitudes, the European Commission’s Entrepreneurship 2020 Action Plan puts special emphasis on entrepreneurial education (European Commission, 2012). Even though software start-ups may be prime examples of the entrepreneurial world, higher-education institutions must still decide on their role in providing timely and useful education on how to introduce entrepreneurial aspects alongside the core expectations of the computer science program. Designing, implementing and operating environments for start-up education needs to be taken seriously, as poorly executed education can cause students to distrust themselves, the teacher, and the learning environment.
University courses do not often provide students with the chance to see the link between their actions and real-life outcomes, although it would be possible (Rombach et al., 2008). Many of the important relationships and effects in software engineering are learnt best when students gain personal experience of the practical application of the methodologies. Therefore, teaching start-up-related knowledge and skills requires an environment where students can experience the consequences of their actions. This both gives meaning to students’ experiences and solidifies their prior knowledge, creating a fertile ground for posing questions that motivate further learning.
Since 2010, the “Software Factory” courses at the University of Helsinki (Abrahamsson, Kettunen, Fagerholm, 2010, Fagerholm, Oza, Münch, 2013) have provided students with opportunities to experience software development in a start-up-like environment. Here, teams of Master’s-level students use contemporary tools and processes to deliver working software prototypes in close collaboration with practitioners. The goal of the learning environment is to allow students to apply their advanced skills in an environment with working life relevance and to deliver meaningful results for their customers (Fagerholm et al., 2013). Software Factory projects face extreme constraints on schedule and resources, along with high ambitions on the innovativeness and attractiveness of the end product. They offer potential for very high pay-off in the event of success through, e.g., increased chances of future employment due to demonstrated abilities. The Software Factory environment offers a safe learning experience, as practical consequences of failure are limited, compared to being employed by an actual start-up. Some of the chaotic traits that many real start-ups have are not present in the educational setting, allowing students to focus mostly on the questions and uncertainties of software product development.
In keeping with the idea of reflective practice (e.g., Dewey, 1935, Schön, 1983), we look back at the past seven years of Software Factory projects and extract insights related to start-up education. The material is presented as a collection of patterns and anti-patterns for five purposes: designing, implementing, and maintaining
(i)physical and virtual environments,(ii)course design and curricula,(iii)learning materials,(iv)teacher guidance and(v)educational interventions for start-up education.
This article extends a previous paper that concerned only the patterns (Fagerholm et al., 2017).
The remainder of this paper is structured as follows. In Section 2, we discuss entrepreneurship and pedagogical theory. Section 3 describes our research context and approach. The main result, a collection of educational patterns and anti-patterns, is given in Sections 4 and 5. We discuss the result in relation to theory and a framework for entrepreneurial education in Section 6, and conclude the paper in Section 7.
