Video games are simultaneously advanced software products and complex works of creativity and art. This merger of disciplines makes video game production an interesting process to study from many different perspectives, but it also poses several challenges for the game development community. While game developers can borrow influences and find guidance in processes and methods used in both software and creative production, knowing how to intertwine methods from these two fields in projects simultaneously is a complicated task. A game development project that adheres too strongly to either software or creative production methods will likely suffer in one area or the other. Currently, there is no clear consensus of how software and creativity can be intertwined during game development, and to understand this challenge better this paper presents a review of how software and creative production is treated and understood in games-related research.
1.1. Video games as softwareVideo game development’s roots are arguably ingrained deepest in the fields of software development and computer sciences. As they have their origins in computer engineering institutes, video games have a shared heritage with “traditional” software sciences, and have followed a similar path of gradual emancipation from rigidity. When software development evolved during the ‘50 s and ‘60 s, the growing complexities of new technologies and their use contexts created challenges in the planning, management, and execution of software projects. As a means to deal with this complexity, software engineering started evolving by becoming increasingly influenced by methods found in applied sciences, mechanical and industrial engineering, and management research [1]. Although many principles from these fields were found to be highly applicable and useful in software development, there were some fundamental mismatches between the theoretically correct way of developing software and actually developing commercial software while dealing with real-world constraints. While the academic world embraced the structured and formal approach to software development, many practitioners in the field struggled to combine structured development models (e.g., waterfall planning) with the sometimes chaotic and entangled nature of customer requirements, prototyping, and feature creeping.This mismatch led to practitioners creating their own alternative, more flexible, approaches to software development, where the Agile Manifesto [2] in particular constituted a paradigm shift within the software development community. The Agile Manifesto presents four core values that constitute the ethos of flexible development, which all echo strongly in the game development industry:•individuals and interactions over processes and tools;•working software over comprehensive documentation;•customer collaboration over contract negotiation;•responding to change over following a plan.The software research community has since started adhering to the practitioner guidelines established in the manifesto, and Agile development is now widely considered an integral part of software development practices. The modern software engineering community is no longer looking for answers in traditional “physical” engineering and now constitutes its own field: “The nature of software itself thereby raises the question of how much guidance one may expect from trying to emulate the development patterns of those engineering disciplines.” [1, p. 17]It is important to mention here that video game developers were perhaps particularly strongly affected by the mismatch of structured software development and real-world constraints. Game developers were early in experimenting with less structured means of software development and have been using Agile approaches long before the Agile manifesto had been devised [3]. The Agile Manifesto, however, popularized a unifying term for these types of flexible development methods, and game development is nowadays seen as being inextricably linked with Agile development methods. As Murphy-Hill, Zimmermann, & Nagappan stated in a comparison between game development and “traditional” software development, [3, p. 6] “It appears that the unpredictability in games is what makes Agile a good fit”.Game development has always been present in the evolution of software development, and has both been influenced by, and contributed to, new practices. The game industry is an interesting part of the software industry for many reasons as it has been driving in the development of hardware and software for 3D rendering. Games are played on a wide variety of platforms, ranging from simple handheld devices for solitary play to massive online gaming communities, and games also constitute a digital market that is capable of creating great revenue. Video game development thus influences the practices in the field of software development, while also borrowing many of its work processes and standards from it. This intertwined relationship is, for example, described by Ampatzoglou & Stamelos [4, p. 888] who state that “software engineering for computer games is a field that embraces many techniques and methods from conventional software engineering”.During the last few decades there has been a growing research interest in game development processes, and several literature reviews on game development have been conducted where it has been studied from a software development perspective (e.g., [4], [5]). While game development has largely been seen as synonymous with Agile development, an increasingly nuanced picture is starting to emerge from new research and shortcomings of Agile, in particular its accommodation for creative processes, are starting to become increasingly apparent.
1.2. Video games as creative productsVideo games can not solely be seen and understood as software products, as they can also be characterized as creative products, cultural expressions, or even artwork, and the discrepancies within development teams are symptoms of this ambivalence. The processes of creating a play, a book, or a painting are very different from those involved in creating inventory systems, security measures, or business-oriented software products. Agile software development is perhaps only considered “agile” because it is presented as an alternative with the previously used structured engineering processes. For artists accustomed with other processes, however, this agility may seem strict by comparison; for a video game artist, even Agile methods may appear rigid and creativity-killing [6].The management of creativity in this context is not unproblematic. There is an inherent contradiction between control and creativity, which makes management of creativity different from traditional management [7], [8]. Malecki [7], for example, present two different faces of creativity: the managed kind and the unpredictable and unmanageable. Management of creativity and creative industries has received significant research interest during the last few decades [9]. The creative industries have been defined as “those industries which have their origin in individual creativity, skill and talent and which have a potential for wealth and job creation through the generation and exploitation of intellectual property” [10].In the creative industry, video games play a much less central and influencing role as compared to their role in software development. Whereas video game development and software development have existed within a fairly similar timeframe alongside one another, most creative disciplines have traditions that span centuries or millennia, as literature, painting, sculpting, theatre, and music are often considered to be as old as civilization. Even a comparative youngster such as cinema, a creative discipline that video games are perhaps most often compared to, has more than 100 years of tradition in creating artistically interesting pieces of work and throughout its lifespan the processes of producing films have been continuously refined. Compared to these creative fields, video game development has only just started to be credited with artistic interest and still carries comparatively little weight as a creative endeavour. In contrast to its more equal relationship with software engineering, video game development is not seen as a discipline that influences creative production but rather one that follows (or, at times, disrupts) long pre-established traditions. While the situation of video games’ creative merit is improving, as indicated by The National Endowment for the Arts in the US introducing a ‘Games’ category in its grants programs in 2011 [11], games have not made as much headway in other countries. In Sweden, Norway, and Denmark for example, there are still no government support programs specifically targeting game development, and games often need to apply for the same funds as other creative industries or turn to private beneficiaries.Game development is often compared to movie production. Movie production has strong similarities with game production, and was used as an inspiration in the early days when game studios established their production processes [12]. The production process for movies is, however, much more standardized and specialised [13] and most importantly it does not have to accommodate for the challenges associated with interactivity that are an inherent part of video games. One key difference is that the authorial control enjoyed by movie makers does not exist in the same way in games. In game design (whether the game is analogue or digital), the gaming experience and the meaning a game conveys cannot be totally controlled by the game’s designer. It materializes in the interaction between the player and the game. This makes game design a second-order design problem [14] whereas many creative products, such as movies, are first order design problems. These characteristics give video games inherent complexities that are not present in most forms of linear media.On top of these creative challenges, video games also inherit many of the complexities of software development. There exist several reports outside the field of game development that discuss and highlight how software development process need to be managed and adapted to accommodate the rhythms of game development [15], [16]. When it comes to the management of creativity, however, game development is often listed alongside other types of creative productions without much regards to how the creative process is impacted or complicated by the complex nature of software development (e.g., [17], [18]).
1.3. Bridging the gapIn summary, video games constitute a highly interdisciplinary field, and it is difficult to define the boundaries for which methods or research should or should not be considered “games-related”. While there are methods and models that attempt to cater to software developers as well as graphic artists simultaneously, few seem to be considered useful in real-world development situations. For example, similarly to how problems emerged when strict engineering principles were applied to the comparatively flexible field of software development, fundamental mismatches also appear when Agile software development principles are applied to game development. For example, Hodgson & Briand [6] report, based on a study of a medium-sized Canadian game studio, that it was hard to get artists and animators to work with Agile methods as they experienced them as being too constricting to their creative crafts. As a result, management introduced alternative approaches to monitor the work of these groups and that accommodated for the particularities of creative processes and their comparatively unstructured nature. This exemplifies that even a method such as Agile, which by many is considered to be a model that accounts for rapid iterative and “loose” development processes, does not meet the requirements and preferences of creative producers on game development projects.The systematic literature review presented in this article intends to bridge this gap between perspectives. The aim is to include and contrast research on game development seen from both a software and a creative product perspective. We aim to highlight if and how this dichotomy has been discussed and problematized in previous research. This incommensurability is something that needs to be strongly considered when conducting a broad literature review regarding games, as a strict disciplinary approach has the apparent risk that certain characteristics of game development will be emphasized on the expense of others. The principle of “if all you have is a hammer, everything looks like a nail” applies: if all you have is a computer science perspective, video games look like a software development challenge. A software engineer will focus on the software characteristics of games, just as a media researcher will focus on its narrative expression.Conducting an interdisciplinary review of this nature requires that the review method accommodates for differences in approaches, terminologies, and research validity criteria. A large component of this paper’s approach to bridging the gap between disciplines has been to create such a review method, so the contributions of this paper is both a description of the method itself as well as a subsequent quantitative analysis of the review outcomes.
