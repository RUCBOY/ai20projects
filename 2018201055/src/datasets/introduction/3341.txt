To limit the gap between the expectations of the industry and the preparation of undergraduate students concerning their first software engineering job, we have introduced, in an undergraduate software engineering course, mechanisms to encourage students to collaborate, share their knowledge, and to work with tools used in the industry for software development. Collaboration and teamwork are as important as the technical skills for the future software engineers, because students will be involved in industrial software projects where it is needed to understand as much as possible the overall project in order to be able to provide the own contribution. As observed in van der Duim et al. (2007), the social aspects make teamwork different from the individual work. Most of the current education systems focus and emphasize individual work, while the industrial environment requires cooperative and collaborative work in small to large teams.
In this paper we describe a case study we performed in order to collect student feedback on their perception of using mechanisms and tools which support their collaboration and communication. The case study was applied at the end of the software engineering course in the context of an undergraduate program in computer science at the University of Milano-Bicocca. Essentially, we proposed to students the following mechanisms to stimulate their collaboration and teamwork:
-perform seminar and lab activities in teams;-use tools such as GitHub, SonarQube, and Microsoft Project during labs;-develop a software project as a course exam in teams by exploiting the tools used in the labs.
Students learnt how to use the tools during the lab sessions and then used the tools for the lab exercises and for the final exam project. The aim of this case study is to improve the learning objectives by enhancing the teaching of the tools in the lab, by assisting with the main difficulties they found in using the tools and the most unclear functionality or aspects of the tools. In particular, for software quality analysis, we are interested in understanding if the students could identify possible drawbacks of the tool or some missing functionality.
The choice of these tools was not incidental. GitHub is currently used both in the industry (Cosentino et al., 2017) and in universities (Zagalsky et al., 2015) and is currently considered the most popular social coding platform. In universities, GitHub is used as a collaborative development platform for software projects and as a social meeting platform for courses (Feliciano et al., 2016, Zagalsky et al., 2015). Due to our interest in GitHub regarding the quality of software projects and the use of GitHub for their development (Arcelli Fontana and Raibulet, 2017, Roveda et al., 2017), in this paper we describe how we introduce GitHub in the context of a software engineering course. We describe the student feedback regarding the use of GitHub for the development of different software Web application projects assigned to teams composed of 3 to 5 members. We focus on the student feedback on the communication and teamwork aspects concerning the project development, and on how students managed and assigned tasks among team members.
SonarQube is one of the most frequently used tools for monitoring and evaluating the quality of the software. It is cited in several scientific articles as one of the most widely used software quality analysis tool in the industry (Ernst et al., 2017, Kosti et al., 2017, Yli-Huumo et al., 2016). SonarQube is exploited in particular during the development phase of software. Furthermore, it is used to compare the quality of the projects during their evolution (Letouzey, 2012). SonarQube provides the ability to highlight different kinds of code violations, known as issues, enabling the systematic improvement of code quality through a process of continuous inspection.
Microsoft Project is a powerful tool for software project management which is widely used in the industrial world. It provides functionalities for resource, time, and budget management. It also enables the sharing of the project information, as well as communication and collaboration among team members.
To obtain feedback on our course enhancement, at the end of the software engineering course, we gathered the student feedback through a questionnaire comprised of 39 questions divided into three categories. We referred to their experience in using the three above mentioned tools for developing software in a collaborative way (i.e., GitHub), for analyzing the quality of the developed software (i.e., SonarQube), and for performing project management activities (i.e., Microsoft Project). The overall feedback has been positive and the students have been responsive to both the application of the collaborative and teamwork mechanisms and to the use of the new tools. Based on this feedback, in the last section of this paper we have outlined the potential improvements in teaching and using these tools for the further editions of the course.
To guide our research, we have defined the following research questions (RQ):
RQ1: What is the student feedback on the benefits of using GitHub for software development regarding collaboration and teamwork?RQ2: What is the student feedback on using SonarQube for software quality analysis?RQ3: What is the student feedback on the benefits of using Microsoft Project for project management regarding collaboration and teamwork?
The remainder of this paper is organized as follows; Section 2 presents the related work. Section 3 introduces the software engineering course, including how GitHub, SonarQube, and Microsoft Project were used during the course. Section 4 describes how the student feedback has been collected. Section 5 analyses the student feedback. Threats to validity are dealt with in Section 6. The outcomes of our study including the answers to the RQ are summarized in Section 7, while future development is detailed in Section 8.
