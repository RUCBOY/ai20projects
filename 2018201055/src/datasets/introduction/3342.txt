Computer science applications are deeply changing due to the cost of hardware components that is continuously decreasing [1] and their computing performances that are reaching unprecedented levels. Based on the availability of a plethora of powerful (even portable) computing devices, new high performance computing tasks have been designed and new data management paradigms emerged (e.g., the well known Big Data metaphor [2], [3], [4], [5]). Moreover, the advances in computer science allow many problems to be solved in a quite effective way both in terms of computational time and resource usage. However, several problems still require an amount of computational resources that goes far beyond the power of a single device or a single user. In order to solve these kinds of problems, a new computing paradigm has born: crowdsourcing. This new paradigm is based on the idea of gathering the resources needed to complete a task from the crowd in order to parallelize its execution.
Many attempts have been made to properly define the key features of crowdsourcing systems; however, the answer to this apparently trivial question is not straightforward, since there exist many different crowdsourcing systems based on different models and assumptions. If we try to find the common features shared among all the successful crowdsourcing systems (e.g., Wikipedia, Yahoo! Answers, Amazon Mechanical Turk) we can clearly realize that they rely on some assumptions:


•They should be able to involve project contributors•Each contributor should solve a specific task•It is mandatory to effectively evaluate single contributions•They should properly react to possible misconducts
