Opportunistic networks constitute a category of mobile ad hoc networks in which the sparse or irregular distribution of mobile devices (or nodes) yield frequent link disruptions and network partitions (Boldrini et al., 2014). In such conditions, the store, carry and forward principle of Delay Tolerant Networking (DTN Fall, 2003, Qirtas, Faheem, Rehmani, 2017) helps bridge the gap between non-connected parts of the network. Whenever a transient contact occurs between two nodes, this contact can be exploited opportunistically by these nodes to exchange messages. The messages received by a node during a contact are stored in a local cache, so they can be carried physically as the node is moving, and forwarded later to other mobile nodes.
Developing middleware and applications for opportunistic networks is a challenge, because message delivery is often not guaranteed, and because this delivery can be delayed by minutes, hours, or days, as it depends on the wanderings of benevolent mobile carriers. In order to meet this challenge developers must follow a rigorous procedure, that ideally should involve all the steps shown in Fig. 1.Download : Download high-res image (71KB)Download : Download full-size imageFig. 1. Engineering process of an opportunistic networking system.
First comes the initial idea, the conception of the mechanisms. After this initial phase, the idea must be reified into a particular model, which can then be analyzed formally. During this analysis, the mechanisms and procedures can be checked, some theoretical results can be obtained, and limitations can be identified. The next stage is typically simulation. In a simulator, the system can be tested in a given set of scenarios. Even if these scenarios involve datasets that come from the real world (e.g., traces of real taxi cabs, or positions of real people evacuating a stadium), or even if the simulator is assumed to simulate very accurately all the layers of the protocol stack, the system under evaluation is usually executed based on pseudo-code. This does not prove that the system being designed can eventually be deployed and used for real. Results obtained through simulation can be deceptive, creating a misleading feeling of scientific correctness. Indeed, as observed in Kurkowski et al. (2005), the credibility of simulation results tends to decrease as the use of simulation increases. The final validation of an opportunistic networking system should thus always be based on real full-featured code (accounting for example for memory management or concurrency issues), rather than on the pseudo-code used in simulations.
Testing real code in real conditions can be painstaking, or even impossible, especially when these real conditions involve the mobility (Zhu et al., 2012) of hundreds of nodes over hundreds of hours. Emulation is an approach that can help with this respect, as it makes it possible to run real code in tightly controlled (and repeatable) conditions. The emulation stage can be seen as the missing link in the engineering process of most existing opportunistic networking systems. This stage is crucial to make sure that the code under test —with its bugs and limitations— is scalable, and that it can correctly integrate and interact with the other components of the system (such as users, for instance). Using an emulator, these properties can be verified under the desired conditions, and results can be reproduced and compared to others at convenience (Sharma et al., 2017).
Briefly put, we could say that emulation is more apt than simulation to evaluate real code, and easier and cheaper than full-scale field experimentation. Therefore, we propose to complement (not to substitute) simulation and experimentation with emulation, hence putting the emphasis on an engineering step in the development of an opportunistic system that could reveal itself especially useful as the complexity of this system grows.
In this paper we present LEPTON (Lightweight Emulation PlatTform for Opportunistic Networking), an emulation platform that has been primarily designed to allow the developers of opportunistic networking software (i.e., middleware and/or applications) to run their real software systems with simulated mobility. With LEPTON, an implementation can run in real time, either on a real device (e.g. smartphone, tablet, laptop) or on a virtual one.
LEPTON also constitutes an interesting demonstration tool, since participants in a demo session can use an opportunistic application deployed on smartphones or tablets, while a display screen shows the simulated mobility of all devices.
In this paper our main contribution is the description of LEPTON, our lightweight emulation platform for opportunistic networking. In order to show its usefulness, we also use it to compare two existing Opportunistic Networking (OppNet) middleware systems, using the same scenario and mobility traces.
The remainder of this paper is organized as follows. Related work is discussed in Section 2. In Section 3 we provide an overview of LEPTON and of its salient features. In Section 4 we present briefly the two OppNet systems we considered as use-cases for our proof of concept, and we explain how each system was adapted to be used with LEPTON. Experimental results are presented in Section 5, and Section 6 concludes this paper.
