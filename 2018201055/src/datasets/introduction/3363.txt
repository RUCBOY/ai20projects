Information systems are nowadays commonly represented with a drawing, which makes them easier to interpret and understand. Graphs are the basic modeling unit in a wide variety of areas, like project management, production scheduling, line balancing, business plans or software visualization. This is why graph drawing has become an important research area, with a large number of related publications. We refer the reader to the book by Di Battista et al. (1999) for a survey on graph drawing techniques. In Gibson et al. (2012) and Beck et al. (2016) more recent studies on drawing conventions, models and aesthetic criteria can also be found.
The selection of a measure or criterion to evaluate the quality of a graph drawing is somehow controversial given the many different approaches to this problem. However, the number of edge crossings is a widely-admitted criterion for evaluating the quality of a drawing. As stated by Carpano (1980), the fewer crossings the better the drawing. Since this seminal work, many authors have proposed crossing minimization methods to improve the readability of the drawing. In particular, Garey and Johnson (1983) proved that the problem of minimizing the number of crossings is NP-hard, and Purchase (2002) proved it to be one of the most important measures among seven aesthetic metrics to evaluate the quality of a graph drawing. This author performed a thorough aesthetic analysis of graph drawings produced by traditional layout algorithms, where crossing reduction emerged as a key objective.

Jünger and Mutzel (1997) presented several exact and heuristic algorithms for crossing minimization in bipartite graphs (also called 2-layered straight-line hierarchies). In particular, they compared the results obtained by fixing the ordering of the vertices in one layer and moving only the vertices in the other layer with the results of solving the general problem of moving (reordering) all the vertices in the graph. The authors also proposed a mathematical programming formulation to the general crossing minimization problem that we adapt in this paper to the dynamic case.
1.1. Previous studies on the dynamic problemOne of the most challenging areas in graph drawing is the one devoted to the so-called dynamic or incremental representations. As mentioned in Diehl and Görg (2002), in dynamic graph drawing we have to compute the layout of a graph evolving over time. A graph is modified by adding and deleting vertices and edges and we have to represent both, the original and the resulting graph. The drawing of the new graph, after the modifications, as an independent problem (i.e., from scratch) would be inefficient, since the graph has been slightly modified from the original drawing. As pointed out by Eades et al. (1991), the user has built up a mental map when reading the original drawing, so he or she expects the new graph to be represented in a similar way (layout) than the original one. This is why researchers in the area (see for example Branke, 2001, Martí, 2001), established that it would be advantageous to minimize the effort of the user to become familiar with a graph, i.e., to build the mental map. Therefore, minimizing the changes between the original and the new graph is a desired objective in dynamic graph drawing.As it is well-known in this field, there are many different paradigms for graph drawing, being probably orthogonal and hierarchical the most popular ones. Special attention therefore deserves the paper by Görg et al. (2004), where drawing sequences of orthogonal and hierarchical graphs are studied. In this latter case of hierarchical graph, they proposed a way to capture the idea of preserving the mental map. Specifically, considering that the ordering of vertices in each layer is responsible for the number of edge crossings, Görg et al. (2004) considered to preserve the relative order of the original vertices in the corresponding layer. Martí and Estruch (2001) proposed independently the same criterion to reflect the idea of stability across drawings: keep the relative ordering among the common vertices. These authors also proposed exact and heuristic methods to obtain solutions to this hard optimization problem. We follow these two works in our approach, and focus in this paper on preserving the relative order of the original vertices when drawing the new graph.
Di Battista et al. (1999) used the term incremental construction in the context of planar graphs. Martí and Estruch (2001) introduced the term incremental graph drawing to describe their problem on 2-layered graphs. Other authors, such as Branke (2001) and Görg et al. (2004), used the term dynamic graph drawing to refer to the same type of problems. We propose to call this problem of incremental or dynamic edge crossing minimization in 2-layered graphs, simply as Dynamic Bipartite Drawing Problem (DBDP). Several algorithms were developed to handle dynamic graphs. For example, Diehl and Görg (2002), Kumar and Garland (2006), and Sallaberry et al. (2012) presented algorithmic techniques in the context of clustering dynamic graphs. Martí and Estruch (2001) proposed an exact procedure to target this NP-hard problem based on the branch and bound methodology, which explores the set of solutions (permutations of the vertices in each layer) with the so-called search tree. This method provides the optimal solution for small size instances of up to 32 vertices. The authors also proposed a heuristic based on Greedy Randomized Adaptive Search Procedure (GRASP) to solve large size instances.More recently, Burch et al. (2011) presented an eye tracking study for evaluating the quality of node-link tree layout representing hierarchies. They concluded that radial representations are the most space-efficient one, but they usually result in drawings that are difficult to interpret. These authors recommended a traditional tree-diagram with the root on the top, which is similar to bipartite graphs considered in this paper. Additionally, Van den Eltzen et al. (2013) developed an extension for Massive Sequence Views with the aim of analyzing the temporal and structural aspects of dynamic networks. This study allows the user to find anomalies in the network and analyze temporal properties. More recently, Burch et al. (2017) proposed a novel visualization technique for graphs with considerably large number of time steps (more than a thousand, as stated by the authors).In this paper, we limit our attention to hierarchical graphs, where vertices are arranged in layers (drawn in parallel lines) and edges are drawn as straight lines. In line with Martí and Estruch (2001), we consider the case of two layers (bipartite graphs), where nodes and edges have been added to an original graph already drawn for crossing minimization. The problem is then to insert the new nodes (and the corresponding edges) in the appropriate positions in order to minimize the total number of edge crossings in the final graph. As mentioned above, the relative order among the original nodes is kept. We compare our method, based on tabu search, with their GRASP algorithm on a large set of instances, as well as with the optimal solution for small size instances.Note that our method can be applied to the general case of a sequence of drawings, not only to the 2-step problem with an original drawing and an incremented one. As a matter of fact, the DBDP can be easily extended to a sequence of n drawings by simply performing one-step optimization and then fix for the next step the new added nodes in the position obtained by the tabu search algorithm. Then, in the next step, we consider the new set of nodes as those that can be moved, and the ones added in the previous iterations as fixed that cannot be moved again. The next subsection shows an example of a sequence of drawings to illustrate the general application of our method.
1.2. Dynamic graph drawing applicationsWe can find many applications of dynamic graph drawing in Management Science. In the case of general digraphs, Project Management is probably one of the most well-known areas where this problem finds a very useful application. It has been well document that many changes occur during the development of a large project and they have to be reflected in the associated graph or chart. Dynamic graph drawing is a demand of project managers who need a stable sequence of drawings as the project evolves.In the context of bipartite graphs, the well-known assignment problem provides interesting applications of dynamic graph drawing. Fig. 1 illustrates a so-called affiliation network, where individuals and groups are represented with nodes, and edges represent membership of individuals to that groups. Affiliation networks usually change during the time, since new groups and members are systematically added. Fig. 1a shows the original graph in which we can see that individuals 1 and 2 belong to group A, and individual 3 belongs to groups B and C. Fig. 1b shows the same network at a later stage where some additions have been performed (nodes highlighted in gray). Specifically, we can see a new individual, labeled as 5, belonging to group A. Additionally, a new group, labeled as D, has also been included. Note that the edge from 5 to A creates 3 crossings in this new graph. It is worth mentioning that the new graph preserves the mental map of the original graph since the original vertices have not been moved. The challenge in this context is therefore to minimize the number of crossings while preserving the mental map.Download : Download high-res image (105KB)Download : Download full-size imageFig. 1. Dynamic graph drawing illustration.Assignment problems find nowadays many applications in Computer Science. For example, queries on online advertisement (Antonellis et al., 2008) have to be represented as a sequence of graphs for their analysis. In these bipartite graphs, the left layer represents queries performed by users, while the right layer represents advertisements (ads). A link between a query and an ad indicates that a query has been used to reach a specific ad. This kind of bipartite graphs are naturally dynamic, since users are continuously doing queries, and new ads are included by the companies. However, it is recommended by data analyzers to maintain the structure of the graph when new queries and ads are added, so previously performed queries and old ads remain in the same relative position.
Fig. 2 shows a sequence of query-advertisement graphs with 9 original queries (numbered from 0 to 8) connected with 9 ads (numbered from 10 to 18). The first drawing in the left of Fig. 2 shows the original 18 vertices with black circles where a new query and two ads are added (nodes 9, 19, and 20 represented with white circles). This drawing has 80 edge crossings.Download : Download high-res image (548KB)Download : Download full-size imageFig. 2. Dynamic graph drawing sequence.The left drawing in Fig. 2 is optimized according to the dynamic graph drawing problem (i.e., by relocating the new three nodes in the position that minimizes the number of crossings while preserving the relative position of the original nodes), resulting in the drawing next to it with 67 edge crossings. In the third drawing (starting from the left) two new vertices are added to the graph (vertex 10 representing a query and vertex 22 representing an ad), while the vertices added in the previous step are now represented with black color since they are now fixed and cannot be moved anymore. This drawing has 111 cuts. To simplify the notation, the label of the vertices in the first layer is always smaller than the ones in the second layer, so node renumbering is made on consecutive drawings. Finally, in the last drawing (the one in the right side of Fig. 2) the algorithm is executed again obtaining a drawing with 101 cuts.In this paper, we first adapt the linear integer formulation proposed for the Bipartite Drawing Problem (Jünger and Mutzel, 1997) to the dynamic variant considered here (Section 2). Then, we first describe the previous heuristic method for this problem (Section 3), and describe our algorithm based on the tabu search methodology (Section 4). In particular, we consider a greedy randomized construction with a short-term tabu search improvement method. We also consider several hybridizations of these methodologies with a path relinking post-processing (Section 5). Our extensive experimentation with more than 1000 instances shows the superiority of this proposal with respect to the previous method (Section 6). The paper ends with the associated conclusions and future works (Section 7).
