1.1. ContextModel predictive control (MPC) is an advanced control technique widely used with complex and large control problems in the process industry. A typical MPC approach utilizes a process model and results in a constrained optimization problem, which must be solved online at each sampling period. This need leads to increased algorithm complexity. To avoid the need for real-time optimization, an explicit MPC (EMPC) solution is employed [2], [5], [6]. EMPC utilizes a multi-parametric quadratic program (mp-QP) to define the piecewise affine (PWA) function over a set of polyhedral regions and precomputes the feedback control laws offline which are stored in a lookup table. In addition, it has many other applications [1], [8], [9] The main limit of the explicit approach is that the number of the polytopes on which the PWA functions are defined can grow exponentially with the size of the optimal control problem increasing. The advantage of EMPC is that the online computation is limited to searching control law in a lookup table [4]. The key step of the online computation of EMPC is to locate the polytope containing a given state point; this is called the point location problem.
1.2. Related work in point location problemThe point location problem is the bottleneck of the EMPC which requires an efficient algorithm. The simplest way to solve the point location problem would require: (i) the storage of the list of polytopes and the corresponding control laws, (ii) searching sequentially through the list of polytopes for the ith polyhedron that contains the current state point in order to implement the ith control law. The approach is simple to implement, however, it is obviously slow and inefficient since all polytopes will be explored in the worst case. There are two main factors affecting the efficiency of the point location problem: (i) the number of the polytopes, (ii) data organization and the corresponding searching algorithm. As a result, to improve the searching efficiency, it is important to keep the number of the polytopes to a minimum and use a memory-efficient data structure and fast data searching algorithm.Recently, lots of methods have been proposed to improve the efficiency of the point location problem by reducing storage requirements [10], [13], [14]. In 2008, Baotic, Borrelli, Bemporad and Morari proposed an algorithm based on the convexity of the piecewise-affine-value function. This convex value function (CVF) algorithm reduces the storage space significantly. Another algorithm yields the minimal number of the polyhedral by merging regions which share the same PWA control law to reduce the memory storage requirements [11]. The algorithm is based on the cells and the markings of the hyperplane (HP) arrangement. Instead of searching the entire polyhedral partitions, Spjotvold, Rakovic, Tondel and Johansen proposed a reachability algorithm. This obtains the set of states that can be reached at the next time instant under the assumptions that the next state point is near the current state point. To simplify controllers defined by continuous Piecewise Affine (PWA) functions employing separating functions, Kvasnica, Hledik, et al proposed several approaches to construct separators. In this algorithm, only unconstrained regions and the separator need to be stored, instead of storing data for all regions. In 2013, Stevek, Kvasnica and Fikar proposed a method to find the dominant polytope to reduce the online computation complexity of EMPC where a partitioning of explicit MPC consists of many small regions and a single big region, and there is more frequent calling of the control law associated with the big region than the other ones during the control performance.The methods previously mentioned mainly focused on the properties of the partitions of EMPC to decrease the number of the polytopes to reduce computation and storage complexity. There has been a lot of other research introducing memory-efficient data structures and fast data searching algorithms to the point location problem. The tree structure is the most widely used data structure. Lots of data structure constructing and data searching algorithms based on the tree structure are extensively studied in associated literature. In 2003, Tondel, Johansen and Bemporad applied the binary search tree (BST) to the point location problem in EMPC. The algorithm proposed a hyperplane decision criterion based on which the constructed BST is relatively balanced. A balanced BST has a high efficient online computational performance. The offline pre-processing time in this method becomes prohibitive however, when the complexity of the partitions increases. This same year, an orthogonal search tree was used with computation based on sub-division of hypercubes minimizing the loss in the cost function over hypercubes with a priori stability guarantee and performance bound. [15], The method applies to those systems with only a few states at high sampling frequencies. To improve the offline and online computing efficiency, and reduce the storage complexity, a flexible piecewise function evaluation method based on truncated binary search tree was proposed [3]. The orthogonal truncated binary search tree (OTBST) chooses the orthogonal hyperplanes as the separating hyperplane and sets a clock cycle to control the depth of the OTBST. The OTBST reduces the offline computation time, while storage is in great demand. The lattice-OTBST proposed in the same paper decreases the storage considerably and trade-offs between online and offline complexities using an OTBST based lattice representation model [24] Fuchs, Jones and Morari proposed an algorithm using the decision tree to solve the point location problem. The algorithm optimizes the balance of the tree, and the depth of the tree at its theoretically lowest. To keep the depth of the tree in this position costs the algorithm lots of time. The quadtree is used by Jafargholi, Peyrl, Zanarini and Herceg to represent the orthogonal partitions of the search space. This algorithm improves the online search efficiency by providing initial estimates that restrict the search over a fraction of the original space. Under ideal conditions, the time of traversing point quadtree is far less than that of the BST. Point quadtree creates 2d orthogonal partitions at each level of the tree, where d is the dimension of the state space. Unfortunately, as the dimension number of the state space increases, the complexity of the storage becomes prohibitive.In addition to the tree structures mentioned above, other data structures have also been applied to the point location problem. In 2011, Bayat, Johansen and Jalali proposed a two-stage algorithm which combines the direct search method with a hash table. A hash table is a data structure used to implement an associative array and the time complexity is O(1). The hash-based method enables the designer to affect a trade-off between online and offline computation complexity. Since the algorithm finds the corresponding partition using the direct search method, the online computation efficiency is relatively low. Zhang, et al uses a two-level structure to manage the point location problem, where the two-level grid (TLG, using two-level hash tables) method and the grid-BST (combining hash table with BST) method are used. The combination of the two methods improves the online computation efficiency. [25] Graph structure was used by (Herceg, Mariethoz, & Morari, Evaluation of piecewise affine control law via graph traversal, 2013) to manage the polyhedral which is directly generated while solving the multiparameter problems. The traversal of the graph is in linear time which corresponds on average to the breadth of the graph. In 2017, Oberdieck, Diangelakis and Pistikopoulos used a connected graph to construct the lookup table for EMPC and the proposed algorithm was clearly highlighted in a combined heat and power system. Takacs, Stevek et al proposed an extended version of the sequential search algorithm which resolves possible multiplicities based on a secondary evaluation of the cost function using MPT. In recent years there have also been some proposals using approaches based on combinatorial considerations [12].These related works motivated this paper's authors to propose a more efficient method of reducing storage requirements, offline and online computation complexity and trade-offs between each. Among the existing methods which can be applied to more general class of partitions, BST is acknowledged for its efficient online computational performance. However, to select the separating hyperplane from a very large number of hyperplanes incurs lots of time. Johansen [15] and Bayat [3] choose the orthogonal hyperplanes as the candidate hyperplane to improve the offline efficiency. For the same purpose, a k-dimensional tree (k-d tree) structure is proposed in this paper for the representation of partition space in an effort to minimize the time taken locating the polytope in which the state point lies. This k-d tree uses axis-aligned hyperplane as the candidate hyperplane, which leads to an extensive reduction in offline computing time. Constructing a balanced tree is essential to reduce the online computing time. The number of affine control laws are taken as the hyperplane decision criterion to keep the contructed tree as balanced as possible, whilst at the same time also seeking to minimize the storage required by the data structure.
1.3. Outline of the paperThe paper is organized as follows. Section 2 reviews the related theories and concepts for the point location problem in EMPC. The main contribution of this paper is in Section 3. This introduces a space partitioning approach to accelerate space traversal and analyze its offline and online computing complexity and memory storage requirements. Section 4 demonstrates the performance of the algorithm with two example systems. Finally, the conclusions are summarized in Section 5.
