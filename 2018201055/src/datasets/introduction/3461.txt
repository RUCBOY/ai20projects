Applications of the Fast Fourier Transform (FFT) have spread to a very diverse fields in applied mathematics and electrical engineering. Even the origin of the FFT goes back to analysis of the rotation of the Helium molecule [9]. FFT has been categorized as one of the top 10 algorithms of the computer age which had the greatest influence on the development and practice of science and engineering in the 20th century [11]. FFT is used to compute the Discrete Fourier Transform (DFT) and its inverse efficiently. The Discrete Sine Transform is a Fourier-related transform similar to the DFT, but using a purely real matrix. Some applications of the DFT are: Sine and Cosine waves of the DFT with different frequencies are used to classify the traffic monitoring sites into different seasonal patterns [41]. DST has been identified as the method which generates better results for noise estimation compared with the Discrete Cosine Transform (DCT) and the DFT [10]. The discrete fractional sine transform has been identified as the method for generating fingerprint templates with high recognition accuracy [53]. DCT, DST, and DFT approximate the Karhunen Loeve Transform (KLT) and the connection of KLT to color image compression [6], [24], [37], [38]. DST can be used to analyze image reconstruction via signal transition through a square-optical fiber lens [51], and spectral interference and additive wideband noise on the accuracy of the normalized frequency estimator can be investigated with a discrete-time sine-wave [1], to mention a few. Along with these applications, the engagement of DCT and DST in image processing, signal processing, fingerprint enhancement, quick response code (QR code), and multimode interface can also be seen in e.g., [2], [7], [12], [13], [18], [20], [21], [22], [23], [25], [26], [27], [28], [42], [43], [46], [47], [48].
The family of so-called discrete trigonometric transforms consists of eight versions (I–VIII) of DCT and corresponding DST and these versions appear in odd or even types, and also with respect to different Neumann and Dirichlet boundary conditions [6], [29], [40], [43]. Although there are eight versions, depending on applications in transform coding and digital filtering of signals, we consider DCT and DST matrices as varying from type I to IV. Let us consider four orthogonal types of DST having superscripts to denote the type of DST and a subscript to denote the order of the DST in the matrix form;(1)DST-I:Sn−1I=2n[sin⁡(j+1)(k+1)πn]j,k=0n−2,DST-II:SnII=2n[ϵn(j+1)sin⁡(j+1)(2k+1)π2n]j,k=0n−1DST-III:SnIII=2n[ϵn(k+1)sin⁡(2j+1)(k+1)π2n]j,k=0n−1,DST-IV:SnIV=2n[sin⁡(2j+1)(2k+1)π4n]j,k=0n−1 where ϵn(0)=ϵn(n)=12, ϵn(j)=1 for j∈{1,2,⋯,n−1} and n≥2 is an even integer. Among DST I–IV transforms, Sn−1I and SnIV were introduced in [16], [17], and SnII and its inverse SnIII were introduced in [22] to digital signal processing. The complete set of even DCT/DST was originally presented in [50]. DST II is a complementary or alternative transform to DCT II, which is used in transform coding. Like DFT and DCT, these DST matrices hold linearity, convolution-multiplication, and shift properties.
Among the different mathematical methods used to derive fast algorithms for discrete cosine and sine transforms are [35], [44]: The use of polynomial algebras associated with the DCTs/DSTs and [6], [32], [33], [34], [52], [49], and the use of matrix factorization method. Apart from these two main approaches, some other authors (see e.g. [19], [30]) have used different methods like displacement approach, and polynomial division in matrix form, to derive factorizations for DCT and DST. Efficient radix-2 length n algorithms for DCT and DST computation require about 2nlog2n flops. Such a DCT or DST algorithm can be represented by the factorization into sparse and non-orthogonal matrices. Thus, if the factorization for DCT or DST does not preserve orthogonality, the resulting DCT or DST algorithms lead to inferior numerical stability (see e.g. [45]). The matrix factorization for DST I in [52] used similar development as in [8] to decompose DST I into sparse matrices. Also the decomposition for DCT II in [49] is a slightly different version of the result in [8]. Although one can find orthogonal matrix factorizations for DCT and DST in [49], the resulting algorithms in [49] are not completely recursive, and hence do not lead to simple recursive algorithms. An alternative factorization for DCT I–IV in [33] and DST I–IV in [31], [32] can be seen in [6], [34], but the factorizations in the latter papers are not solely dependent on DCT I–IV or DST I–IV. Moreover, [6] has used the same factorization for DST II and DST IV as [49]. However, one can use these [6], [49] results to derive recursive, stable and radix-2 algorithms, as stated in [31], [32], [33], [34].
In electrical engineering, control theory, system engineering, theoretical computer science, etc., signal flow graphs are used to represent signal flows in a physical system which are associated with a set of linear equations. The objective here is to build an electronic device to implement or realize algebraic operations used in sparse and orthogonal decomposition of fast and recursive DST I–IV algorithms. Based on the factorization of DFT, DCT, and DST matrices one can design signal flow graphs such as: the 8-point signal flow graphs on various fast DCT and DST algorithms having sparse and/or orthogonal matrix factorization in [6], [31], [33], the signal flow graphs for forward and inverse modified DCT implementations with n=12 and also with mixed-radix decomposition of n=12 in [3], the fast DST VII and DCT II algorithm based signal flow graphs for 2n+1 points and n(2n+1) points DCT II in [39], the signal flow graph representation of the direct 2-D DCT II and 2-D DST II computation and their inverses for 16×16,8×16,4×16,16×8, and 16×4 block sizes in [5], the signal flow graphs of the coordinate rotation digital computer-based n-points DCT II, DCT III and DST II, DST III in [15], the signal flow graphs based on Givens–Jacobi rotation for n/2 points DCT IV and modified DCT IV in [4], and signal flow graphs based on the hybrid Jacket–Hadamard matrix for n-points DCT II, DST II, and DFT II in [27]. However, there is no paper on n(≥128)-point signal flow graphs which are based on fast, stable, and completely recursive DST I–IV algorithms having sparse, scaled orthogonal factorization, rotational, rotational-reflection-based matrix factorizations. In this paper, we modify the DST I–IV algorithms proposed in [31] to derive fast, efficient, completely recursive, and forward stable DST I–IV algorithms having sparse, scaled orthogonal, rotation, rotation-reflection matrices. Based on the stated algorithms, we analyze the speed improvement factor of these algorithms with the known fast, stable, and recursive DST algorithms preserving orthogonality. Furthermore, the paper presents a generalized (n−1)-point signal flow graph for the DST I algorithm and n-point signal flow graphs for the DST II–IV algorithms.
In section 2 we modify the matrix factorizations derived in [31] to express fast, efficient, and completely recursive algorithms for DST I–IV computation having scaled orthogonal, sparse, rotational, rotational-reflection, and butterfly matrices. In the same section, we develop and generalize signal flow graphs for the (n−1)-point DST I algorithm and the n-point DST II–IV algorithms. Then, in section 3, we derive the number of additions and multiplications required to compute these DST I–IV, illustrate numerical results based on the complexity, and compare the speed improvement factor with the known DST algorithms. Finally, in section 4 we establish the forward error bound and thereafter the stability of these DST algorithms.
