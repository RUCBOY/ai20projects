An extensive review of the software reliability literature shows that most of the studies in this area have concentrated on the reliability of user applications. Note that sophisticated applications need to run on top of operating system (OS) software; thus, OS failures can severely impact even the most reliable applications.
Some previous studies have investigated failures in OS software (Chou et al., 2001, Ganapathi and Patterson, 2005, Ganapathi et al., 2006, Kalyanakrishnam et al., 1999, Swift et al., 2003, Xu et al., 1999); however, none of them have yet approached the problem of discovering and characterizing OS failure patterns. In the context of this paper, OS failure patterns are defined as combinations of systematically repeated OS failure events in several computers analyzed at different workplaces. It is important to highlight that discovering patterns in OS failures is relevant from different perspectives.
For instance, studies on software reliability modeling regularly assume that OS failures occur independently (Smith et al., 2008, Trivedi et al., 2008); this assumption may produce inaccurate results for scenarios wherein failures are correlated. In these cases, failure patterns help to discover whether a failure is independent; even the existence of causal relationships can be assessed, which is of major importance for analytical and experimental researches in this field. From the OS manufacturers’ perspective, analysis of OS failure patterns is valuable in identifying the most recurrent failures in the product. Similarly, for system administrators, OS failure patterns are helpful to support the planning of preventive actions, such as turning off a given service that is known to be strongly correlated to a critical failure; this is possible through temporal analyses of recurrent failure combinations found in the discovered patterns.
In this paper, we investigated the existence of patterns in OS failures. Firstly, we answered the question: Do OS failures follow patterns? We found robust evidence of the existence of different patterns in the OS failure dataset analyzed, so subsequently we addressed questions such as ``Are these patterns consistent across computers from different workplaces?” ``Which OS components are dominant contributors constituting these patterns?” ``Which failures are recurrent in the discovered patterns?” ``Are these failures’ time-correlated?”
To answer these and other research questions we analyzed 7007 OS failure records collected from different desktop computers. We searched for individual and combined failure events that occurred consistently in multiple computers from different workplaces. To achieve this goal, we introduced and used a protocol to discover OS failure patterns. This new protocol required the definition of original concepts that are described in the taxonomy (Section 4.1) created for this specific purpose. Our method for OS failure pattern discovery (Section 4.2) can be applied to failure data of any operating system of interest, although the empirical findings (Section 5) discussed in this paper are specific to the OS platform investigated as the case study. Our main findings include:

•Discovered 45 OS failure patterns with 153,511 occurrences;•Failures in OS services were the most prevalent;•Software updates applied to OS components are one of the dominant contributors to constitute failure patterns;•Found empirical evidence of OS failure correlation, particularly autocorrelation.
To the best of our knowledge, this study is the first to propose a protocol to discover failure patterns in operating systems. Understanding software failure patterns is valuable from the following different theoretical and practical perspectives:

•Software dependability can be improved knowing the patterns of failures and their correlations, which is key for early failure detection and thus creating more effective fault-tolerant mechanisms.•Software testing can benefit optimizing resources to identify software components with lower reliability, and focusing on the most prevalent and impactful failure causes.•System modeling can offer more realistic and precise analytical models if taking into consideration the possible failure interactions uncovered by the patterns.
The remainder of the paper is organized as follows. Section 2 presents the semantics of OS failures as considered in this study. Section 3 describes the OS failure dataset used in our empirical study. Section 4 explains the proposed protocol applied to discover the OS failure patterns presented here. Section 5 discusses the most relevant results of the study. Section 6 presents the threats to internal and external validity. Section 7 discusses related works. Finally, Section 8 closes with our conclusion and plan for extending this research.
