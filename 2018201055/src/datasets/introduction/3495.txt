The focus of this paper is on the design and analysis of a randomized algorithm for finding a negative cost cycle having the smallest number of edges in a directed, weighted graph. Let G=〈V,E,c〉 denote a directed graph (network) with vertex set V, edge set E and cost (weight) function c : E→Z. We assume that G has n vertices and m edges, i.e., |V|=n and |E|=m. The terms cost and weight are used interchangeably. One of the fundamental problems in operations research and theoretical computer science is the problem of checking if G has a negative cost cycle (NCCD). NCCD is an extremely well-studied problem, inasmuch as it arises in a number of domains such as real-time scheduling [14], program verification [[9], [8]] and image segmentation [11]. The literature documents several algorithms for NCCD [1]. To date, the fastest strongly polynomial time algorithm for NCCD is the Bellman-Ford procedure which runs in O(m⋅n) time. [15] describes a scaling approach that runs in O(n⋅m⋅logN) time, where N is the largest absolute value of a weight of any edge. The scaling approach is superior to Bellman-Ford approaches, when the edge weights are small integers.
In some practical applications, the mere isolation of a negative cost cycle is inadequate. Indeed, these applications mandate additional constraints on the negative cycle of interest. For instance, in the performance analysis of discrete event systems [2], one needs a cycle whose mean cost (the cost divided by the number of edges) is minimum. This problem is known as the minimum mean cycle problem (MMC). MMC finds several applications in graph theory [16], VLSI Design [[28], [4]] and real-time embedded systems [18]. In [17], an O(m⋅n) time algorithm is described for this problem. Likewise, in Satisfiability Modulo Theory (SMT) solvers [[3], [12]], the goal is to identify “small” certificates of infeasibility. When the constraint system in question is a difference constraint system (DCS), then the problem of identifying small certificates leads naturally to the formulation of the shortest negative cost cycle problem (SNCC), that is finding a negative cost cycle with the smallest number of edges. We will refer to a shortest negative cost cycle in a graph as a shortest NCC to avoid using SNCC to refer to both the problem and the cycle.
SNCC also finds applications within the field of abstract interpretation [10]. In abstract interpretation, the semantics of a program are interpreted over a suitably chosen domain. One such domain is polyhedra defined by difference constraints [25]. It is well-known that a conjunction of difference constraints can be represented by a suitably chosen constraint network [7], such that the constraint network contains a negative cost cycle if and only if the difference constraint system is infeasible. The shortest negative cost cycle corresponds to a minimum infeasible subset.
It is important to note that SNCC arises as a fundamental subproblem in optimizing the generalized submodular flow problem (GSFP). [21] developed the GSFP as a common generalization of the submodular flow problem [13] as well as the valuated matroid intersection problem [19] and [20]. The optimality conditions for GSFP require that there is no negative cost cycle in a related auxiliary graph. If there is a negative cost cycle, then an improved solution can be obtained by augmenting around a shortest negative cost cycle in the auxiliary graph.
GSFP finds applications in economic allocation problems. [21] and [22] showed that the efficient allocation problem for a two-sided economy with multiple buyers and sellers can be formulated as a generalized submodular flow problem on a bipartite network. [5] extended the results on 2-sided economies to trading networks that are not bipartite. They modeled problems on trading networks as GSFPs. Their paper offered a unifying framework for trading networks involving bilateral trades under what is referred to as the full substitutability assumption.
In each of these applications of GSFP, a competitive equilibrium can be obtained by sending flow around shortest negative cost cycles in an auxiliary network.
The first polynomial time algorithm for SNCC is detailed in [26]. The algorithm therein is based on matrix multiplication and runs in O(n3⋅logn) time. [26] also discusses several applications of SNCC and establishes the connection between SNCC and the minimum unsatisfiable core of a difference constraint system. The problem of finding minimum unsatisfiable cores lies at the heart of several SMT solvers [6]. [27] developed two alternative algorithms for SNCC; the edge-progression approach which runs in O(n2+m⋅n⋅|C∗|) time and the edge-relaxation approach which runs in O(m⋅n⋅|C∗|) time. A detailed implementation profile of the above three algorithms is also presented. In [29], the problem of finding the shortest NCC in planar networks is discussed. The authors exploit the fact that a planar network can be recursively decomposed and design a divide and conquer algorithm that runs in O(n1.5⋅|C∗|) time, where C∗ is a negative cycle having the smallest number of edges.
This paper focuses on the design and analysis of randomized algorithms for SNCC.
The main contributions of this paper are as follows:
 
1.A randomized algorithm for SNCC, which runs in deterministic time O(m⋅n⋅logn) and has error probability 1e. This probability can be reduced by repeatedly running the algorithm.2.A randomized algorithm for SNCC, which runs in expected time O(m⋅n⋅logn), and in which the expected number of random bits is O(n).
