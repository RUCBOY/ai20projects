Modern many-core platforms provide high performance but are increasingly constrained by power dissipation. In addition, applications typically exhibit dynamic characteristics (e.g., memory-bound, compute-bound) throughout their execution, resulting in continual changes in the power state of the system. It is essential to control the peak and average power based on application behavior in order to achieve the proper performance with minimum cost [29]. This requires thorough analysis and sophisticated power management methods to control power and provide necessary performance for a diverse set of workloads [13], [14]. Some approaches [17], [18] use analytical models to estimate the average or worst case power consumption of the system based on frequency and voltage level of the system. These methods fail to take into account the effects of workload and input variability during system execution. A promising and well-established approach is the use of control-theoretic solutions based on rigorous mathematical formalisms that can provide bounds and guarantees for system power consumption. In the past, different control methods have been proposed [24], [25] for resource management in the presence of a specific type of workload running on the system. A majority of these methods use Single-Input Single-Output (SISO) controllers. These SISO controllers often deploy proportional Integral (PI), proportional integral derivative (PID), or lead-lag methods. Although these controllers theoretically provide guarantees for stability and robustness, significant care must be taken in their practical implementation to ensure that these properties continue to hold in the implemented designs. For instance, SISO controller can be implemented at the various layers of the abstraction stack (e.g., application, OS, hypervisor or hardware), resulting in different challenges and design trade-offs: software controllers provide ease of implementation and flexibility, while, hardware controllers provide higher responsiveness to sensor measurements. In many cases, the controller configuration needs to be changed to manage power for a new set of applications. Software-based controllers provide such flexibility but are limited on response time to changes in the system, currently in the order of milliseconds. This could pose problems when an application’s phase can change faster than the settling time of the controller. In addition, some applications cannot be controlled using classic static controllers and require more advanced solutions. These are examples of many issues that demand a thorough analysis of application behavior early enough (e.g., at the time of system identification) and well before controller deployment.
In this paper, we present a comprehensive evaluation of SISO control-theoretic methods for power management. We use Intel’s Sniper multi-core simulator to control power using DVFS while executing a variety of benchmarks including the PARSEC and SPLASH2 benchmark suites as well as stress-test benchmarks. A preliminary version of the approach has been proposed in [1] with the following contributions:
•We highlighted the need for careful and early system identification and performance evaluation for SISO controller design through several observations.•We presented an analysis of multiple controller responses and outlined a general robustness classification of workloads based on their computation and communication intensity.•We identified early symptoms that can cause instability in controller for a single-core processor and show application classes for which simple classic SISO controllers are not effective in managing single-core processors.
We extend this work to consider power management of multi-core platforms executing multithreaded applications by adding the following contributions:
•We extend the study platform to perform VF scaling on multi-core systems. Analysis is done on multi-core systems of different core counts.•We included multi-threaded benchmark suites (e.g., PARSEC) in our system identification and performance analysis to study multi-threaded applications.•We provide a benchmark categorization with respect to the applications’ level of parallelism, run-time behavior and power consumption to be used in the choice of control design methods.•We improve our evaluations on the efficiency of control theoretic approaches to provide scalable management to various types of cores and communication schemes.
The rest of this paper is organized as follows. Section 2 presents the background and motivation for our evaluation of SISO controllers. Section 3 outlines the general experimental setup. We present our detailed analysis in Section 4. and discuss the insights learned for two benchmark suites and microbenchmarks in Section 5. We position our work with related efforts in Section 6, and finally conclude in Section 7.
