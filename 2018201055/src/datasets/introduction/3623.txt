1.1. Computational Social ScienceComputational Science (CS) [2] is an emergent research field that exploits data-intensive computing and analysis to study real-world complex problems. CS aims to tackle problems using the predictive capability to support the traditional experimentation and theory, according to a computational approach to problem-solving. This new discipline in science combines computational thinking, modern computational methods, hardware and software to face (complex) problems, overcoming the limitations of traditional ways. Computational Social Science (CSS) is a branch of the CS that deals with social and behavioral dynamics. CSS involves interdisciplinary fields and exploits computational methods, such as social network analysis as well as computer social simulations to (i) collect social data; (ii) understand social dynamics; (iii) model the behavior of social systems; (iv) predict the behavior of such systems in order to answer what-if questions.With emerging collection techniques for big datasets, CSS is facing a paradigm shift: fundamental changes are occurring related to research methods and the ways they can be applied too, in order to collect and analyze data with an unprecedented breadth, depth, and scale.This paper provides computational tools and methods in order to setup and runs big scale Agent-Based Models (ABMs) simulations for CSS.
1.2. Agent based simulationsComputer simulation represents a novel methodology for research and development in many fields such as ecology, economics, physics, etc. In some fields, such as social sciences, computer simulation enables scientist to reconcile the descriptive approach, used in the social sciences and the formal approach, used in the hard sciences. ABMs are modeling techniques designed to emulate or predict complex phenomena through independent actions and interactions performed by multiple agents.An ABM consists of three components: agents, relations, and rules. The agents model a population, the relations define potential interactions among agents while the rules describe the behavior of an agent as a result of an interaction. The idea behind ABMs is to exploit the KISS principle “keep it simple and stupid”, that is, a small set of simple rules may be sufficient to reproduce complex behaviors [3]. ABMs can be used to represent a biological model like a flock of birds, as well as emergencies or evacuations scenarios or, more in general, computational sociology experiments. In social sciences, ABMs are seen as a fundamental tool [4] to model the generative approach [5], essential for understanding complex social phenomena. The relevance and effectiveness of ABMs have been recently recognized also in policymaking and economics [6]. Cioffi-Revilla in [7] raised a very challenging question: “How does a variation in the number of interacting units (grid size) affect the main results of an agent-based simulation?”. This question motivates the study of complex phenomena at different scales. Indeed such studies often require the simulation of several models on massive populations, with different parameters. Therefore they need for highly demanding computational software implementations.
1.3. Distributed ABM simulationsDistributed computing has become a consolidated technology considering the exponential growth of local networking and Internet connectivity coupled with the unused computational power available on average desktop PCs and the scalability limits of centralized approaches. The most common approach to Distributed Computing is based on the Master/Slave paradigm. In this paradigm, the user sends a complex job on a Master computer, which orchestrates the work to be done by Slaves (or Workers). Specifically, the Master divides the job into a set of independent tasks. Then, each task is sent to an available slave, which processes the task and sends back the output. Finally, the master obtains the results of the whole computation and, if it is the case, combine the outputs.One of the most challenging aspects in distributed computing is to balance the workload among the machines that provide computation (i.e., the slaves). Indeed, due to synchronization constraints, the entire computation advances with the speed of the slowest machine, which may represent a bottleneck for the overall system performance. Software for computer simulation, in the context of CSS, should be able to exploit both High-performance computing (HPC) systems, characterized by a large number of homogeneous computing machines, as well as heterogeneous systems.Several distributed ABM solutions have been proposed in order to help the development and the testing of new models, by providing supporting tools that improve the efficiency and the effectiveness of managing (distributed) simulations [8], [9], [10].Another interesting and emerging computing paradigm that is going to provide a significant impact in CSS is cloud computing [11]. Cloud computing offers the advantage of delivering computation and data storage without the user having to have an in depth knowledge of the technology.Cloud providers offer different services like managed infrastructures (IaaS - Infrastructure as a Service) as well as managed platforms such as a key-value storage or a relational database (PaaS - Platform as a Service). The offered IaaS and PaaS services enable Cloud computing applications that range from simple data backup to the possibility of deploying entire computing clusters or data centers in a remote environment. The flexibility, cost-efficiency, scalability, accessibility, and user-friendliness of cloud services make it also an attractive model to address computational challenges in the scientific community.
1.4. Distributed (D-)MASON: A framework for scalable ABM simulationThis paper introduces the latest functionalities of D-MASON, which significantly improve both the efficiency and the effectiveness of the framework. D-MASON [12] is a distributed version of MASON [13], a well-known and popular library for designing and executing ABMs. D-MASON is innovative because the parallelization is implemented at framework-level without modifying the interface on which simulations are implemented, so that scientists that are used to MASON framework (e.g., a domain expert with limited knowledge of distributed programming) are able to exploit a distributed environment using D-MASON as a sequential framework (being only minimally aware of such distribution). D-MASON has been designed, using MASON core which guarantee the efficiency and at the same time takes advantage of the lesson learned from two widespread toolkits for ABMs, NetLogo [14] and Repast [8] in order to improve ease of use even for inexperienced users.Specifically this paper introduces several novel D-MASON functionalities and architectural improvements:•An improved space partitioning strategy, which guarantees a well-balanced distribution of the load among the logical processors (LPs) involved into the computation (see Section 4.1).•The development of novel distributed fields: 3D Fields (see Section 4.2) and the Network field (see Section 4.3).•A memory consistency mechanism, which deals with the management and synchronization of memory between the various simulation steps, allowing the scientists to focus only on the development of the model (see Section 4.4).•A fully decentralized communication strategy as well as an hybrid approach, which enable to obtain efficiency with a centralized management (see Section 4.5).Finally the whole framework has been integrated into a cloud computing environment in order to provide a SIMulation-as-a-Service (SIMaaS) infrastructure that simplifies the process of setting up and running distributed simulations in the cloud (see Section 4.7).
