Fast and accurate query of distance map [1] is central to many computer graphics applications, such as surface segmentation and edit [[2], [3]], mesh skinning [4] and watermarking [5], Poisson sampling [6], meshing [7], isometry-invariant shape retrieval [8], intrinsic Voronoi tessellation [[9], [10], [11], [12]], minimum-distortion parametrization [[13], [14], [15]] and non-rigid correspondence [16]. Also, the research topic has a close relationship with many other research fields [17], such as medical imaging [18], and robot motion planning [19], and architectural geometry [20].
In light of the fact that exact geodesic algorithms [[21], [22], [23], [24], [25], [26], [27]] are time consuming and hard to be applied to large mesh surfaces, one has to make a balance between accuracy and speed in many real computer graphics applications. In the last decades, there is a large body of literature on approximate geodesic computation [[28], [29], [30], [31], [32], [33], [34], [35], [36], [37], [38], [39]]. But the status quo is that it is still hard to find a suitable geodesic algorithm in practice. A natural question arises: Can we achieve an accurate and fast distance query with a lightweight processing (roughly linear to the model complexity)? Furthermore, in many computer graphics applications, e.g., discrete exponential map generation, we hope the reported geodesic distance is as accurate as possible if measured with relative error. Obviously, the existing approximation approaches cannot meet the couple of requirements.
In this paper we shall present a fast and accurate method for geodesic computation on a 2D manifold surface. The key idea of the method is to use a sequence of precomputed short and exact geodesic paths to approximate the geodesic path between any two given points on a given base surface. Specifically, in a processing step, we generate a set of evenly distributed sample points on the base surface and compute the exact geodesic distance from each sample point to those in its neighborhood of some specified range. This produces a proximity graph of all the sample points. In the query step, when two query points s and t are given, we add s and t to the set of sample points to generate an augmented proximity graph and then compute the shortest path from s to t on this augmented graph to approximate the exact geodesic between the two points, as illustrated in Fig. 1.
Suppose that r is the radius of the maximum empty circle, which can be used to characterize the density of a given sample set. The proximity of a sample point pi is defined by the set of the sample points inside a geodesic disk of radius R>0 centered at the pi. When R≥2r, the proximity graph is connected and the union of the radius-R geodesic disks centered at all the samples form a coverage of the base surface. (Otherwise, let q be a point that is not covered by the set of disks. Considering the empty circle centered at q will lead to a contradiction to R>2r.) Alternatively, for a given model, the density of the samples can be controlled by the total number of the samples, assuming an even distribution. Similarly, in lieu of R, for each sample one may set the number of the neighboring samples to include in its proximity to define the proximity graph.
Our method outperforms the fast marching method (FMM) in both time and accuracy. For example, on a 100k-face Bunny model, we use 5000 sample points and define the proximity of each sample to be the set of its 18 nearest neighbors. The query time of our method is 5 times faster than FMM and our approximation is more accurate—the average relative error and the worst relative error of our results are 0.9% and 3.2%, respectively, while the average relative error and the worst relative error of FMM are 1.3% and 56.7%, respectively. Admittedly, this significant improvement in efficiency and accuracy does not come free. While FMM does not need preprocessing, our method needs to generate the sample points and their proximity graph in a preprocessing step that costs 28 s and takes about 3 MB to encode the proximity graph. This is a reasonably small space requirement for most geometric processing tasks for a mesh model of this size.
 The remainder of the paper is structured as follows. In Section 3 we will discuss the preprocessing step of building a geodesic proximity graph on a given surface. In Section 4 we will present the algorithms for processing geodesic queries with the assist of the proximity graph. In Section 5 the properties and parameters of our algorithms will be analyzed. In Section 6 we will present experimental results for evaluation and comparison. Finally, the paper is concluded in Section 7.Download : Download high-res image (296KB)Download : Download full-size imageFig. 1. Here a proximity graph is defined on 600 sample points with each sample being connected to 19 nearest neighboring samples. Then the geodesic path from s to t is approximated by the shortest path on the proximity graph. The relative error of the approximate path is 0.28%.Download : Download high-res image (752KB)Download : Download full-size imageFig. 2. Our algorithm has two stages: building the proximity graph (a–b) and processing geodesic queries using the proximity graph (c–d).
