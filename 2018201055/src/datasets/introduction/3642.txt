Before computer aided design, curves were often designed using physical splines. These were elastic strips which would be fixed on a planar surface using so-called ducks. A designer would use the ducks to enforce positional and tangential constraints on the curves described by the splines. Later, when computers began to be used for design, the curves that were chosen were not direct models of these physical elastic splines, but rather polynomial splines. Rather than tangential and positional constraints, the polynomial splines are governed by the position of their control points as well as other parameters. From a usability point of view, polynomial splines are superior because the curve changes linearly with the control points. In practical terms, this means that polynomial splines adhere to the “principle of least astonishment”.
However, in recent years, elastic rods have started to gain renewed interest because of progress in the area of fabrication (Nørbjerg, 2017). In particular, the method known as robotic hot-blade cutting, where an elastically deformed blade melts its way through a block of polystyrene, is a procedure where, again, physical realisations of elastic splines become very important. One might then turn from polynomial splines to numerical elastic splines as a design tool. However, we find that this is a bad idea, and the crucial problem is illustrated in Fig. 2. The most intuitive way to specify an elastic spline is through positional and tangential constraints (and its length) but given these boundary conditions, there are typically infinitely many curves which fulfil the conditions. It is not difficult to create a system allowing the user to interactively design an elastic spline using boundary conditions, but due to the multiplicity of solutions, it regularly happens that the curve makes a sudden jump from one configuration to another. Put differently, we find that modeling with elastic splines using boundary conditions goes against the principle of least astonishment.
Therefore, we introduce a different way to design elastic splines, using cubic splines as an interface tool. We use cubic curves, because these are the lowest degree polynomials that are able to capture all of the types of shape that we want to represent with elastic splines. Our approach is to allow the user to design a cubic spline that is close to an elastic spline using a database of cubic Bézier curves. This approach is both fast and allows us to find a spline not based on the boundary conditions but based on the entire flow. Hence, the spline will not surprise the user by jumping to a different configuration as the control points are moved. To guide the user, we show a good region where control points can be placed. This good region is recomputed every time the user moves a control point based on curves in the database. If the user stays within the good region, the resulting spline is very close to an elastic spline. As a final step, we can convert the spline to a true elastic spline using the algorithm described in Brander et al. (2017b).
From a design tool for elastic splines, we have extended our method to the design of elastic spline foliations by allowing the user to generate a sequence of splines which are then interpolated to create a dense set of curves that foliate a surface, see Fig. 1.Download : Download high-res image (101KB)Download : Download full-size imageFig. 1. Elastic spline foliation created with the proposed design tool.Download : Download high-res image (71KB)Download : Download full-size imageFig. 2. Two sets of elastic curves that share endpoints, end tangents and lengths.
1.1. Related workThere is a wealth of literature on polynomial curves and splines, and we refer the interested reader to the famous book by Gerald Farin (2002). From the literature we obtain algorithms for designing with polynomial curves. Like the polynomial curves, the problem of designing with elastic splines or curves has also gained attention (Edwards, 1992, Mehlum, 1969, Brunnett and Kiefer, 1994, Horn, 1983, Bruckstein et al., 1996).In Edwards (1992) the author introduces a method for obtaining an interpolating elastic spline. In that article, a basis function is defined using the Euler equation of an elastic curve with unconstrained length. Using this basis function the parametric equations of the spline are derived. From these equations, a set of non-linear equations are obtained that describe a pointwise interpolating C2 elastic spline. Using Newton's method these equations are solved and the elastic spline is obtained. A couple of numerical examples are included. Some of these numerical solutions are unstable and some solutions are not unique given the set of input points. The problem of determining a pointwise interpolating spline is also considered in the dissertation (Mehlum, 1969). In Mehlum (1969) algorithms for determining non-exact elastic splines are presented: the KURGLA algorithms. The first algorithm, KURGLA 1, uses that the curvature of an elastic curve is a linear function of x and y (the first and second coordinates of the elastic curve). The curvature function is approximated as a piecewise constant function, and the numerical elastic spline is obtained as a sequence of circular arcs. Instead of circular arcs the other algorithm KURGLA 2 uses segments of the Cornu spiral to approximate the elastic spline. This approximation is obtained by approximating the curvature as a piecewise linear function. Similarly, the authors in Brunnett and Kiefer (1994) approximate the elastic splines using a piecewise polynomial curvature function. In this case, the numerical elastic splines are tangent continuous and they interpolate a set of points with specified end tangents. All of the algorithms in Edwards (1992), Mehlum (1969), Brunnett and Kiefer (1994) determine numerical elastic splines, but the more simple problem of designing one elastic curve has also been considered in the literature (Horn, 1983, Bruckstein et al., 1996). In Horn (1983) the elastic curve with endpoints at (0,0) and (1,0) and vertical end tangents is studied. The more general case of obtaining a discrete elastic curve given arbitrary endpoints, end tangents and length is considered in Bruckstein et al. (1996). To model the discrete elastic curve the authors use a piecewise linear spline. Using this representation they obtain a discrete version of the bending energy and obtain the elastic curve by minimizing this energy subject to the given end conditions.All of the methods in Edwards (1992), Mehlum (1969), Brunnett and Kiefer (1994), Horn (1983), Bruckstein et al. (1996) take as input points and/or tangents and output an interpolating elastic spline/curve. Consequently, there is a real problem in controlling the shape of the spline/curve given the interpolated values, see Fig. 3. Such problems do not arise using the method described in this article, because we are using a special class of polynomial splines, and we have complete control over the shape of these. To the best of our knowledge, this article is the first work where polynomial splines are used as a design interface with which to create elastic splines. However, our tools for controlling the polynomial splines are similar to those found in any CAD system or 3D modeling package (e.g. Rhinoceros 3D, AutoCAD, Maya, Blender, etc.) with the difference that we provide guides for placement of control points in order to facilitate conversion to elastic curves.Download : Download high-res image (48KB)Download : Download full-size imageFig. 3. Changing the boundary conditions slightly (given by the black cubic curves) might cause the elastic curve (red) to jump configuration. By designing elastic curves/splines using the control polygon of a proxy, we obtain more design control as the elastic curves are forced to follow the control polygon. (For interpretation of the colors in the figure(s), the reader is referred to the web version of this article.)
1.2. OverviewThe structure of the article is as follows: we first introduce the curvature of an elastic curve and we describe the database. In Section 3 we use the database to present a method for designing interactively elastic splines with C1 continuity. In Section 4 we demonstrate the method and obtain elastic spline foliations. Finally, we consider an application of the method in Section 5 and conclude the article in Section 6.
