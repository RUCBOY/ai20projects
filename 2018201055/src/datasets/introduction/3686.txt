Software process capability and maturity (SPCM) models are nowadays well established in the industry [33], [128]. These models are a collection of software engineering best practices, organized in process areas, which help companies to improve their software process. A large number of official appraisals using these models indicate that software engineering practices are currently being used in industry. For instance, more than 10,000 official appraisals [19] using CMMI (Capability Maturity Model Integration) [18] are reported covering more than 80 countries. Other national SPCM models (such as the MR-MPS-SW Brazilian model [115], the MoProSoft Mexican model [89], and the Spanish maturity model [41]) are also being widely used in industry; for instance, there are more than 600 official appraisals on the Brazilian model created in 2005 [65]. To perform what is proposed in those models, software engineering approaches (methods, procedures, standards, tools, techniques, etc.) are applied. One can suppose that as software engineering practices are used, Human–Computer Interaction (HCI) approaches essential for the development of interactive systems are also used when necessary. Nevertheless, it is well-known that HCI approaches are not used in industry or are done so insufficiently [10], [48], [107].
Undoubtedly, HCI engineering is inherently related to software engineering whilst applying to the interactive system projects. Jokela and Lalli [63] point out, for instance, that several process areas from CMMI-DEV (Capability Maturity Model Integration for Development) [18] have a direct relationship with usability practices, and, therefore, HCI engineering. Helms et al. [52] argue that usability engineering and software engineering share common goals, such as: trying to understand customer and user needs; transforming needs into system requirements; designing to satisfy those requirements and testing to help assure their realization in the final product. Moreover, several works have discussed HCI life cycles and the integration of HCI and software engineering (SE) domains for perfecting / improving usable and useful systems [46], [62], [79], [81], [82], [83], [87], [97], [101], [102], [109], [112]. Considering that CMMI-DEV is widely used in industry, we believe that indicating which HCI approaches support the application of CMMI-DEV practices in the development of the interactive systems may favor a greater application of HCI issues in the industry. We considered any method, technique, standard or pattern for HCI to be an HCI approach. In this context, we raise the following question: what are the approaches that could concretely integrate CMMI-DEV process areas in interactive system development?
To answer this question, we have performed a study to identify which HCI approaches should support the engineering practices of CMMI-DEV in the development of interactive systems. Preliminary results were presented in [43], [44]. In [43], a work-in-progress paper for a conference on HCI; we presented a general view of the steps that we described to address this problem and some initial results. In [44] we presented general results for the Requirements Development area defined in CMMI-DEV.
This paper presents the complete study and its results in detail. To address the problem raised, we performed the following activities: (i) analysis of HCI literature and CMMI-DEV practices for engineering process areas (Requirements Development, Technical Solutions, Product Integration, Verification, and Validation); (ii) Validation and improvement of the HCI approaches with experts; (iii) analysis and synthesis of the HCI approaches, and (iv) Validation in practice. The main contribution of this paper, related to the existing literature is the proposition of HCI approaches for the practices of the five engineering process areas (Requirements Development, Technical Solution, Product Integration, Verification, and Validation) of CMMI-DEV validated by twenty HCI experts. The application of all these propositions in real projects is a long-term study. Working towards this goal, we present the first results related to some approaches proposed for Requirements Development.
In the next section and subsections, we briefly describe the main features of software process capability and maturity models and main related work. In Section 3, we present our research methodology, giving an overview of all decisions taken to perform our work. Sections 4–8 describe how we performed each phase of our research methodology. Then, in Section 9 we present a discussion of the threats to validity. Finally, in Section 10 we present our final remarks and some planned future works.
