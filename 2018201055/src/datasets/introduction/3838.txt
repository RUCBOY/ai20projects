Human problem-solving is complex and involves the adoption of different strategies when facing problems. A not unusual scenario involves the realisation that what is being addressed is actually a consequence, or effect, that has a cause. In order to permanently solve the problem, both cause and effect must be dealt with. In such scenarios, there are issues to be taken into account in the practical reasoning (Bratman, 1987), i.e. the process of deciding how to act. First, remediation actions may be performed in order to mitigate effects, before addressing the cause, which must also be dealt with; otherwise, effects will likely reappear. Second, the cause may be unknown and, in this case, this should be investigated so that the real problem can be identified and resolved. If causes remain unaddressed, effects may return even with greater impact.
There are many real-world situations that match the scenario described above. In computer science, different examples can be observed. An example is in the context of network resilience (Sterbenz et al., 2010), which is the ability to provide and maintain an acceptable level of service in the face of faults and challenges to normal operation (e.g. a malicious attack). When dealing with a distributed denial-of-service (DDoS) attack, network operators must minimise the number of users affected by the unavailability of the service provided by the infrastructure being attacked. At the same time, they must act towards the identification and isolation of the attack origin to have it permanently blocked (Schaeffer-Filho et al., 2012). Another example can be seen in self-healing systems (Breitgand, Goldstein, Henis, Shehory, & Weinsberg, 2007), which are software systems able to monitor, diagnose, analyse and heal their problems, and prevent them from reappearing. To automate software memory management, objects that are no longer used, but still referred to, in Java programs (loitering objects, a form of memory leak in Java) may be “paged”, in order to keep the system operational while the software is debugged to identify such objects (Goldstein, Shehory, & Weinsberg, 2007).
Although promising, all these approaches were individually analysed and implemented, thus being application-specific solutions. Furthermore, the actions of mitigating effects and searching for causes are all explicitly modelled and hard coded. Existing solutions can potentially support a more flexible implementation of these approaches by exploiting the use of autonomous software components, called agents. However, the reasoning towards the selection of remediation actions, and cause identification and resolution is still manual. The belief-desire-intention (BDI) architecture (Rao & Georgeff, 1995) is such a solution. This architecture provides such agents with a reasoning cycle that includes an option generation function, in which goals to identify and resolve causes can be generated, and a plan selection function, in which remediation plans (sequences of actions) can be selected because other plans may not prioritise the mitigation of effects. However, such functions are abstract in the BDI architecture, and must be customised in specific applications to provide the desired behaviour. In fact, there are many existing approaches that extend, adapt and customise the gaps of the BDI architecture (Faccin, Nunes, 2015, Nunes, Schaeffer-Filho, 2014, Singh, Sardina, Padgham, Airiau, 2010), but none are able to cope with the aforementioned scenario.
In this paper, we abstract from this described target scenario and propose a domain-independent extension of the BDI architecture that allows agents to autonomously select appropriate, possibly remediation, plans to solve a problem (i.e. achieve a goal) and deal with possible problem causes. The goal of our extension is not to serve as replacement of the traditional BDI architecture in agent development, but to automate the coordination of an agent’s actions in our target scenario. This approach thus promotes reuse across domain-dependent solutions, designed and implemented in an ad hoc way, and allows agents to flexibly decide the best action according to the current context, agent goals and preferences. Our BDI architecture extension includes a set of components to capture the required domain knowledge to allow agents to make such decisions. This knowledge is then used in a customised reasoning mechanism, which selects remediation plans, when needed, and generates goals to search and deal with problem causes. Our approach is evaluated by taking an existing network resilience scenario (Nunes, Schaeffer-Filho, 2014, Schaeffer-Filho, Smith, Mauthe, Hutchison, Yu, Fry, 2012), which is implemented in an application-specific way, and developing it with our approach. Results show that our approach is able to reproduce the behaviour in a domain-independent way. Moreover, an empirical evaluation shows that the performance is not compromised by postponing the practical reasoning process regarding remediation plans to runtime and the developers’ implementation effort is reduced. Our approach thus promotes software reuse in an important recurrent scenario, thus freeing developers from the complex reasoning to deal with critical cause-effect situations. Moreover, it is a flexible solution that chooses between remediation and definitive plans, depending on the current preferences and constraints.
In Section 2, we describe our problem by presenting an illustrative scenario that is used as a running example. We detail the elements comprising the extended BDI architecture in Section 3 and describe our customised reasoning mechanism in Section 4. Our approach evaluation is presented in Section 5. Finally, related work is discussed in Section 6, and conclusions are presented in Section 7.
