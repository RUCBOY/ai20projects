Malicious software, also known as malware, is a generic term for all software products that adversely affect computers. The damage incurred by malware has been recently increasing. For example, malware can attack automated teller machines (ATMs), causing significant loss [12]. Malware has been steadily growing in speed (rapidity of threats), number (growing threat landscape), and discrepancy (introduction of new methods) [15]. Malware developers constantly modify existing malware to avoid detection by antivirus systems. The conventional method to detect modified malware is to store all malware characteristics and detect new malware by matching the patterns of stored malware characteristics. The Symantec Intelligent organization stored 44 million new samples just in 2015 [1]. Automatic detection of malware is needed because storing all malware characteristics is very costly and inefficient.
The methods for malware detection have been extensively studied, but most of them use stored features of malware or detect malware based on several rules, which fail to detect zero-day attacks. Zero-day attacks are undisclosed attacks of computer software that hackers can exploit to adversely affect computer programs, data, or networks of computers. Zero-day attacks are a critical issue in the field of computer security, with detection of zero-day attacks being the highest priority of malware detection systems (MDSs). Because antivirus software cannot treat zero-day attacks, computers are more vulnerable to them compared with general malware. Research that focuses on zero-day attacks is ongoing [20], [2]. Typically, there are two approaches to detect malware of zero-day attacks [10]: One is to detect malware using the log obtained by executing malware directly in virtual environment, which requires time, high resource consumption, and has low scalability. The other is to detect malware using the preprocessed features from raw code, which has limitations in detecting particular variants of malware.
To mitigate both limitations, we propose a deep learning method to detect malware based on raw code without running the malware directly and to generate malware with arbitrarily modified features. We assume that zero-day attacks can be modeled by adding noise to existing malware data, and investigate the method for detecting zero-day attacks. Before generating the data directly, it is important to know the characteristics of the data. A deep autoencoder (DAE) can represent the features of data by unsupervised learning, where the decoder reconstructs the data compressed by the encoder. We exploit the decoder to generate the competitive new data for the generative adversarial network (GAN). Our main contribution is to devise a unique architecture by combining several deep learning methods of DAE, GAN, and transfer learning to construct the final malware detector that is robust to noise and zero-day attacks.
The remainder of this paper is organized as follows. Section 2 reviews the background of malware and the conventional malware detection techniques, and shows how these techniques differ from our proposal. The architecture and background of the proposed method, the model's validity, and finally the malware detection algorithms are presented in Section 3. In Section 4 we demonstrate the performance of the proposed method, compare it with conventional models, and visualize the intermediate outputs of the model. Some conclusions are discussed as well as the future works in Section 5.
