Recent studies  [1], [2] have estimated that around 1.5%–2.0% of the total energy consumption is consumed by data centers, and this energy demand is growing extremely fast due to the popularization of Internet services and distributed computing platforms such as clusters, grids, and clouds. Regarding the efficiency of data centers, studies have concluded that, in average, around 55% of the energy consumed in a data center is consumed by the computing system and the rest is consumed by the support system such as cooling, uninterrupted power supply, etc. For that reason, green cloud computing is essential for ensuring that the future growth of cloud computing is sustainable  [3].
There are several ways to reduce the energy consumed by an application when executed on a distributed platform: It includes the usage of low-power processor architectures or dynamic voltage frequency scaling (DVFS)  [4], re-design of algorithms using energy-efficient patterns in compilers  [5] or changing the scheduling policies for task-based applications on the available resources  [6]. Traditionally, scheduling techniques have tried to minimize the total execution time of an application(makespan—Cmax)  [7] without worrying about the energy consumed. However, there is a trade-off between energy consumed and the execution time, and sometimes increasing the performance for a faster execution implies a higher energy consumption.
The aim of our work is to offer resource providers and end-users more options for executing task-based applications in an energy conscious manner, giving the possibility of reducing energy consumption without a significant increase in total execution time or reducing the total execution time without a significant increase in energy consumption. In this paper, we present an energy-aware scheduling system for task-based applications. To decide which is the best scheduling solution according to the energy consumed, we propose a model for estimating the energy consumed by the application for a given application and a resource power consumption profile.
Since task allocation on distributed computing resources is a well known NP-hard problem in the general form  [8], due to the time limitation required for run-time schedulers, the implementation of large-time optimization algorithms is not suitable. For a real time scheduler it is convenient to develop heuristic techniques for sub-optimal solutions, in order to build a scheduling algorithm that runs in polynomial-time without performing exhaustive search. Therefore, we propose the use of a multi-heuristic resource allocation (MHRA) that is essentially a faster local search algorithm for partial solutions. The algorithm is divided into two phases: the first phase combines a set of heuristic rules for ranking an eligible group of parallel tasks for a given Direct Acyclic Graph (DAG), based on the amount of data transfers, number of task predecessors or successors and execution time. The second phase combines a set of importance factors for the resource allocation algorithm that are used to determine which is the best position in the cloud for a specific task that minimizes energy (Eflow) and makespan (Cmax). The algorithm provides good real-time scheduling solutions in an affordable time scale.
The proposed scheduler has been designed to be applied to the COMP Superscalar (COMPSs) framework  [9], [10]. It provides an infrastructure-agnostic task-based programming model, which facilitates the development of parallel applications in distributed computing platforms. Developers can program their applications in a sequential fashion and without caring about the details of the underlying infrastructure. They just need to identify the tasks, which are the methods of the applications, to be executed in the distributed platform. At run-time, COMPSs detects data dependencies between tasks creating a DAG. Once the DAG is created, the COMPSs runtime will use the energy-aware scheduler for allocating and executing the tasks on the available computing resources in order to minimize energy or makespan.
The scheduler has been tested with different kinds of DAGs generated at random as well as on real COMPSs applications: embarrassingly parallel (EB), parallel reduction (PR), parallel increase/reduction (PIR), matrix multiplication (MT). Using three different size instances and importance factors. We have evaluated which combination of MHRA provides a better solution and energy savings and the execution time in each case, and the effect on the cloud elasticity. Moreover, we have also evaluated the introduced overhead by measuring the time for getting the scheduling solutions for a different number of tasks, kinds of DAG, and resources, concluding that it is suitable for run-time scheduling.
The rest of the paper is organized as follows: First, Section  2 presents the related work in energy-aware scheduling and Section  3 gives an overview of the COMPSs framework. Afterwards, Section  4 formulates the energy-aware scheduling problem, and the model used to estimate the application energy consumption, the profiling methodology and the multi-heuristic resource allocation algorithm are presented in Sections  5 Energy model, 6 Power profiling, 7 Multi-heuristic resource allocation, respectively. In Section  8, we present the experiments performed to evaluate the proposed scheduler. Finally, Section  9 draws the conclusions and proposes guidelines for future work.
