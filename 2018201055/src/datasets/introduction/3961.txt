Notwithstanding the importance of learning computer programming [1], opinions remain divided on the extent to which people should be programmers [2], and how this new literacy should be positioned against other demanding skills and expertise in the digital world. Computational thinking, i.e., the basic reasoning and problem-solving required for learning how to program, presents particular challenges to novice learners [3], [4], [5], [6], for instance as a result of the difficulties to connect new programming concepts to analogies from domains the learner is already familiar with (e.g. [7], [8]). Domain-related challenges as well as the need for various learning contexts (e.g., because of introducing programming in the curriculum of young pupils [1]), have led to a quest for effective ways of teaching and learning computer programming. It is in this context that educational games have been suggested as providing promising potential [9], [10].
To date, however, we observe that many game design initiatives have been reporting on this potential as if programming games would be one homogenous category of easy and playful ways to acquire programming skills. As examples of this rhetoric, consider the way these games are presented to learners on game websites (e.g. “Making programming child’s play” [11]). These types of discourse suggest that the games’ effectiveness and use is generalizable to any learning context. But this contrasts with observations from research on education that have highlighted the influence of characteristics of the learner context (e.g., learner is alone or not [12]) or organizational context (e.g., support is available or not [13]) on learning. Consequently, such findings show that the design of both instructional (i.e., learning-related) and recreational (i.e., game-related) aspects of educational games is important when considering their context-of-use.
With this article, we address this concern by systematically unravelling the instructional and recreational design of 19 existing computer-programming games. Our analysis will result in the classification of programming games in relation to (1) their instructional affordances and (2) the implementation of their game attributes, focused on playing, programming, or both. With this theoretically informed mapping of the variation in design strategies along the axes of both instruction and recreation, we aim to provide suggestions for the context-of-use of particular types of programming games.
