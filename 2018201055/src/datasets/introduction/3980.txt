Program execution analysis uncovers what has run on a system and is often meaningful effort to reveal user activities performed on the system. By analyzing program execution artifacts, forensic investigators can know what programs were installed on the system and their execution history, even the evidence of deleted programs. The artifacts of program executions are created and stored at various locations in hard disk, which are further utilized by OS for providing improved user experience. However, the good part while performing program execution analysis is that there are numerous artifacts created by Windows OS that record the traces of program executions. Undoubtedly, these artifacts are very useful in forensic investigations, perpetrators of the crimes are nowadays more forensic-aware than ever and take preventive measures to limit the evidence of program executions. The prevalent use of anti-forensic tools and techniques has become threat to digital forensic researchers, as they aim to delete or limit the quantity and quality of digital evidence (Conlan et al, 2016, Garfinkel, 2007). The popular privacy protection tool, CCleaner, when run with advanced options, deletes Prefetch, RunMRU and UserAssist key. Moreover, some program execution artifacts would provide the information about programs name and temporal values (for example, created or modified timestamp), while others would provide indications of the user who launched these programs. Hence, it is desirable to analyze as many as sources of program executions to unravel the story what has happened on the system.
Program execution analysis has relevance both for forensic and malware analysts. A forensic analyst can use this technique for numerous purposes, such as detection of anti-forensic tools, construction of activity timelines, user profiling, user-process mapping, detection of connected removable media devices, and more. A malware analyst can perform analysis of program execution artifacts to find malware on a compromised system. Nowadays, analysts are mostly confronted with the computer systems infected with evil programs, such as malware, ransomware etc. These programs are designed to remain hidden whilst accomplishing the task for which they are designed. Some malware programs erase or limit the traces of their executions by using a self-deleting batch file method that allows an executable file to delete itself whilst executing. But the catch is, the malware program has to run on the system at least once before performing the intended task. To detect such programs, analysts can use anti-virus tools, examine the memory, or follow triaging techniques. Regardless of the technique used, program execution analysis, however, stands above the rest in analyzing malware programs on the infected system.
This study is an effort for putting various artifacts of program executions into “buckets”, so that forensic analysts can tailor their first step to the examination, possibly by knowing the forensic capability of these artifacts. The study first presents a taxonomy of various program execution artifacts. Then we focus on the forensic value of eleven program executions artifacts: Prefetch, Jump Lists, Shortcut (LNK), UserAssist, Amcache.hve, IconCache.db, AppCompatFlags, AppCompatCache, RunMRU, MuiCache, and SRUDB.dat. The location of these artifacts and their underlying structure in various versions of Windows is studied and compared. To determine the evidence of program executions, numerous experiments are conducted while running the applications from various sources, such as external media device and Windows Store. In addition, the effects of running various anti-forensic tools on these artifacts are observed and presented. For the sake of completeness of the research, the forensic significance of the considered program execution artifacts is also highlighted.
The remainder of the paper is organized as follows. The next section presents the location of various program executions artifacts, their underlying structure and the type of information recorded. Section 3 outlines the research methodology used, details of experiments devised, and the software tools required to perform the experiments. Section 4 describes the results and forensic comparison of the considered sources. The next section provides the forensic significance of program execution analysis. Finally, in the last section, conclusions and suggestions for future study are outlined.
