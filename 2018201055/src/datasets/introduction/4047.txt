A computer game is a software application, which primarily targets to entertain its users. The user of the computer game application interacts with graphical objects that simulate daily life/imaginary characters that are integral part of a background story to follow as the game progress. Although wide spread use of computer game is for entertaining purpose, in the recent past the use of computer game for educational objectives is on the rise. Taylor et al. [1] conclude that the computer games can assist with purposeful human activity, as well as being played purely for recreational purposes. A computer game operates on various platforms, such as personal computers, game consoles, tablets, mobile phones, etc. Nowadays, computer game development is a billion dollar industry. Many companies and developers have significant contributions in the field of computer game development. Nayak [2] finds that game industry earned three times more revenue than any other software product in 2012. Schaefer and Warren [3] discover that today the computer gaming industry has become bigger than the music and film industries. Ustunel et al. [4] observes that game has a quantifiable outcome that can be either positive or negative. Kanode and Haddad [5] determine that during preproduction phase of game development the game designers develop prototypes and test them to evaluate the fun elements for the game. In the game development lifecycle, the emphasis is to evaluate the user experiences and using the feedback to drive design iterations [6]. Practitioners and researchers argue that computer game development process have some differences in comparison to the core traditional software development process. Callele et al. [7] highlights the necessities to extend the traditional techniques of requirements engineering to support the creative process of the electronic game development. Gold [8] also demonstrates that computer games development is different from other types of software development. Similar to other computer applications, the software design of a computer game application is an important piece of artifact. The internal design helps in managing the complexity of the game application, and facilitates in achieving better quality. Shorter life span is a slightly different approach to understand the difference between a computer game and any other software development application. The computer game is in use as long as it maintains the interests of the user community. The underline truth is that computer game application does not solve the problem of the user as the traditional counterpart do; it strives to entertain people. In the absence of real functional requirements for any computer game, the job of the software designer is more demanding. The game development organizations maintain their objective to create a piece of software application that is more engaging and provides fun. The pressure to shorten the development time to capture major portion of the market segments always dictates the vital design decisions.
The process of computer game development envisages contributions from various fields of knowledge, such as computer science, visual arts, sociology, psychology, education, business, etc. The composition of development team of computer game accommodates people from these varying fields of knowledge. This diversification distinguishes it from a traditional software development team. According to Crooks [9], creating the computer games is very complicated task that requires the involvement of specialized and extremely skilled professionals from a wide spectrum area of computer sciences. Petrillo et al. [10] observe that successful game projects count on highly specialized multidisciplinary teams, having simultaneously software developers, designers, musicians, scriptwriters and many other professionals. Ampatzoglou and Chatzigeorgiou [11] also reinforce that in games, the development group consists of people with different fields of expertise. Kanev and Sugiyama [12] find that teams consisting of several specialists, work together to discover new game ideas, characters design, modeling, evaluation and testing of computer games. Prensky [13] divides the fundamental components of a computer game into many parts such as rules, goals and objectives, outcomes and feedback, conflict/competition/challenge/opposition, interaction, and representation or story.
The OSS has been gaining momentum since the large organizations such as Google, IBM, and Nokia joined the club. It has become a popular source of demonstrating programming capabilities over time, it has become a code socialization avenue. Unlike the traditional software, in which source code is not available to the end user and cost is associated with the product, the OSS is open and free. According to Scacchi [14], the open source software approach lets communities of like-minded participants develop software systems and the participants often play different roles, such as core developer, module owner, code contributor, code repository administrator, reviewer, or end user. The quality of the OSS product has been a key concern. Bahamdain [15] finds that high-quality OSS depends on having a large sustainable community to develop code rapidly, to identify bugs efficiently, to debug the code effectively, and to build new features. Some examples of such high-quality OSS are Linux, Apache Web Server, Mozilla Firefox, etc. According to Sowe et al. [16], the open source communities are growing in computer game development. Asundi et al. [17] finds that there is very little doubt that the process of developing free, useful and complex software initiated by the OSS movement has made customers better off. Schaefer and Warren [3] conclude that following good software design and coding practices is essential to the success of the game. Ampatzoglou and Stamelos [18] suggest that software engineering for computer games is a field that embraces many techniques and methods from conventional software engineering and adapts them to fit the specific requirements of game development. The essential characteristic of being a creative process demands strong collaboration among the team members of the game development project, which is a characteristic of the OSS development environment.
Scacchi [14], surveying the Free and OSS development practices in computer game community observes that these projects do not adhere to traditional software engineering life-cycle principles from modern textbooks and rely on lean electronic communication media, virtual project management, and version management mechanisms to coordinate globally dispersed development efforts. Source code reuse is considered more intense in OSS development as compared to commercial/closed source software [19]. Paschali et al. [20] empirically explore the opportunity to reuse components from existing OSS game projects and results of the study suggests that specific game genres offer more reuse opportunities than others, and that most components are related to scenario and characters. Zyda [21] finds that developers need an open source game engine that includes a development toolset as widely available and utilized as Linux and would make feasible exploring many other directions, including the modeling and simulation of computer characters, story, and human emotion. Fritsch and Kada [22] find that certain portions or sometimes even the whole game engine is released as open source software, these engines can be extended to build more serious applications at very little costs. According to Guo et al. [23], the game engines are open-source and it is therefore possible for users to extend the application of game technologies to other fields. Guilfoyle [24], observes that the open-source code of game technology allows end users to create new functions independently with ease.
One of the main issues with reporting empirical structural analysis of the software code in the closed software environment is non-availability of the code. Most of such analysis is an in-house activity and organizations are generally reluctant to share the results. In case of OSS, the code is available to analyze, which opens up a huge opportunity of knowledge generation. Harrison [25] emphasizes the need for empirical studies of open source by the software engineering community. According to Stamelos et al. [26], the core of open source activities happens at the code level, therefore, it is reasonable to focus at measuring and assessing the resulting code. The OSS is gaining plenty of attention from larger companies and has become a source of major code repository. Rapid application development requires reuse of the code. A quantitative analysis of the quality of OSS modules provides greater confidence in reuse of these modules. There are studies that deal with evaluating the quality of OSS software projects, mainly targeting the well-known and large projects [27], that include Linux, Apache, Mozilla Firefox, etc., whereas, most of the OSS projects are small [28]. This sets the initial motivation of this work to target evaluating the quality assessment of relatively small projects. The computer game development has a lot of potential to gain benefits from OSS development environment and code repositories. This sets the motivation to a much narrower scope to gain benefits in domain specific knowledge.
Software quality metrics are measures of the quality of software based on number of factors that deals with software size and complexity. ISO 9126 model lists six of these factors as functionality, reliability, usability, maintainability, portability and efficiency. In order to keep this study within a limited scope, we select three factors of correctness, reliability and maintainability. The presented rationale to select these three factors is to cover the important phases of software development such as coding, testing and maintenance and to narrow down the scope within the coding perspectives. However, this work also recognizes the importance of other three quality factors of portability, usability and efficiency. These three factors directly deal with the game design and aesthetics, fundamental characteristics of computer game application. In the future work, we would like to cover these three quality factors of the ISO 9126 model. Correctness is one of the important quality factors, which deals with the confidence in the functionality that the product is offering. Reliability points out lower probability of bugs in the software product. Maintainability reflects the ability to make changes in the code. Up to what extent we have the confidence that the code of the OSS computer game application is correct. Are the OSS computer games easy to maintain? Can we say OSS computer games are reliable? This study aims to explore the answers to these questions. In order to explore these answers, we study the internal design complexity of OSS computer game projects. More precisely, in this study we empirically analyze the internal code attributes such as number of operators, operands, code difficulty level, likelihood of bugs, method complexity, etc., of the OSS computer game applications and evaluate quantitatively the quality criteria of correctness, reliability and maintainability.
