To manage legitimate access to data, functionality, services, and resources, researchers employ various access control policies. At present, role-based access control (RBAC) is the most preferred choice of many leading organizations due to minimal overhead when user assigned permissions are frequently analysed and updated. The idea of RBAC [1] lies in creating roles, which further incorporates a set of permissions. Each role is suitable for a particular task, and thus all permissions necessary to carry this task are known as permission-role assignments. The users are then assigned a set of roles known as user-role assignments depending on the tasks to be performed. Fig. 1 illustrates user-role assignments (UA) and permission-role assignments (PA) in RBAC for completing a particular task by the user. Role engineering, particularly role mining, is the most widely used and preferred choice of researchers for successful RBAC adoption in any enterprise [2].
In RBAC, due to the dynamic nature of the business processes, users may access only a limited number of roles from the set of assigned roles. In such a case, role assignments for users may turn obsolete, which means that the corresponding UA is not longer required at this point of time [2]. Similarly, role assignments for users may need to be refurbished, i.e., they might be obsolete at some time in the past, but are required at this point of time. Therein lies the biggest problem of RBAC as to how exactly a security administrator can dynamically maintain role assignments by optimizing the UA? Since the main principle of RBAC lies in providing the least privilege principle (LPP) [3], which means that a user is not given more privileges (i.e., role) than necessary to perform a job. In role mining [4], [5] and role refinement [6], [7] techniques, the authors have optimized the UA by refining the existing role set. Such approaches are used to optimize the UA at the system level, i.e., the role requirement is checked among all the users. Therefore, by determining whether to add or delete the UA at the system level does not necessarily optimize the UA at the user level.
As far as is known, to date, no role recommendation model is available, which is integrated with RBAC to optimize the UA at the user level. In this paper, the following three real-world scenarios are discussed and analysed where the proposed system is a good choice for commercial applications. The proposed system was developed using the Amazon access sample dataset [8], and successfully optimized the UA based on the recently accessed permissions. The performance of the proposed system was also evaluated by comparing it with the existing models using the synthetic datasets proposed in [9].
Scenario 1: User A is involved in various projects of an organization. Due to the completion of the project or other reasons, user A may not use a certain set of roles and the corresponding UA now becomes obsolete.
Scenario 2: When user A wants to access a certain set of roles, which were revoked at some time in the past but is now required, then the corresponding UA needs to be refurbished by considering it as an emergency requirement.Download : Download high-res image (43KB)Download : Download full-size imageFig. 1. Users access permissions through roles.
Scenario 3: User A is given privileges for a certain period of time, after which the user needs to request for extension of his privileges.
In leading cloud platforms such as Microsoft Azure, the need of optimizing UA in deploying the applications was investigated. Consider Azure resource manager [10], which provides fine-grained access control of resources using a built-in RBAC system. Seventy built-in roles can be assigned to users to provide restricted access. Such predefined roles are assigned with the available constant number of resources that cannot be customized. For example, in Azure, there exist roles such as MonitoringReader and LogAnalyticsContributor, which can access and monitor all the log activities, i.e., user behaviour/access pattern. Hence, many organizations use these built-in roles while deploying the RBAC enabled applications in Azure Cloud. Meanwhile, organizations need to pay for the cloud service provider (CSP) based on the usage of roles, rather than the usage of permissions. Due to the dynamic nature of business processes, users may not use all the resources/permissions, which are assigned through the roles. Since the PA cannot be altered, the only option to make effective pricing/utility computing for organizations is to optimize the UA based on the roles.
In this paper, a solution is proposed to optimize the UA in the RBAC system. The solutions are presented in two phases: (1) extraction of user behaviour pattern from the system usage log data, and (2) matching the users from this pattern to recommend the roles by checking whether the UA is obsolete or whether the UA needs to be retained or refurbished. The Hidden Markov model (HMM) represented as a dynamic Bayesian network was used to carry out the role recommendation. This is said to be role recommender, which recommends the roles aligned with the user privileges to optimize the UA, which can be done by integrating with the RBAC. Here, it is represent it as Role recommender-RBAC (R-RBAC) on this paper. For example, in RBAC enabled applications, roles as well as its assignments to users and permissions have a predefined period beyond which it expires. However, for some users, it may not be necessary to have such role assignments longer than required. Therefore, the proposed system monitors the access pattern of the users and automatically revokes the UA before the fixed deadline, rather than waiting for the deadline or for manual revoking operation by the security administrator. The refined UA by R-RBAC in the cloud applications optimizes the built-in roles assigned to the users, which in turn provides cost optimization for organizations. The services provided on hosting R-RBAC in cloud applications is referred to as Role-Assignment-as-a-Service (RAaaS).
The optimal solution in UA means the roles assigned to the user must satisfy the LPP. Since optimizing UA by maintaining the LPP is proved to be NP-hard [6], a good approximation is provided to the optimal solution in contrast to the state-of-the-art. Updating the UA by role recommendation has a direct impact on meeting the principle of least privilege. So, the user as well as the security administrator will always have a privilege to request a new set of recommended roles by the R-RBAC, if the roles assigned to the user does not satisfy the principle of least privilege.
Based on the above discussions, the following specific contributions are listed out.

1.Role recommendation model for the RBAC system (R-RBAC) recommends the roles to optimize the UA by revoking obsolete UA, and refurbishing and retaining necessary UA based on user behaviour pattern. It is shown that the R-RBAC recommends the roles on Amazon access sample dataset [8] to optimize the UA by retaining an average of 57% of roles when 50% of UA is obsolete, and restoring an average of 28% of roles when 10% of UA needs refurbishment. The consequences of such optimization helps cloud applications to optimize the cost of built-in roles, which is referred to as Role-Assignment-as-a-Service.2.The R-RBAC recommends the roles for each user to optimize the UA at the user-level, unlike the existing models which optimize the UA at the system level. The efficiency of the R-RBAC on size and speed metrics can be seen up to 32% and 50% respectively, when compared with Least Privilege User-Role Assignment Problem [6] using the synthetic datasets.
The rest of the paper is organized as follows: Section 2 discuss the related works. In Section 3, the proposed methodology is provided. In Section 4, the R-RBAC analysis is presented. In Section 5, the experimental results are shown, and finally, Section 6 concludes the paper.
