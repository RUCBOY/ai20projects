System-level simulation is a key activity in design of heterogeneous embedded and cyber-physical systems (CPSs). Validation of system models by efficient simulation in early design phases reduces the cost of longer design iterations caused by late detection of bugs and model flaws. Due to the increasing complexity of CPSs, comprehensive and efficient simulation of systems for different scenarios demands a considerably high computation power. Nowadays, parallel and distributed (P&D) architectures are the primary means to improve the performance of workstation computers and high-performance computing (HPC) clusters. Therefore, CPS design frameworks need to support P&D simulation of system models. It is highly desired to perform P&D simulation automatic, transparent to the designer, and without demanding additional modeling effort.
The model-based design (MBD) [1] paradigm promotes the usage of models as the core entity in different stages of a design flow, for various design activities such as validation, formal verification, performance analysis, and synthesis. CPS design frameworks, tools, and languages are proposed following this paradigm [[2], [3], [4], [5], [6], [7]]. A few techniques provide basic facilities to explicitly construct a parallel simulation model of a system in these frameworks and some others support automatic parallel simulation of the models for limited parts of a CPS model [[8], [9], [10], [11], [12]].
However, generic P&D execution of models is typically based on modeling languages and formalisms which only support system simulation. Such models are developed using lower-level libraries such as Message Passing Interface (MPI), compiler directives such as Open Multi-Processing (OpenMP), or a higher-level parallel simulation environment (e.g., Parsec [13]) and the compiled model is run on a P&D platform. Due to diverging requirements of these models and the models used for analysis and synthesis, separate models need to be developed for different design activities. Developing several models of the same system is inconvenient and the overhead of maintaining the consistency among them is needed to avoid unexpected semantic mismatches. Therefore, it is highly desired to have a canonical CPS model which either directly allows P&D simulation and also analysis and synthesis, or supports automatic and semantic-preserving transformations to generate customized models suitable for different design activities. An important requirement is that P&D simulation of CPSs must be performed coherently for all subsystems, which are usually modeled using a variety of computational models [14]. Consequently, most of the available P&D simulation approaches, which are tailored to a single computational model, are not suitable for CPS in general. Based on our survey of the available literature, we were unable to find a modeling and design framework which fully addresses these key requirements.
By extending our previous work [15], we propose an automated flow for construction of P&D simulation models from an executable model which supports both sequential simulation and also formal analysis and synthesis (Fig. 1). A key enabler of our approach is a modeling formalism which is capable of modeling heterogeneous embedded and CPSs via specialized models of computation (MoCs) with a uniform underlying execution semantics. A central aspect of our flow is introspection, the capability of the initial specification model to export its own structure as a generic graph-based intermediate representation (IR), powerful enough to apply various analysis and synthesis design activities. As a first step, the specification model is executed sequentially, only long enough to characterize its workload and then, a partitioning problem is formulated to cluster the IR among a number of sub-simulation models and finally generate a P&D simulation model. Due to the elegant coherent representation of heterogeneous CPS models as a single IR in our framework, we were able to adopt the state-of-the-art graph partitioning techniques for this purpose. In addition, to support diverge requirements of P&D simulation of CPS models, we also propose a constraint-based formulation of the above partitioning problem which allows additional constraints to be added for models of a specific domain. The output of the graph partitioning problem is used to transform the sequential model to a P&D model and generate code for a simulation cluster. Especial “sender” and “receiver” processes with carefully defined semantics (Presented in Section 4) are placed on partition cuts to establish communication and synchronization among cluster nodes without changing the semantics of the original model.Download : Download high-res image (381KB)Download : Download full-size imageFig. 1. Overview of the automated P&D CPS simulation flow. The blue boxes represent the contributions of this work. (For interpretation of the references to color in this figure legend, the reader is referred to the Web version of this article.)
We have applied our method to a number of real-world case studies and as well as synthetic—but representative—system models to demonstrate its applicability to larger CPS models. These experiments show that our method can generate platform-optimized parallel models suitable for P&D simulation of CPS models with notable speed-ups, while satisfying the comprehensiveness and automatism requirements.
To summarize, as a development on top of our previous work [15], we present
●an extension of a formal CPS modeling framework with new elements that enable P&D simulations;●a technique to adopt well-studied graph partitioning algorithms for parallel simulation of CPSs on homogeneous and heterogeneous architectures;●a flexible constraint programming (CP)-based formulation of the model partitioning problem, adaptable to particularities of CPSs; and●an automated flow, implemented as a tool, for generation of parallel simulation models from sequential executable specifications, publicly available online.
