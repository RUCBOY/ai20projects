Over the past two decades, the use of computational approaches to investigate social systems, including organizational and behavioural research has progressed from mere quantitative data analysis to one that complements traditional social science techniques through the use of advanced techniques in modelling and simulation. The techniques used within computational social science have evolved from mathematical approaches that utilize deterministic or stochastic equations, through to computational modelling approaches such as agent-based modelling and simulation [1], [2]. An advantage of these computational modelling approaches is the ability to fully control the underlying mechanistic component interactions of the model, thus once a computational model is established, quick studies of the effects of changes to the elements and associated parameter values can be seen through equation-solving or simulation. As such, simulation-based experimental results from a well engineered model are directly related to the level of abstraction and assumptions made during model design and development. This provides a firm basis for testing hypotheses on the mechanisms behind social behaviours and dynamics than traditional approaches such as participant observations or action research, where the unseen variables/factors can introduce additional complexity and uncertainty, which limits our ability to translate interpretations of observational/qualitative results to the real-world system.
Real-world systems are complex, with a range of system behaviours, properties and characteristics that emerge from the low-level interactions of a highly connected set of system components that function through temporal and spatial dimensions. One of the main strengths of the systems approach to investigating complex systems, is that it focuses on three key properties when modelling the systems: 1) system structures, 2) system dynamics, and 3) system control [3]. Indeed, previous discussions around Agent-Based Modelling and Simulation (ABMS) advise that it can be used to test working theories of the underlying mechanics of component interactions within systems and their resulting dynamics [4], [5]. As such, we believe that ABMS is the preferred approach to facilitate the micro-to-macro mapping of complex dynamical systems, in particular, social systems [6]. This is performed through altering the way in which agent interactions occur, or relaxing of assumptions at the individual agent-level, in order to investigate the emergence of system-level behaviours at the system-level. We therefore believe that ABMS provides a low-cost computational approach for developing hypotheses of the real-world system. With ABMS having recently become accepted as a scientific instrument for investigation [7], it is now imperative that agent-based models (ABMs) adhere to the scientific method through a principled approach to their design, development and use, to ensure they are fit-for-purpose [4].
Technology advances in hardware architecture, data storage and processing speed over the past twenty years has encouraged the development of new simulation frameworks that can handle increasingly complex computational models. With respect to ABMS, this has resulted in the development of a number of frameworks aimed at either subject matter experts or novice modellers, which use graphical user interfaces, or experienced computational modellers that are comfortable with command line terminals, a range of basic programming languages and shell scripting. A relatively new ABMS framework that falls in the latter category is the Flexible Large-scale Agent-based Modelling Environment (FLAME). Within this study we have used FLAME to model the development and propagation of conflict within a large multi-partner enterprise system implementation.
This manuscript provides an account of our experiences in using FLAME, with particular reference to a number of it’s strengths and weaknesses with respect to: ABM design; ABM development; constraints due to its underlying technical architecture; and performance. In particular, we highlight: the ease of model design for experienced computational modellers who are familiar with object-oriented programming and the Unified Modelling Language (UML); and the ease of model development for experienced computational modellers who are comfortable with the logic behind UML State Transition diagrams. In addition, we discuss a number of significant constraints of FLAME due to the underlying architecture, such as: issues when setting the Pseudo-Random Number Generator seed value; the inability to send messages between simulation time-steps; the inability to use global mutable parameters; performance challenges due to the I/O rate-limiting characteristics and the need for significant fast storage allocation to accommodate realistic simulations of social systems. The manuscript is structured as follows: Section 2 provides an overview of the major concepts that contribute to the theory behind our study; Section 3 discusses the case study; Section 4 provides an account of our user experiences when using FLAME to model the case study; Section 5 is the discussion section; and Section 6 provides our conclusions.
