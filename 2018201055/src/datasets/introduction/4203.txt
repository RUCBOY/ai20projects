In many scientific disciplines such as applied mathematics, engineering disciplines, physics, chemistry, computer science, biology, astronomy, geology, as well as many other fields of human activities, the solution to a lot of complex problems had to wait for the development of computer hardware and software to reach a more advanced level. Many difficult problems remained unsolved due to the lack of powerful hardware and advanced and sophisticated software. As commented in [1], “at the beginning of the 21st century the rapid development of computer power and accessibility, computer multi-precision arithmetics and symbolic computation enabled the construction, testing and analysis of very efficient numerical algorithms, even confirmation of analytically derived results.” Symbolic computation has successfully substituted lengthy manual calculation with computer-based computation and manipulation. In particular, in numerical mathematics further development of new algorithms of higher efficiency and higher accuracy has become possible. In this paper we concentrate on methods and procedures for the construction, analysis and practical application of algorithms for solving nonlinear equations with the support of symbolic computation. We emphasize that the construction of presented root-solvers would be hardly feasible and most likely impossible without the use of this specific computer software.
Symbolic computation (often called computer algebra systems) for solving mathematical problems deals with mathematical expressions and other mathematical objects, even when these expressions contain variables in a general form such as f(a, b, c, ...), where a, b, c are not numerical values and f need not be given explicitly. Among many manipulations, this specific software enables automatic simplification of expressions, differentiation, integration, polynomial manipulations and even exact computation, treating the mentioned variables as symbols. The interested reader is referred to the books by Cohen [2] and Beiley et al. [3] for more details on symbolic computation and its applications.
Another tool for comparison and analysis of root-finding algorithms, presented in this paper, belongs to the area of computer graphics. It provides a deep and fruitful insight into visualization of approximating function zeros using basins of attraction, see, e.g. [4] and [5]. Such approach dramatically improves the quality estimation of iterative methods concerning areas of convergence. Combined with the study of computational efficiency of root-finding methods, it leads to considerably better understanding of iterative processes.
Today, mathematicians and computer scientists carry out sophisticated mathematical operations employing powerful computer machines supported by the modern computer algebra systems such as Mathematica, Maple, Axiom, GAP, Maxima, Sage and SymPy. These computer algebra systems, which enable both symbolic computation and a dynamic study using basins of attraction, are available on Windows, Mac OS X and Linux.
There is a vast number of papers devoted to iterative methods for finding multiple zeros, see, e.g., [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17]. In this paper we are concerned with generating iterative methods of higher order for finding approximations to multiple roots of nonlinear equations. For this purpose, we use a suitable generating recurrence formula for the construction of an iterative method of order n+1 starting from a known iterative method of order n. In this process there appear the derivative of complicated and lengthy mathematical expressions and necessary simplifications. For this reason, we were forced to employ symbolic computation through several programs written in computer algebra system Mathematica. Our attention was restricted to the two families of iterative processes for approximating multiple zeros: Laguerre’s type methods and Traub–Gander’s methods, both of the cubic convergence. The application of the mentioned generating recurrence relation to these families gives two new families of order four. In addition, in Section 3 it is shown that there is a connection between the Laguerre family and the Traub–Gander family. In this way we derive some new fourth order methods for multiple zeros.
Convergence properties of the derived methods are demonstrated in Section 4 by four numerical examples. In Section 5 we use basins of attraction to study and compare the presented iterative methods as a function of starting points. Besides useful data about CPU time and average number of iterations for 360,000 points belonging to a square, a visual insight into convergence behavior of the tested methods was enabled in this way. There is also an Appendix which contains a complete program written in Mathematica for plotting basins of attraction and providing useful information on iteration process. We consider that this program will be of benefit to the readers since complete programs written in Mathematica are very seldom presented in the literature.
