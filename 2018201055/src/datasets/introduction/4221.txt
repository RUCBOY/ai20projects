In 1961, Feynman (1961) gave a visionary notion concerning of the construction of submicroscopic computer. Although remarkable progress has been made in computer miniaturization, the goal has not been achieved yet. Scientists rank computational problems in three categories: easy, hard and incomputable (Ouyang et al., 1997a). One of the major opinions of computer science in the understanding is that many important computational problems are NP-complete and there are unlikely to have efficient algorithms to fleetly solve the problems. To find more efficient algorithms is a hot spot of research. In 1994, Adleman (1994) firstly proved that DNA can be used to solve computationally difficult problems, such as the Directed Hamiltonian Path Problem, and demonstrated the strong parallel computing power of DNA computing. The parallelism implies DNA computers may solve more complex problems such as NP-complete problems in linear scale growth time, comparing with the exponential growth time required by electronic computers. Lipton (1995) confirmed that Adleman's method can be used to solve another kind of NP-complete problem (the satisfiability problem). DNA computing, as an interdisciplinary science using DNA biotechnologies to solve complex problems of computational mathematics and optimization, has a wide application prospect in handling scabrous problems. In recent years, DNA computation has received considerable interest from researchers. Many typical biological computing models, such as Adleman-Lipton model (Adleman, 1994, Lipton, 1995), the sticker model (Roweis et al., 1998), the restriction enzyme model (Ouyang et al., 1997b), the self-assembly model (Winfree et al., 1998), the hairpin model (Sakamoto et al., 2000) and the surface-based model (Xiao et al., 2005) have already been proposed and built. Based on previous computing models, lots of DNA algorithms and procedures have been executed to solve intractable NP-complete problems (Li et al., 2006, Xiao et al., 2006, Wang et al., 2008, Wang et al., 2013, Wang et al., 2014, Wang et al., 2015a, Guo et al., 2005, Chang et al., 2012, Chang et al., 2008, Chang et al., 2014, Chang and Guo, 2003, Liu et al., 2010).
The task scheduling problem in parallel distributed computing system is a famous NP-complete problem (Garey and Johnson, 1979) that attracts a lot of attention, and it is considered as one kind of most challenging problems in field of parallel computing and optimization. Based on determined individuals-jobs time consumption matrix, the problem arranges n jobs to m individuals and finds minimum execution time of the last finished individual. This problem can be quite computationally complicated because there are lots of possible arrangements (mn kinds) for task scheduling problem. Due to the large number of feasible solutions, the problem is impractical to be solved for large scale by checking all possible arrangements. So far, several different approaches have been proposed in literature to solve it without listing technique. Partial algorithms are as follows: using of list scheduling algorithms (Daoud and Kharma, 2008), clustering algorithms (Kianzad and Bhattacharyya, 2006), duplication-based algorithms (Bozdag et al., 2009), Genetic algorithms (Omara and Arafa, 2010), hybrid heuristic-genetic algorithm (Daouda and Kharma, 2011, Nayak et al., 2012, Chitra et al., 2011) and Bayesian optimization algorithm (Yang et al., 2011). The task scheduling problem, with the calculation expansion of the scale, becomes more and more difficult and unrealistic to be solved by the silicon-based computer algorithm. On the other hand, task scheduling problem is different to one-dimensional element distribution problems and path search problems, which are mainly concerning problems of DNA computing, such as the maximum cut problem (Xiao et al., 2005), the vertex cover problem (Chang and Guo, 2003), minimum bisection problem (Liu et al., 2010), traveling salesman problem (Wang et al., 2015a), the maximum clique problem (Ouyang et al., 1997a, Ouyang et al., 1997b, Majid Darehmiraki, 2009), shortest path problem (Yamamura et al., 2002), and so on. But the task scheduling problem is two-dimensional array assignment problem, which will be faced with the problem of how to represent and manipulate the data elements in two-dimensional matrix. Meanwhile, it is also different from the general two-dimensional matrix assignment problems (Wang et al., 2014, Wang et al., 2015a, Wang et al., 2015b) that the optimal solutions are in the sum of the whole assignment matrix coefficient, so researchers can successively append coefficient strands on the end of corresponding possible assignment chains, and search the shortest ones which mean the optimal solutions. However, The task scheduling problem is the coefficient sum comparison between the matrix rows, it needs to solve how to intelligently compare the coefficient sum between rows and select optimum. Such problems have not been involved in the past DNA parallel computing and resolved yet.
In this paper, based on previous studies of Adleman and Lipton, a parallel biological computing algorithm is proposed to get answers of the task scheduling problem, with less than O(n2) time complexity prior to past algorithms, such as CPR (n ! time complexity) (Ratildedulescu et al., 2001), non-polynomial-time heuristic algorithm (Mishra and Tripathi, 2015) and genetic algorithm (O(mn2) time complexity) (Xu et al., 2014).
The rest of this paper is organized as follows. In Section 2, the preliminary knowledge, including the Adleman-Lipton model and task scheduling problem, is introduced. Section 3 proposes a DNA molecular parallel algorithm to solve the task scheduling problem. In order for the reader to better understand the computation process, we first use a specific data example (easy) to demonstrate the steps of the algorithm. Then we give the algorithm steps of abstract problem (hard and incomputable). The algorithm’ s theoretical proof and complexity are got in Section 4. We get conclusions in Section 5.
