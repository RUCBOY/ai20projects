A wide range of optimization problems that include a large number of continuous and/or discrete decision variables, fall into the category of linear programming (LP), nonlinear programming (NLP), integer programming (IP), mixed integer linear programming (MILP), mixed integer nonlinear programming (MINLP) and disjunctive programming problems. Gradient based methods such as Branch and Bound (BB), Generalized Benderâ€™s Decomposition (GBD), and Outer Approximation (OA), are generally used for solving IP, MILP, and MINLP problems. However, these methods have limitations whenever the optimization problems fail to satisfy convexity property, the problems have large combinatorial explosion, or when the search domain is discontinuous (Diwekar and Xu, 2005). Metaheuristic optimization strategies such as simulated annealing (SA) (Kirkpatrick et al., 1983), genetic algorithm (GA) (Holland, 1975) and ant colony optimization (ACO) (Dorigo 1992) can provide a viable alternative to the gradient based programming techniques. These individual optimization algorithms have a unique problem solving property. These standalone algorithmic procedures can solve certain types of problems effectively and may fail to progress for other types of problems (Siirola et al., 2003). Meta-heuristics do not, in general, guaranty optimality and the performance often depends on the particular problem characteristics and parameter setting. Therefore, a major issue in meta-heuristic design and calibration is to build them for maximum performance and make them robust. In this context, designing the standalone meta-heuristics is offering a consistently high level of performance over a wide variety of problem settings and characteristics (Crainic and Toulouse, 2003).
Multi-agent optimization (MAOP) framework provides a way of combining standalone deterministic and stochastic algorithmic procedures in one platform and exploits the strength possessed by each algorithm. Therefore, unlike a standalone method (only one strategy), the optimization problem in MAOP framework is approached with different solution methods of different background and with different parameter settings. In this context, contrary to the standalone optimization algorithm, the MAOP strategy avoids the problem of getting stuck in local optima. The optimizing agents use different algorithms to solve the same problem. These agents could be running on different machines or within one multicore system machine in parallel. Because of the collaboration among each agent through the global sharing memory, every agent will be initialized with improved findings of the other agents at each iteration and hence the individual agents will perform smaller number of iterations than typically needed to reach the optimal solution that lead to shorter elapsed time.
Because of the diversified nature of the algorithmic procedures involved in developing the MAOP framework, it has the capability of solving problems with different complexity and background. In this work, we propose a multi-agent optimization framework for solving large scale process system engineering problems. The proposed MAOP framework uses a variety of multiple algorithmic agents which include multiple efficient ant colony optimization (EACO) algorithms that differ in the initialization of the solution archive and the algorithmic parameters setting. Each agent encapsulates a particular range of parameters. We investigate the effect of cooperation among agents of the multi-agent system working in parallel, in series and standalone combined into a framework designed to solve large scale discrete, continuous and combinatorial optimization problems. Computational experiments are carried out using benchmark problems and a real world case study.
The rest of the paper is organized as follows: The following section describes the proposed MAOP framework and discusses the effect of diversity, coordination and parallelization of agents in the MAOP framework. In Section 3, the efficient ant colony algorithm is introduced. In Section 4, benchmark problems and results are introduced and discussed. The computer aided molecular design problem formulation is discussed in Section 5. In same section, the results of the solvent selection case study is presented and discussed. Finally, the concluding remarks are presented in Section 6.
