As complex (or higher-order) reasoning skills are now driving advanced economies, as shown in Fig. 1, manual tasks and routine cognitive tasks are being increasingly automated. As a result, higher-order skills requiring complex reasoning and communication must become a major focus of educational strategies. Indeed, the College Board, in partnership with the National Science Foundation (NSF), recently announced the fall 2016 launch of their new Advanced Placement Computer Science Principles course. In development since 2009 with funding from NSF, the AP Computer Science Principles course “is designed to broaden the number and diversity of students who participate in computing” and to empower them to “develop skills that will be critical to the jobs of today and tomorrow”  [15], [16].Download : Download high-res image (232KB)Download : Download full-size imageFig. 1. Technological changes affecting US workforce skills.
Many of these higher-order reasoning skills can be acquired in the context of computing. Because computing has emerged as a third pillar of science, complementing the traditional pillars of theory and experimentation, it can accelerate discovery and innovation and create a fundamental change in how research, development, and technology transfer in the sciences, engineering, business, humanities, and arts will be conducted in the 21st century. For example, in a 2004 study conducted by the US Council of Competitiveness and sponsored by DARPA, 97% of surveyed US businesses, including many Fortune 500 companies such as Procter & Gamble, noted that they could not exist or compete without the innovative use of high-performance parallel computing (HPC)  [7]. Unfortunately, those same companies lament the dearth of a trained workforce that is familiar with parallel computing concepts.
More recently, we have seen parallel computing become ubiquitous. For decades and until the mid-2000s, computing capability seemingly doubled every 24 months by increasing the clock speed and giving software a “free ride” to better performance. However, with clock speeds having plateaued and computational horsepower instead increasing due to increasing the number of cores per processor, parallel computing is now the norm. In addition to traditional supercomputing clusters, parallel computing with multiple cores can be found in desktops, laptops, and even mobile smartphones. This ubiquitous parallelism in hardware presents a major challenge: the difficulty in extracting parallel performance via current software abstractions. To address these challenges, we turn to block-based programming environments.
Block-based programming environments, such as Scratch   [12], and Snap!   [5], have been used effectively as powerful educational aids to introduce beginners to (sequential) computing. We see the broad appeal of these environments due to the following two features. First, block-based languages possess a low barrier to entry. That is, students with no prior programming experience can quickly develop the skills required to build programs that capture their interest, thereby motivating them to keep learning how to program. Second, block-based programming scales well with respect to students’ ages and their level of programming experience. Block-based languages are expressive enough to support the ingenuity of advanced students in computing, while still providing enough basic blocks to provide a rewarding programming experience to novices. Because of these properties of block-based languages, we see them as fertile ground for introducing parallel computing concepts to a wide range of computing students—from K-12 students to college students to professionals.
To assist in addressing the need to improve the teaching of parallel computing concepts, we propose to add explicit parallel abstractions to block-based programming languages. The thesis of this research is that the teaching of parallel computing does not need to be postponed until students have mastered the fundamentals of sequential programming. In fact, at this point, it may be too late to groom students to think “truly in parallel”. Instead, we posit that explicit parallel abstractions, such as producer–consumer, should be viewed as fundamental to programming as the for loop. By exposing explicit parallel programming via key language abstractions, we aim to harmoniously introduce students to parallel computing from the very start.
Further, we propose using an experimental feature of Snap!, one that produces a textual representation of the blocks in order to generate source code that can compile and run with high performance outside of the block-based environment, thus enabling the language to become an interactive development environment (IDE) that supports parallel programming for domain scientists (e.g., biologists and chemists) and domain engineers (e.g., aerospace engineers and mechanical engineers) as well. In this way, we believe individuals of all ages can become parallel programmers and utilize parallelism no matter their level of computing sophistication. By doing this, we believe that the workforce will be better prepared for the realities of our current parallel computing landscape.
To summarize, our goal is to increase parallel programming literacy for both the novice and the experienced. We aim to (1) introduce parallel programming concepts in a way that can be readily grasped by students as early as sixth grade and (2) enable domain experts, who are typically not professional programmers, to employ parallelism to accomplish their work.
The rest of the paper is organized as follows. Section  2 covers background material, including a discussion of the block-based Snap! programming environment and various parallel paradigms. Section  3 presents our approach to teaching parallelism via the block-based Snap! programming environment and presents several examples of different kinds of parallelism. Section  4 discusses the implementation of the parallel constructs within our extended Snap! environment. Section  5 provides a brief report on a survey-based assessment of the deployment of our parallel programming environment during the “Women in Computing Day” (WCD) event at Virginia Tech on April 1, 2016. Section  6 extends the theme of “parallelism for the masses” by demonstrating how Snap! can be used to automatically generate text-based parallel code for subsequent compilation and execution. Specifically, our extension makes Snap! into an interactive development environment where programs written in the block language are translated to text-based parallel code for running outside of the browser on machines that range from smartphones to supercomputers. Finally, Section  7 discusses related work, and Section  8 summarizes the work.
