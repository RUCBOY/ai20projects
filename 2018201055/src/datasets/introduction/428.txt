In engineering applications of the Particle-In-Cell (PIC) method, [1], [2] it is often desirable to employ a simplex mesh of triangles (tris) in two dimensions or tetrahedra (tets) in three dimensions. Such meshes allow almost complete freedom in representation of actual engineering features associated with complex boundaries and/or external electrical circuitry connected to boundary electrodes of arbitrary shape.
A challenge associated with such applications is to obtain a suitable class of particle shape functions, used to deposit charge and current to the fixed, unstructured mesh and to gather field information from the mesh to the particles. In this work, attention is restricted to electrostatic (ES) formulations in which only the charge and electrical potential (or electric field) are required to be interpolated back and forth in this way. The ES model is especially useful for low-temperature, extremely non-relativistic plasmas for which the action-at-a-distance model allows the neglect of irrelevant fast wave phenomena, which would otherwise require a much-reduced time step for their resolution. Examples of such applications might include arcs, plasma ion sources, surface discharges, and other practically important systems.
In ES PIC, the charge at a particular mesh node i is defined by the associated shape function Si as(1)Qi=∑pqpSi(xp) where the particles have charges {qp} and positions {xp}. Once the nodal charges are defined using Eq. (1), there are several possible ways to determine the ES potential ϕ from these. For unstructured meshes, it is most common to use a finite-element (FE) approach in which ϕ is expanded in another set of nodal basis functions {bi}. There is no necessary relation between these and the shape functions. For example, in the case of a rectangular mesh, it is quite common to use smoother shape functions (typically tensor products of quadratic or cubic B-splines) than basis functions for ϕ. The reason for this is the observation that the performance of the ES PIC algorithm is more corrupted by shot noise introduced by sampling of the individual markers than it is by inaccuracy of the field solver. Shot noise is reduced by smoother shape functions with larger support, allowing more markers to contribute to the charge at each node. In our applications, briefly described in the sequel, we have attempted to mimic this practice by requiring continuity of derivatives at element boundaries, leading to increased support, while retaining the common C0 FE tet elements for the representation of ϕ.
To respect the underlying physics, the shape functions should be everywhere non-negative and partition unity. The former condition assures that the charge of any species appearing on a mesh node will have the same sign as that of the individual particles, while the latter assures that the total charge of each particle appears somewhere on the mesh. PIC also requires that the shape functions have compact support, so that the charge density contribution of a particular particle is restricted to a small neighborhood of its position, as a matter of efficiency. Shape functions, in addition, should be “smooth”. A reasonable quantification of this desired smoothness is to require that the shape functions have a few continuous derivatives. In this work, attention is focused exclusively on finding a set of shape functions which are C1 (once continuously-differentiable), non-negative, and partition unity.
The ES case presents a different set of challenges in comparison with the more widely studied electromagnetic (EM) PIC formulation. In the latter, there is a need for conformity of the various EM fields and their sources, and considerable work has provided the necessary tools, including higher-order elements. In the ES formulation, there is no need to satisfy Gauss' law, or to be more precise, it is satisfied by the required global elliptic solve to obtain ϕ. The higher-order EM elements have typically focused on retaining the conformity of fields by using Whitney forms which increase the degrees-of-freedom per element without imposing continuity of higher (typically normal) derivatives at element boundaries [3]. An exception is the introduction of a particle cloud shape whose overlap with the underlying Whitney forms provides a higher degree of continuity [4]. In addition to the increased computational cost, the fixed-shape cloud may not be optimal when element size varies significantly across the mesh as it must be comparable to the largest sized elements leading to overlap with many small elements in other parts of the domain.
Obtaining smooth shape functions with minimal extension of support has proven to be challenging, and most PIC algorithms over simplex meshes [5], [6], [7] have employed the C0 “logical” (barycentric) coordinates naturally associated with simplices as shape functions. Some previous work proposed a set of functions suitable for two-dimensional applications, [8] but this subject has received little attention otherwise in the context of ES PIC.
At the same time, there is a large body of related work [9], [10], [11], [12], [13], [14], [15] which has been applied primarily in the field of computer graphics, where the flexibility of simplex meshes has been combined with C1 interpolation. These techniques have recently been used to produce “U-splines” [16] as smoother, compactly-supported, finite elements, although not addressing the issue of non-negativity. The main purpose of this paper is to bring to the attention of the PIC community the possibility of applying these methods of smooth interpolation to the construction of shape functions over simplex meshes with improved characteristics. The averaging methods of the previous two-dimensional work [8] are combined with the powerful methods of smooth interpolation to obtain such functions.
The remainder of this paper is organized as follows. The next section develops the methods used to obtain two-dimensional C1 shape functions in two steps, while the extension to three dimensions is taken up in the subsequent section. Section 4 presents some examples of the application of the resulting shape functions to PIC simulation, and the final section summarizes.
