The analysis of images is instrumental in many life science fields and, in particular, in biomedicine [1]. Currently, the datasets of bio-images are growing exponentially, and due to the huge size of such datasets, visual inspection and manual measurement of the images is a time-consuming task that lacks sensitivity, accuracy, objectivity and reproducibility [2]. Hence, researchers need to rely on automatic or semi-automatic imaging techniques, provided by several software tools [3].
Since there is not a unique tool that can tackle every single aspect (acquisition, analysis, visualisation, and so on) of biomedical image processing, different programs are required [3]. Due to this fact, interoperability is emerging as an important issue [1], [3], [4], [5], [6], and the bioimaging community is working on making feasible the collaboration of some of the most popular packages [7], [8]. Achieving such a collaboration might be challenging, due to the diversity of the tools, and requires a deep understanding and study of the involved technologies, and both a research and development effort. In this context, the SciJava project [8] plays a key role in bringing together projects like CellProfiler, ImageJ, Icy, KNIME, MiToBo, OMERO or MATLAB. The work presented in this paper uses SciJava as a frame to construct a bridge connecting two well-known free and open-source tools employed in bioimaging: ImageJ and OpenCV.
ImageJ [5] is an image-analysis tool that has been successfully employed to deal with many problems in life sciences [9], [10], [11], [12]. There are several reasons for the success of this software: its easy-to-use interface, the ability to easily extend its functionality by means of plugins, the availability of plugins to solve a great variety of problems, and the macro system that captures the users’ interactions allowing them to automate and reproduce their workflows. ImageJ mainly features image processing algorithms; however, it lacks other instrumental tools in image processing such as computer vision and machine learning methods. Hence, the development of ImageJ plugins that require the latter kind of algorithms needs either the from-scratch implementation of those methods or the connection with different external libraries.
OpenCV [13] is a widespread computer vision and machine learning library applied in a great variety of contexts, including life sciences [14], [15], [16]. The power of OpenCV relies on the huge amount (more than 2500) of both classic and state-of-the-art computer vision algorithms provided by this library. OpenCV supplies algorithms for: image processing, feature detection, object detection, machine-learning, and video analysis. The major difficulties for employing OpenCV in life sciences are its usability and interactivity: OpenCV neither provides a by-default graphical interface or the functionality to interact with regions of interest (ROIs). This means that it is necessary to code the interaction with OpenCV, and this may be a problem for life scientists.
The aforementioned drawbacks of ImageJ and OpenCV could be tackled by combining these two systems. Recently, two libraries [17], [18] have been developed allowing ImageJ users to take advantage of some OpenCV features, but not the other way around. In this work, we have developed a new free and open-source Java library called IJ-OpenCV1 that allows the communication of ImageJ and OpenCV in both directions. This library brings to the table several benefits for both communities:
•ImageJ users can employ the wide variety of computer vision and machine learning algorithms available in OpenCV.•ImageJ does not need to be connected with several third-party tools to explore different alternatives; instead, OpenCV common interfaces can be used to easily explore different algorithms.•OpenCV developers do not need to implement the functionality to handle ROIs, but they can employ ImageJ's features for ROI management.•ImageJ simple-to-use interface can be employed to interact with OpenCV programs, overcoming the lack of a by-default interface in OpenCV.•OpenCV programs can be distributed as ImageJ plugins making its use and dissemination easier.
Therefore, it is our belief, that this bridge between systems can have a positive impact in both ImageJ and OpenCV communities, and avoid unnecessary duplications of efforts.
