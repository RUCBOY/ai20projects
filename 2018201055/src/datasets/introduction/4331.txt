Programming is one of the core competencies expected of every computer science graduate. However, it has been labelled as difficult and problematic for many novice programmers (Corney et al., 2011, Holland et al., 1997, Law et al., 2010, Xinogalos, 2015). Previous research studies show there continues to be a high rate of failure in introductory programming courses (Hu et al., 2012). At the Luoyang Institute of Science and Technology (LIT), approximately 26.4% of computer science students failed the advanced programming course in the first semester from 2007 to 2014. Varieties of reasons were proposed. One widely accepted consensus is that novice programmers struggle to process program codes in relational mental models due to their static perceptions of programming (Corney et al., 2011, Shuhidan et al., 2009). Lahtinen et al. (2005) reported that the biggest problem of novice programmers was not the understanding of basic concepts (programming language knowledge) but rather learning to apply them. The ability to construct programs from abstract programming language knowledge is significantly related to novice programmers’ programming knowledge. Thus, for a novice programmer, the most important type of knowledge is programming knowledge.
Regarding the most effective way to teach novice programmers to construct programs, it is believed that the “roles of variables” was a promising concept because the roles of variables are programming knowledge that can be explicitly taught to students (Sajaniemi, 2006a). Some studies showed that teaching roles of variables enabled novice programmers to mentally process programs in a comprehensive way (Byckling and Sajaniemi, 2006, Kuittinen and Sajaniemi, 2004). Moreover, the role-based animation teaching can help novice programmers easily identify the roles of variables and foster better programming skills (Sajaniemi and Kuittinen, 2004, Sajaniemi and Kuittinen, 2005). However, Al-Barakati and Al-Aama (2009) reported that apart from improving student debugging skills, the visualization of the roles of variables has no other significant effects on student programming skills.
The purpose of this study is to evaluate whether the role-based approach with visualization tools is effective in teaching novice programmers to construct programs in the C Language Course. In this article, the SOLO taxonomy was used as an evaluation method. Previous studies suggested that SOLO taxonomy is a reliable tool with which to evaluate student ability to construct programs (Clear et al., 2008, Izu et al., 2016).
Specifically, this study attempts to respond to two questions:
•Can the visualization of the roles of variables improve novice programmers’ SOLO levels of program construction?•Can the visualization of the roles of variables improve novice programmers’ performance on the final exam?
