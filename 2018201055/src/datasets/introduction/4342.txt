In today's world, computing plays an essential role in society, contributing to the progress of areas such as health, education, management, business administration, scientific research (ACM/IEEE-CS, 2013). Therefore, the demand for skilled computing professionals is continuously increasing and, consequently, the computing discipline needs to attract quality students and educate them to be capable and responsible professionals in the 21st century (ACM/IEEE-CS, 2013). In this respect, students in higher education computing courses need to develop professional competences including knowledge, skills and attitudes in computing areas such as algorithms, data structures, software engineering, security, and operating systems (ACM/IEEE-CS, 2013). These competences need to be acquired on several learning levels, from simply remembering concepts, classifying and structuring the information, up to being able to apply the knowledge in concrete situations.
The nature of computing and the generation of students have changed remarkably in the past years. However, most higher education computing courses are still taught in traditional ways that may not be adequate to keep up with modern concerns and may not support the necessary learning (Barnes et al., 2008, Freeman et al., 2014, Parsons, 2011). Thus, in order to achieve more effective learning at higher levels we need instructional strategies focused on the students, which allow them to learn by doing.
In this context, educational games are expected to contribute to deeper and more active learning, through which students learn from their own experiences (Boyle et al., 2011, Boyle et al., 2016, Connolly et al., 2012, Gibson and Bell, 2013, pp. 51–60). Educational games are specifically designed to teach people about a certain subject, expand concepts, reinforce development, or assist learners in learning a skill or change an attitude (Dempsey, Lucassen, Haynes, & Casey, 1996). With this objective, educational games have been used as an innovative instructional strategy for computing education (Backlund & Hendrix, 2013; Battistella & Gresse von Wangenheim, 2016). Driven by the need to provide more hands-on opportunities for computing students, various educational games have been used to contribute to the learning process in different computing knowledge areas. For example, educational games used for learning Software Engineering include SimSE (Navarro & van der Hoek, 2007), Requirements Collection and Analysis Game (RCAG) (Hainey, Connolly, Stansfield, & Boyle, 2011), Software Project Management (e.g., SCRUMIA (Gresse von Wangenheim, Savi, & Borgatto, 2013)), or Security (e.g., CyberCIEGE (Raman, Lal, & Achuthan, 2014), CounterMeasures (Jordan, Knapp, Mitchell, Claypool, & Fisler, 2011).
Educational games are believed to result in a wide range of benefits, like increasing learning effectiveness, increasing interest and motivation as well as a reduction of teaching time and instructor load (Garris, Ahlers, & Driskell, 2002; Gresse von Wangenheim & Shull, 2009). Games are expected to provide a fun and safe environment, where students can try alternatives and see the consequences, learning from their own mistakes and practical experiences (Pfahl, Ruhe, & Koval, 2001). They are supposed to be an effective and efficient instructional strategy for teaching and learning. However, these claims are questionable or at least not rigorously established (All et al., 2016, Hays, 2005; Gresse von Wangenheim & Shull, 2009). Therefore, it is essential to systematically evaluate such games used for computing education in order to obtain sound evidence of their impact.
Thus, in order to elicit the state of the art of how educational games for computing education are evaluated, we conducted a systematic literature review (SLR). The main contribution of this paper is the analysis and summary of how evaluations of games for computing education are defined, executed and analyzed. Furthermore, it may also assist instructors from other knowledge areas to obtain evidence on the impact of educational games as an instructional strategy, as well as guiding game creators on how to obtain feedback and identify improvement opportunities.
