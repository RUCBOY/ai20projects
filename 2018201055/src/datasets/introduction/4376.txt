System flowcharts have been used in accounting and auditing since the 1960s to model the flow of documents in accounting information systems (AIS). The fundamental concepts underlying systems flowcharts were earlier introduced by Gilbreth and Gilbreth (1921). The systems flowcharts augmented by annotations and narratives provided a smooth transition from the flow of documents to programming the control panels on early accounting machines such as IBM 402. Systems flowcharts were initially used to document AIS, train personnel, and aid auditors in understanding internal controls. Since most AIS were then substantially manual, the dominant view was to study them through the flow of accounting documents.
AIS have evolved over the years to support the growth in volume of transactions handled, velocity of transactions supported, amount of data processed, varieties of datatypes collected, and sources of data including sensors and external entities. Such complex accounting systems require significant investments and it is critical to minimize errors in AIS. The quality of AIS is likely to be superior when all relevant information is used to build it. In particular, we highlight the value of design, implementation, and audit analytics in facilitating optimal decisions. Design analytics involves study of the properties and behavior of the system. For example, the design must ensure that each transaction is processed correctly and completely just once while minimizing conflicts of interests that increase risks of fraud (see 4.2 Requirement 2: model should support analytics for design of accounting function, 4.3 Requirement 3: model should support analytics for the correctness of AIS, and 4.4). This can be accomplished through analytics of properties discussed in Section 6 and the suggested research opportunities in Section 10. Implementation analytics, on the other hand, involves the study of decisions such as processing capacity, task scheduling, planning, and system performance (see 4.5 Requirement 5: model should support analytics for processing capacity, task scheduling, and planning, 4.6 Requirement 6: model should support analytics of AIS performance. This can be accomplished through either analytical models or simulation as suggested in Section 10. For example, the implementation must ensure that there is sufficient capacity to process the transactions correctly and efficiently based on simulated performance data, which is obtained by load testing the chosen system against demanding scenarios. Performance of analytics in design and implementation requires a coherent description of the AIS, which a formal model provides. The unified view provided by the model also enables us to support audit analytics by providing a way to express internal control rules and audit procedures. For example, audit analytics can be performed on logs of transaction processing to verify that control rules are operating as intended, and to detect anomalies and possible fraud (see Section 4.7). While design, implementation, and audit analytics can be performed in the absence of a formal model, it would be difficult to ensure a unified view of AIS to support accounting and auditing.
To meet the continuing need for high performance and reliability of AIS, we must examine new ways to formally model and document accounting systems, going beyond system flowcharts. In order to advance the ways in which systems are modeled, there are modeling techniques such as structured systems analysis & design, Integration Definition (IDEF), Event-driven Process Chains (EPC), Unified Modeling Language (UML), and Business Process Modeling Notation (BPMN). These methods, as we will discuss in Section 2 are either influenced by or can be transformed into a well-founded model called the Petri net, which is widely accepted in the study of Discrete Event Dynamical Systems (DEDS). The concept of Petri net was introduced by Petri (1966) in his seminal dissertation on Kommunikation mit Automaten over half a century ago to model DEDS. According to van Hee (1994), AIS are examples of DEDS. They are discrete event systems because events occur at an instant in time, and only a finite number of transactions can occur in any given finite time interval. For example, a typical sales system is a discrete event system because a sales transaction occurs at a point in time, but the number of sales transactions occurring between any two points in time is finite. AIS are dynamical systems because their state, defined by the status of transactions in processing, changes with time. Continuing with our example, the sales system is dynamic because between any two points in time, the position of transactions in the processing cycle can change. In this primer we compare systems flowcharts with Petri nets for modeling the flow of work in AIS. We choose the former because of their dominance in current practice, and the latter because most alternative ways of modeling are either influenced by or can be transformed into them. We also choose Petri nets because of their sound mathematical foundations, their facility for analytics and simulation with software support, and their prominence in modeling in computer science and engineering.
Petri nets have been used extensively in the modeling of computers, communications networks, computer operating systems (Karimov and Moharrami, 2012), manufacturing systems, and in general in the modeling and design of distributed DEDS. In accounting, two prior attempts were made to apply Petri nets in the context of internal controls in accounting systems by Verghese, 1988, Chen and Lee, 1992, however, they did not gain traction in accounting literature partly because analytics for Petri nets were not as developed then as they are today. Additionally, these studies were heavily focused on the modeling of internal controls and segregation of duties rather than the broader issues of modeling accounting systems. Later, Krishnan et al. (2005) used BPMN notation to study internal controls in accounting systems, and Bai et al. (2012) used the same notation to study error propagation and mitigation of risks in accounting systems. While these studies deal with individual business processes, the seminal work of Elsas (1996) presents a top level model of the operating cycle in Petri net framework. Formal modeling makes it possible to verify the correctness and ensure reliability of AIS design, and Petri net is an ideal choice since its foundation lies in the mathematical modeling of systems. It also facilitates analytics and simulation. The use of Petri net oriented tools in the design of business information systems provides an opportunity to establish a unified model that supports development of information systems for accounting and auditing. Using Petri net minimizes the resources spent on documenting accounting systems and facilitates the use of analytics and simulation.
In this paper we provide a primer especially tailored for researchers in AIS. There are many primers and tutorials for Petri nets Murata, 1989, Zurawski and Zhou, 1994, Blätke and Monika Heiner, 2011, Reisig, 2013, but there are no primers that deal specifically with Petri nets in the context of AIS. It is the objective of this primer to fill this void. In this primer we consider lower level business processes for modeling accounting systems. This is appropriate since accounting systems are typically studied through lower level processes and then such details are integrated into a comprehensive AIS model.
Our contributions in this paper include the following. First, we present a comprehensive set of requirements that all AIS models should satisfy in order to be useful for design and implementation. We also describe the criteria and measures that can be used to meet those requirements. We believe that each requirement presents opportunities for AIS research. The second contribution is in examining how structural properties of Petri nets can be used to verify correctness of AIS design. Correctness ensures that the system will be free from anomalies such as information loss because of attempts to process transactions in excess of system capacity, or transactions that are hung in their processing. Correctness is a structural property of the system that can be analyzed using well-known Petri net algorithms based on incidence matrices and reachability graphs (see 6.2 Reachability graph and behavioral properties, 6.3 Structural properties: place & transition invariants. Correctness of AIS have not been explored in the literature, and therefore presents an opportunity for further investigation. Our third contribution is in examining how Petri net simulation of AIS can be used to gather data to aid in system implementation decisions such as task automation as well as hardware and processing capacity. Information relating to tasks in Petri nets can be used to implement models of internal control rules such as segregation of duties (SoD) and rotation of duties by developing AIS specific algorithms for assignment of tasks to people.
In this paper we first provide the rationale for choosing systems flowcharts and Petri nets for comparison in Section 2 and follow it with a brief historical review in Section 3. In Section 4 of this paper, we propose specific requirements that any model and documentation of AIS should satisfy. In Section 5, we describe how workflows in business processes can be represented as Petri nets, give an accounting example, and develop its mathematical model. In Section 6 we discuss structural and behavioral properties of Petri nets and their significance in the design of AIS. In Section 7 we introduce the workflow net corresponding to the Petri net example in Section 5 and briefly discuss soundness of workflow nets in the context of verifying the accuracy and integrity of AIS design. In Section 8 we briefly discuss how Petri nets have been extended by relaxing the assumptions leading to colored, stochastic, timed Petri nets, etc. Section 9 presents an assessment of systems flowcharts and Petri nets in meeting the requirements presented in Section 4. In Section 10 we discuss how Petri nets provide AIS researchers opportunities to enhance models in computer science and management science by incorporating AIS specific constraints. In Section 11 we provide our concluding observations.
