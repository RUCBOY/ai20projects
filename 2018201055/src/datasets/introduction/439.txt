Graphs are ubiquitous in many diverse fields of science and engineering. They form the basis of many important algorithms and data structures in computer science. Graphs in computational biology help scientists in understanding functions of proteins or assembling long genome sequences from shorter strings called reads. In VLSI circuit design, graphs are successfully used to minimize the propagation delay or the wire crossings in a layout. Graphs are powerful mediums in addressing important questions from almost any field.
Today, large graphs can have billions or even trillions of edges and such a size more than often necessitates the execution of algorithms on graphs in parallel. There are many distributed graph computation frameworks, GraphLab [22], Giraph [2], Pregel [23], to name a few, that facilitate parallel execution of algorithms based on graphs. In parallel processing of the graph, the vertices and edges are distributed among the processors and the processors operate on their portions of the graph and occasionally exchange data. Partitioning of the graph usually has a crucial effect on the parallel performance of the executed algorithm, and if not done carefully it can lead to poor performance. Most distributed graph frameworks rely on a simple hash function to distribute graphs. Although this can lead to somewhat acceptable computational load balance, it is very likely to cause high communication (i.e., high edge-cut or vertex-cut) as this translates into a random partitioning of the graph.
In distributed graph computation frameworks, the distribution of the vertices and edges of the graph must be fast. Although trivial hash functions are certainly acceptable, the lightweight streaming algorithms can offer better quality partitions while still staying within the acceptable preprocessing time limits. There are several works [4], [13], [24], [27], [30], [35], [36], [37] that use streaming algorithms for distributing a graph. These algorithms are usually categorized in the online algorithms category for partitioning a graph. The offline graph partitioning is more expensive and usually contains more involved methods. Examples include, but certainly not constrained to, spectral methods [3], [11], [12], [17], [28], multilevel methods [6], [16], [18], [19], and rather recently, metaheuristics [5], [31], [34]. Multilevel methods are usually the choice of preference as they are able to produce high-quality partitions very fast and the most widely adopted tools [19], [26] rely on this method. Offline methods are usually deemed to be too expensive for distributed graph computation frameworks and they are usually preferred in scientific computing or VLSI circuit design, where the overhead of expensive partitioning can be justified.
This work tries to answer the following question: How feasible is it to utilize a streaming graph algorithm within the context of multilevel graph partitioning framework? Most multilevel graph partitioners make use of several different heuristics in different sections of the multilevel framework. Although doing so certainly improves the quality of the solutions, they often sacrifice from the execution time and parallel efficiency. The solutions obtained by a fast streaming algorithm that is amenable for parallelization and utilized within the multilevel framework can be more attractive when its advantages are considered. The hastily made decisions by the streaming algorithm can be corrected by using the same streaming algorithm for refinement purposes. Fig. 1 shows four different methods to partition a graph with eight vertices and fourteen edges into two parts with each part having the same number of vertices. These methods are: (i) random partitioning (Fig. 1a), (ii) a streaming algorithm (Fig. 1b), (iii) an iterative improvement heuristic (Fig. 1c), and (iv) an optimal partition in terms of cutsize (Fig. 1d). The figure shows that a smaller cutsize can be obtained using more complex and expensive algorithms.Download : Download high-res image (381KB)Download : Download full-size imageFig. 1. Four different approaches in obtaining a perfectly balanced two-way partition. The vertices belonging to different partitions are illustrated with different colors. The cut edges are shown with dashed lines and the numbers above edges indicate their weights. (a) Random partitioning (cutsize =24). (b) The streaming algorithm linear deterministic greedy [35] (cutsize =17). (c) A single pass of Kernighan–Lin iterative improvement heuristic [20], with the initial starting partition being the random partition in (a) (cutsize =15). (d) An optimal partition (cutsize =14).
We choose to utilize the streaming algorithm linear deterministic greedy (LDG) that is proposed by [35]. Among the many algorithms tested out in [35], the LDG algorithm attained the best performance. The LDG algorithm serves multiple purposes in multilevel framework in our approach. It is used as a clustering algorithm in the coarsening phase and it inherently produces an initial partition of the original graph after the coarsening completes. The LDG algorithm can be considered as an agglomerative clustering algorithm, in which two or more vertices are used to form a new coarser vertex. It has also the nice feature of obtaining coarse vertices uniform in size, which is a feature that is commonly sought for the algorithms used in the coarsening. In the uncoarsening phase, it serves as a refinement algorithm which is used for repartitioning purposes. The flexibility and fast nature of this heuristic renders it attractive to be utilized anywhere in the multilevel framework. The contributions of this work are listed as follows:

1.We assess the feasibility of using a streaming algorithm within the multilevel algorithm.2.We describe in detail how a flexible streaming algorithm is used for the purposes of coarsening, initial partitioning, and uncoarsening in the multilevel partitioning framework. We outline how to best exploit the algorithm to suit the needs of these different stages.3.We parallelize the LDG algorithm and the multilevel framework for shared memory architectures. We essentially come up with a fully-fledged shared-memory parallel multilevel graph partitioner that relies on a simple and flexible streaming algorithm to do its bidding.4.We investigate the feasibility of utilizing multilevel framework within an online context. We describe how our approach can be utilized for online graph partitioning under the assumption that the vertices in the stream arrive in batches.5.We validate our approach on a comprehensive dataset by comparing it to the widely-adopted partitioner MeTiS [19] and the flat LDG algorithm [35].
The rest of this paper is organized as follows: The notation is introduced in Section 2. Background and the studies related to this work are discussed in Section 3. Our approach is explained in Section 4 and the parallelization of our approach for shared memory systems is discussed in Section 5. We describe how to utilize the proposed methodology for online graph partitioning in Section 6. The proposed methodology is validated in Section 7 with experiments and the conclusions are given in Section 8.
