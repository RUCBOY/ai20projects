Test-driven development (TDD) is an iterative software development practice within agile methodologies [1]. It requires developers to follow three phases: The red phase causes a shift in mindset from the test-last approach to the test-first approach, while the green phase only develops enough code to pass the tests and the refactoring phase focuses on design quality through refactoring operations and uses a set of regression test cases as a safety net. It is claimed that TDD leads to better code quality due to its focus on testing, and improves developers’ confidence in their source code [2]. Based on this claim, some software organizations have been quick to adopt TDD, while others are still evaluating its benefits in terms of cost, quality, and productivity [3], [4].
To assess TDD, a number of primary (e.g., controlled- and quasi- experiments) and secondary (e.g., systematic literature reviews) empirical studies have been conducted. Primary studies (e.g., [5], [6]) have been quantitative in nature and have produced contrasting or inconclusive results [7]. The secondary studies summarize the empirical research results regarding TDD by aggregating, to a varying extent, the evidence from controlled experiments, quasi-experiments, and case studies [3], [4], [7], [8].
TDD has been marginally investigated from a qualitative point of view and from the perspective of the developer [9], [10]. Qualitative studies, unlike quantitative ones, inquire into the underlying reasons and motivations behind a given phenomenon [11]. Among the kinds of qualitative methodological approaches, an ethnographically-informed study forces researchers to attend to the taken-for-granted, accepted, and un-remarked aspects of a practice, considering all activities as “strange” so as to prevent the researchers’ own backgrounds from affecting their observations [12]. In this type of study, researchers immerse themselves in the study context, participate in the study (e.g., by joining in conversations, attending meetings, reading documents), and observe participants without prejudice or prior assumptions [13].
In this paper, we present the results of an empirical study involving students and professional software developers. We involved 14 graduate students in Computer Science at the University of Basilicata, and six professional developers with one to 10 years’ work experience. We asked participants to work in pairs, each pair is composed of a driver and a pointer developer. The goal of our study is to gain insights into how developers apply TDD and deal with each of its phases. In particular, we sought to explore the values, beliefs, and assumptions that inform and shape the application of TDD and its phases. Given this motivation, our methodological approach can be characterized as ethnographic [14], [15], [16]. We asked the participants to perform an implementation task. In particular, they had to add new functionality to an existing software implemented in Java using Eclipse. This software is a complex, industrial-like case of which participants had some knowledge. The first author immersed himself in the study environment, participated in conversations, and asked the participants how they were applying TDD to perform the assigned implementation task. We collected information by means of contemporaneous field notes, audio recordings of discussions, and copies of the artifacts produced by the participants during the implementation. Fine-grained data about the participants’ application of TDD was also gathered through an automated tool installed in the participants’ integrated development environment (IDE). This tool is intended as an Eclipse plug-in and runs in the background without interfering with the IDE use. We analyzed TDD conformance data to support or reject the qualitative findings. This is why we consider this as a multi-method study.
This study builds on a previous study [17] in the following ways:

•We described our ethnographically-informed study with more details.•We extended the related work section by including a review of quantitative studies relevant for the approach we used to triangulate the results.•We triangulated the initial qualitative results with analyses of quantitative data. We cross-referenced the results of both analyses and improved the discussion of the attained outcomes and conclusions.
In summary, we make the following contributions:

•We present the implications of the results from an ethnographically-informed study with nine pairs of developers; three of these pairs were professionals. To the best of our knowledge this is the first of such studies explicitly tackling TDD.•We provide a triangulation of the results based on quantitative data extracted from the developers’ IDE.•We delineate future research to investigate the specificities behind the application of TDD.
The remainder of the paper is organized as follows. In Section 2, we discuss related work. In Section 3, we explain our method, while in Section 4, we present our findings. We show and discuss our findings in Section 5. In Section 6, we highlight limitations of these findings. Final remarks and future work conclude the paper.
