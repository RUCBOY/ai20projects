The expansion of embedded systems into new application areas such as healthcare, automotive, robotics, home automation or smart cities has led to the development of the Internet of Things (IoT). This new paradigm consists in connecting any device with actuating, sensing, and computation capabilities [1], [2]. The growing presence of wireless communication technologies, such as wireless local area network (Wi-Fi), Long-Term Evolution communications (LTE) and Radio-frequency Identification (RFID), allows for the connection of devices to internet and remote monitoring and management through cloud applications. Ubiquitous possibilities enabled by IoT offers the ability to measure, infer and understand environmental indicators in said applications areas.
One step further is the introduction of more intelligent and interactive operations under the architecture of the IoT paradigm, resulting in Cyber-Physical Systems (CPS) [3]. These elements are networked to monitor, sense, and actuate physical elements in the real world and to work together as a system. The proliferation of connected devices in a communicating-actuating network creates smart environments where sensors and actuators blend seamlessly with the environment around us, and the information is shared across platforms [4].
Computing nodes in a CPS environment can be very heterogeneous in what concerns computing power and other capabilities. They are generally network-enabled small-sized computers ranging from nodes, with advanced sensing/actuating capabilities but very limited processing and storage resources, to powerful multi-core technologies with high storage capacity. In addition, other computers can cooperate in the network: servers, desktop and laptop computers (full-sized, not embedded computers), smartphones, and others.
In such a heterogeneous environment, as the one exposed by CPS, there are multiple options to consider when deciding which network nodes should support the execution of the processing tasks: sensor and actuators nodes can support additional processing with current technologies; local servers, desktop and mobile computers could also provide part of their resources for distributed system goals; and, furthermore, cloud computing services can be hired for additional computing power.
To be able to select the adequate CPS nodes, different factors need to be taken into account. In terms of network efficiency, it is preferable to bring the computing work near to data sources and users. Performance is another key issue: simple processing at a high data transfer flow rate is generally better performed by local devices (sensor or actuator), whenever possible; on the other hand, intensive processing at a low data transfer flow rate can be effectively done by powerful remote computers. Physical constraints are also an important aspect that needs to be addressed: some system components are able to integrate data from different sources, so sending the data flow through the network becomes mandatory. Other relevant factors include energy consumption in battery-powered devices [5], QoS (Quality of Service) requirements [6], available bandwidth [7], and monetary cost of the cloud services, among others.
The selection of the network node to be used for each distributed task could be done at the design stage. However, in a CPS, the high variability of the context generally recommends making decisions during execution time. Firstly, the flow rates of data transfers can be highly variable in time, depending on the input nature: for example, night video can be compressed more than daylight video using some compression techniques. Secondly, computing nodes can dynamically join or leave the network: incorporation of new sensors or actuators can dramatically increase data processing, but servers with free resources can alleviate the possible overload produced by this increase. The free resources provided by those servers for distributed systems can also be variable, depending on other tasks that must be carried out by the server. Last but not least, the available network bandwidth can vary depending on active network applications, usable technologies, or geographical location.
In general, there is an interesting open issue for efficient resource planning in the design of infrastructures for CPS applications where there are heterogeneity of the environment and available computational resources. In this kind of execution contexts, the first step is to find the feasible options for scheduling based on the dynamic nature of the system. In addition, the computers may be doing their own work, apart from the tasks of the distributed application. Among the feasible options, some scheduling decisions may be more suitable than others depending on several aspects related with the overall application performance and/or user preferences. In addition, the cloud computing paradigm adds further elements to properly perform this scheduling process.
Advances in this area will allow for the proper sharing of computational cost of application processing among the devices networked, and the design of systems able to deploy advanced applications for providing additional added-value services to users.
This research tackles this problem. The objective of this work is to properly distribute the processing workload among the available computing nodes in a CPS taking into account the dynamic nature of the context observed in these environments and the desired preferences at the design stage. The main contribution of this work is the proposal of a formal model that will be able to quantify the available resources of each node and the computing power required by the tasks of the CPS application. On this foundation, it will be possible to model CPS environments, working on heterogeneous devices, and to design a method to find the suitable distribution of tasks. In addition, the overall design of CPS applications can be undertaken by following a framework which combines this formal model with a convenient application characterization.
This approach favors the integration of heterogeneous computer devices and even of external cloud services to meet the application requirements. Moreover, this integration is achieved in a flexible way: utility computing is used only when required depending on the CPS context, and sensor computing resources are preserved for their intended demanding tasks. In other words, different activities are distributed throughout the network, taking the best of both worlds: local execution with own computing resources and remotely supplied cloud services. The proposed solution brings a novel contribution by providing a coarse-grained data flow framework to successfully design a distributed application in dynamic CPS environments.
The rest of the paper is organized as follows. First, a review of related research areas and their relevant solutions is presented. Next, the model is described by formally defining the problem and providing a conceptual view of the solution. Section 4 describes a deployment method of the model by introducing a framework. Section 5 presents a study case: an example of a distributed application where the proposed approach is suitable. The experimental design and tests are made, taking the study case as reference, and the feasibility of the solution is verified. Finally, relevant conclusions and future directions of this research are outlined.
