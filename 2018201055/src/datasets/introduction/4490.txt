Syntactic regularities in strings play a pervasive role in many facets of data analysis. Searching for repeated patterns, periodicities, symmetries, and other similar forms or unusual patterns in objects is a recurrent task in the compression of data, symbolic dynamics, genome studies, intrusion detection, and countless other activities. In many applications, such regularities represent redundancies and, as such, are sought to be removed. This is the case of data compression. In textual substitution methods, for example, strings that appear many times in a subject can be economically replaced by pointers to a single common copy. In many other applications, these kinds of regularities are sought as carriers of information. Displays of duality for information in this context has been known and debated since early years [1], [2]. Another topic of study has been that of avoidable and unavoidable such regularities (see, e.g., [3], [4], [5]).
We concentrate here on the most basic form of regularity in a string â€” the cadence. Informally, a cadence occurs when a specific character occurs in a string at a regular interval. The indices of that character's occurrences form an arithmetic progression. One remarkable application of the pigeonhole principle establishes that if the set N of natural numbers is partitioned into k classes, then one of the classes contains arbitrarily long arithmetic progressions. Cadences have been the subject of extremal combinatorial studies. An example is the following theorem:
Theorem 1[4] If A is an alphabet with k letters and n is an integer, then there is an integer N=N(k,n) such that every word of length at least N has a cadence consisting of at least n characters.
In this note we are interested in detecting cadences in a given string, rather than in the extremal properties of cadences. Many real world phenomena have a particular type of event that recurs regularly over a certain interval of time. Examples of highly periodic events include road traffic peaks [6], load peaks on web servers [7], monitoring events in computer networks [8] and many others. Finding periodicity in real-world data often leads to useful insights by shedding light on the structure of the data, and providing a basis for predicting future events. Moreover, in some applications periodic patterns can indicate a problem. In a computer network, for example, repeating error messages can indicate a misconfiguration, or even a security intrusion such as a port scan [9]. Such repetitions have also been encountered in biology [10] and in graph mining [11]. Efficiently finding approximate periodic arithmetic progressions has recently been studied [12], [13].
1.1. The contribution of this noteThe cadence is arguably the most basic regularity in a string. We will show that it is a primitive by which string periodicity can be defined. Consequently, we propose to study cadence detection much as the detection of other regularities (e.g. periodicity, cover, squares, palindromes) has been studied. Understanding cadences will enhance our study of string regularities. The main object of this note is to formally introduce the study of this new primitive.We are concerned with efficient algorithms for detecting cadences. We give a sub-quadratic algorithm for determining whether a string has any cadence consisting of at least three occurrences of a character. We also define a special cadence, the anchored cadence, where the first interval must be the same length as the others. We give a nearly linear algorithm for finding all anchored cadences.In addition, we define a data structure, which we call the sub-cadence graph. We point out some of the properties of this data structure, which enable us to derive easy upper and lower bounds in cadence detection.It is our hope that systematic further study of the sub-cadence graph, and cadences in general, will provide tools for many applications with periodically recurrent phenomena.
