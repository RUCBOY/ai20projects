The importance and contribution of e-learning systems, used as a supplement in the learning process, is unquestionable in normal situations, and it is more obvious in cases of lockdown scenarios, such as the one we are experiencing now due to the CORONAVIRUS health crisis (COVID-19 pandemic). In this context, providing e-learning systems and promoting their use was one of the major challenges addressed by many universities.
Designing and developing systems which help or promote learning has always been a multi-disciplinary concern. Since the 90’s these have been based on Information and Communication Technologies (ICT), spurred on by the rapid evolution of the Internet and the state of the worldwide web today. There are numerous software systems aimed at assisting the teaching/learning process online (e.g. Learning Management System-LMS, Learning Content Management Systems-LCMS, Virtual Learning Environment-VLE, e-Learning) whose main purpose is to provide resources which enable skills, knowledge, and behaviors to be acquired by means of study, instruction, reasoning and observation.
These systems usually enable courses to be created and listed in online learning platform (Edx, Udacity, Udemy, Coursera, Khan Academy). An online course is made up of many different components and activities which, to a large extent, depend on the professor and the methodology he or she uses to achieve the learning outcomes. Some of these are lessons (with varying degrees of complexity), readings, images, audios, videos, games, debates, surveys and tests. Moreover, there are various communication tools which participants on the course share such as emails and discussion forums, among others. These systems also provide components for scheduling activities and monitoring students’ progress in them.
New components are being researched and developed, in order to make these systems more interesting to learners and also different from the others in the competition. These components focus on promoting active learning [1], i.e. they involve learners in their own learning process, and also on encouraging learners’ independence, i.e. they support the learning process without the need for instructor intervention. Ultimately, these systems should guarantee the autonomy of the learner, i.e. they should give the learner the opportunity to take charge of his or her own development.
A major advance in this direction has been the development of Intelligent Tutoring Systems (ITS) [2], [3], [4], [5], which are systems that adapt to the needs of the learners and make recommendations to them on the next activities to be carried out in order to achieve the learning outcomes, thus guiding their learning process. With this type of systems, it is possible to implement active-participatory methodologies in the learning process. However, they are still limited in allowing for learning through experimentation. This type of learning promotes active learning and learners’ autonomy, making the learning process easy, passionate and creative. When a task, however difficult, is carried out on one’s own initiative, all the capacities, skills, tools and knowledge necessary to solve it successfully are put to use. Thus, learning through experimentation provides a number of advantages to the learners such as to acquire and refine control knowledge, to augment an incomplete domain theory and to refine an incorrect domain theory [6].
Currently, existing ITS turn this learning through experimentation into “knowing through doing”. The following approaches can be found [7]:
First approach: Systems that extract and propose exercises taken from a repository to learners with the purpose that they solve them. Then, these systems check how good the solution given by the learners is and propose new exercises to them, which are always taken from the repository. These exercises are chosen on the basis of different criteria, such as their progress in the learning process or the results obtained in previous exercises [4], [8], [9], [10].
Second approach: Systems that present to learners an exercise and how to solve it step by step (worked-examples). Then, these systems create similar exercises, usually changing data, which can be solved by following the learnt steps. In subsequent stages, they may also gradually fade out the number of steps there are in the worked solution (faded worked examples) so that the students can explain how they arrived to the final solution [11], [12], [13], [14].
Research within both approaches focuses primarily on adapting the rules which recommend learning actions more than on giving the learner the freedom to experiment with [15], [16], [17], [18], [19]. Experimentation in both approaches is controlled, that is, the instructor establishes the exercises that learners should or can do. These learners have no freedom to propose new exercises that they might come up with. Recent research has focused on open learning environments, where the set of exercises is not limited to a predefined set, or where the learners can create new exercises [20], [21], [22], [23], [24], [25], [26]. These systems provide a language that enables the generation of exercises and the communication with the learners, which may be a standard language (e.g. eXtensible Markup Language – XML) [22], [26] or a Domain Specific Language (DSL) specifically designed for the problem to be solved [23], [24], [25]. On the other hand, there are systems that focus on the ability for the students to create exercises on their own initiative and upload them into the system, which will solve them and explain how the solutions are reached [20], [21].
These last systems are undoubtedly a major advance in getting the learners to construct their own knowledge through experimentation, working with abstractions which require high level thinking skills. They enable the learners to work at higher levels of Bloom’s Taxonomy [27], [28] and help them to gain independent thinking skills. However, these systems do not include an ITS module that adapts to the needs of the learners by making recommendations of the following activities to be done in order to guide their learning process, nor do they provide feedback on what they are doing right or wrong. Designing and developing ITS with this last approach is complex since they are usually highly-dependent on the subject and problems to which they are applied. Moreover, they must work with the exercises that the learner creates at any time, which is highly unpredictable.
In this paper an ITS has been designed and developed for providing a rich learning environment in which students can learn actively, freely creating exercises, which allow them to operate and manipulate subject matter concepts. Our proposal is specially focused on the tutoring module and how it corrects exercises, gives feedback and promotes progress in student learning. The developed system behaves as an expert system simulating the behaviour of the instructor [2] who applies an active teaching methodology that promotes learning through experimentation.
The developed ITS helps students learn predictive parsing algorithms, which are a type of exercises found in Compiler Design or Formal Language Processing subjects. These are part of Computer Science theory, and are included in the syllabuses for this degree at most universities.
The remaining sections have been organized as follows. In Section 2, the subject and type of exercises the ITS helps to learn will be briefly presented. In Section 3 the system set out herein will be developed with a special focus on the system architecture (Section 3.1), the interface module (Section 3.2) and tutor module (Section 3.3) with a strong focus on the way in which the system automatically corrects exercises (Section 3.3.3) and guides student learning by making recommendations (Section 3.3.4). In Section 4, there will be an initial evaluation of the system put forward herein. Lastly, in the final section of this paper, there will be a conclusion and future lines of work will be mentioned.
