Intelligent management systems in hospitals help to achieving a better and optimized use of intensive shared resources, which is a big challenge, particularly in the face of overwhelming demand and limited resources when a severe pandemic, such the Coronavirus [35], happens. Operating room and recovery room are two of the most resource-intensive areas in a hospital. For the purpose of reducing cost while maintaining a good quality of care, effective scheduling of operation room beds and recovery room beds has become one of the major priorities.
Upon the completion of a surgery on the operating room bed, each patient should be transferred to a recovery bed as soon as possible to start the postanesthesia procedure. Operating room beds are capable of doing the operations of recovery room beds. In contrast, a recovery room bed is usually lack of necessary equipments for surgical operations. Thus unavailability of a bed in the recovery room at the end of a surgical operation can incur the beginning of postanesthesia procedure in the operating room until the discharge of a bed in the recovery room [14].
Motivated by the aforementioned scenario, we introduce and investigate a meaningful two-stage flowshop scheduling problem. Formally, there are two machines M1 and M2 and a job set J={J1,J2,…,Jn}. Each job Ji,i∈{1,2,…,n} has two operations Ai and Bi, named as the first- and second-stage operation respectively, which must be processed in order without preemption and any time delay. That is, 1) both Ai and Bi should be processed non-preemptively; 2) once Ai is completed, Bi has to be processed immediately; 3) Bi cannot start processing until Ai has been completely processed. Besides, we add flexibility for the first-stage machine M1 such that it is able to process the second-stage operations, as an analogy with the relation between operating room and recovery room. We say M1 has the multi-task flexibility. Our goal is the minimize the makespan, i.e. the maximum completion time of all jobs. To name our problem, we adopt the three-field notation α|β|γ introduced by Graham et al. [12]. In the α field (i.e. the scheduling environment), we use F2 to represent the two-stage flowshop. In the β field (i.e. the job characteristics and constraints), we use “nwt” to represent the no-wait constraint and “mt flx M1→M2” to represent the multi-task flexibility of the first-stage machine. In the γ field (i.e. the objective function), we use Cmax to represent the classic makespan minimization. Thus our problem can be denoted as F2|nwt,mtflxM1→M2|Cmax.
Flowshop problems with either nwt or mt flx constraint have been studied extensively in the literature [13], [4], [22], [18], [31]. However, the exploration of a flowshop under both the nwt and mt flx constraints is rare. To the best of our knowledge, the F2|nwt,mtflxM1→M2|Cmax problem has never been studied before, though a preemptive version, i.e. F2|nwt,mtflx,prmp|Cmax, was presented by Khorasanian and Moslehi [16], who gave two mathematical models optimally solving small-sized instances and a local search heuristic for the large-sized instances. We, on the other hand, focus on the design of approximation algorithm. Suppose A is any approximation algorithm and I is an instance. Let CmaxA(I) and Cmax∗(I) denote the makespan generated by A and the optimal algorithm, respectively. The performance ratio of the algorithm A on I is CmaxA(I)Cmax∗(I). The algorithm A is a ρ-approximation for a minimization problem if supICmaxA(I)Cmax∗(I)⩽ρ.
Our main contributes are summarized as follows.
•We propose a new scheduling model F2|nwt,mtflxM1→M2|Cmax, which finds applications in hospital intelligent management systems. In addition, our F2|nwt,mtflxM1→M2|Cmax problem is able to model more real-world applications and thus has profound practical impact. The automated computer numerical control (CNC) machines are widely applied in metal cutting industries. They are highly flexible and can perform different operations as long as the cutting tools required for these operations are loaded in the tool magazine of the machine [7]. Due to the expensive cost of the CNC machines, the multi-task flexibility is allowed on these machines to decrease the operating cost. Multi-task flexibility can also arise in the assembly of printed circuit boards (PCB), as the feeder tapes holding the components to be inserted may be present either on one machine only, or on several machines. In modern manufacturing systems, robots are installed in order to reduce labor cost, to increase output, to provide more flexible production systems and to replace people working in dangerous or hazardous conditions [5]. They are mainly used as material handling devices in robotic cells, where a robotic cell contains two or more robot-served machines [15]. There are no buffers at or between the machines, which requires the job scheduling to satisfy the no-wait constraints. Considering modern manufacturing systems where each robot cell contains CNC machines or PCBs, our F2|nwt,mtflxM1→M2|Cmax problem can perfectly model these applications.•We study the NP-hardness of the proposed problem and present a NP-hardness proof via a reduction from the Partition problem. We also design an approximation algorithm with a worst-case performance ratio of 138. At a high level, we first obtain a non-trivial lower bound for the optimal solution; then propose two greedy algorithms, which utilize the no-wait and multi-task flexibility constraints to explore the structural properties of our problem; finally construct an intricate combinatorial algorithm by invoking the aforementioned two algorithms as subroutines. A case-by-case analysis shows the approximation ratio 138. The discovered structural properties are of independent interest as it can be utilized to study other related scheduling problems.
