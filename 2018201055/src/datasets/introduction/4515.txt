“The past decade has brought explosive growth in multiprocessor computing, including multi-core processors and distributed data centers. As a result, parallel and distributed computing has moved from a largely elective topic to become more of a core component of undergraduate computing curricula”.  [1]
Instruction in parallel and distributed computing has traditionally been relegated to a few isolated courses, taught primarily in the context of scientific computing, distributed systems or computer networks. With the ubiquity of multi-core CPUs, GPUs, and clusters, parallel systems are now the norm. Furthermore, the era of Big Data and data-intensive computing has ushered in an expansive growth in the application and use of parallel and distributed computing. These two trends together have led to parallel and distributed computing becoming pervasive throughout computer science, resulting in their increasingly becoming a core part of the field.
The ubiquity of parallel and distributed computing is also reflected in the ACM/IEEE Task Force’s 2013 CS education curriculum  [1] that added a new knowledge area in Parallel and Distributed Computing, which stresses the importance of teaching parallel computation throughout the undergraduate curriculum. Additionally, the NSF/IEEE-TCPP 2012 Curriculum Initiative on Parallel and Distributed Computing  [17] provides guidance and support for departments looking to expand the coverage of parallel and distributed topics in their undergraduate programs.1
Prior to our curricular changes, we taught parallel and distributed computing in only two of our upper-level elective courses. As a result, many of our CS majors had no instruction in these topics. The changes we made were driven in part by our desire to ensure that every Swarthmore CS major and minor is exposed to parallel and distributed computing.
There are several main goals in the design of our curriculum: 
1.Ensure that students are exposed to parallelism early by integrating it into our introductory sequence.2.Provide repetition of this content so that students are exposed to parallel and distributed topics multiple times.3.Provide both a breadth of topic coverage as well as opportunities for students to go in depth in some areas.4.Expose students to parallel and distributed topics in the context of multiple sub-disciplines rather than being isolated into specialized parallel and distributed courses. We want our curriculum to mirror the ubiquity of parallel and distributed computing by integrating these topics into a broad range of courses across our curriculum.
In addition to our primary goals, we also want our efforts to increase opportunities for students to participate in parallel and distributed research projects.
Ultimately, we want every student to be exposed to fundamental issues in parallel and distributed computing from the algorithmic, systems, architecture, programming, and applications perspectives. Our pedagogical focus is to teach students the skills to analyze and problem solve in parallel and distributed environments; our overriding focus is on teaching “parallel thinking.”
In Fall 2012 we first introduced changes to our curriculum that were designed to meet these goals. Our solution had to work within the constraints of a small liberal arts college, most notably, we could not increase the number of required courses for the major or deepen the prerequisite hierarchy of our classes.
The key component of our curricular change is the addition of a new intermediate-level course, Introduction to Computer Systems. It covers machine organization, an introduction to operating systems, and an introduction to parallel computing focusing on shared memory parallelism. The addition of this new course allowed us to factor out introductory material from many upper-level courses, leaving space in these classes that we could easily fill with new and expanded parallel and distributed computing content.
To date, we have added and expanded coverage of parallel and distributed computing in eight upper-level courses. We continue this expansion both within courses that already have some content and also into courses that traditionally have not had such coverage. Prior to our curricular changes students could graduate with a CS major from Swarthmore without ever being exposed to computer systems or to parallel and distributed computing. Since our change, every graduating CS major and minor has both breadth and depth of exposure to these important topics.
