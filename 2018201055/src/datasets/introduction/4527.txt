Complex networks representing relationships between data items and repositories of highly dimensional feature vectors are the most common, interrelated important sources of knowledge. Therefore, graph visualization (GV) and data embedding (DE) are the two related problems [1], which are tightly coupled with data mining and knowledge extraction. These problems of interactive visualization of complex data structures become particularly important in the advent of Big Data era.
The correctness of graph visualization is usually estimated on a very imprecise criterion of aesthetics. For example, it is generally agreed that depiction of graph symmetry with minimal edge crossing and evenly distributed vertices are desirable [2]. However, for visualization of large graphs all of these requirements are rather secondary. Usually, we are not able and/or we are not interested to visualize all the vertices and edges of the scrutinized big network. Efficient extraction of knowledge and development of reliable data models depend strongly on understanding of multi-scale structures of data being investigated. Particularly, it concerns their multilevel structure [2] and local mutual relationships between data items, including such rudimentary properties as data separation, clustering, the nearest (or near) neighbors finding, and more sophisticated features based on statistical distributions of data items, their attributes and structural graph descriptors.
Therefore, in graph visualization we look rather for structural features and patterns, which may carry important information, such as clustering of vertices and grouping of edges reflecting interrelations between these clusters. In this context, the approach based on multidimensional scaling and force-directed error minimization method is more useful in extracting real multi-scale structure than aesthetic criteria. The latter can be applied in the post processing.
It is not a surprise, that both GV and DE problems use similar methodologies and algorithms for low-dimensional embedding such as the multidimensional scaling (MDS) method [1], [3]. When used in data embedding problem, MDS computes a n-dimensional reconstruction v = {ri,i = 1,…,N} of M-dimensional data V = {Ri,i = 1,…,N}, where n ≪ M and N is the number of feature vectors Ri and their corresponding low-dimensional agents ri. This mapping is realized by minimizing the difference (the error) between mutual Euclidean distances d = {dij}NxN in the “target” low-dimensional (nD) space and corresponding dissimilarity measures (dissimilarities) D = {δij}NxN in the “source” high-dimensional (MD) space. The quality of embedding depends on the form of the error function E(||D-d||):ℜnxM→ℜ1 (called “the stress function”) and its minimization method. Usually, it is defined as follows:(1)E(‖D−d‖)=minvΣiEi(‖Di−di‖)=minvΣijNwij(δijk−dijk)mThe values of k,m are the parameters of E(.), while wij are the weights.
In the case of graph visualization, the definition of classical MDS can be very similar. Instead of the feature vectors we have now vertices V = {ωi,i = 1,…,N} of a graph G(V,E) (where N = |V| and E is the set of edges), for which dissimilarities δ(ωi,ωj) can be computed, e.g., as the shortest path between vertices i and j. Consequently, the vertices V are represented by 2D points v = {vi,i = 1,…,N} with corresponding positions ri and Euclidean distances dij between them. The goal of GV is such a reconstruction of G(V,E) in 2D space that (Eq. (1)) is minimized.
To minimize the error (Eq. (1)) the force-driven method is one of the most effective and efficient approaches [4], [5]. Many types of force-directed methods and algorithms were used both for vector visualization and data embedding problems [1], [4], [5], [6], [7], [8]. Neglecting technical details, all of them are based on N-body dynamics (such as molecular dynamics [9]) where the low-dimensional embedding of a graph (or a data set for DE) is represented by a stable – minimum energy – configuration of an ensemble of interacting particles (representing data vectors or graph vertices) evolving in the 2D (or 3D) Euclidean space.
The main problem in graph embedding by using MDS and similar force-directed methods is O(|V|2) (or O(N2)) time and space complexity. Take into account, however, that reported computational complexity of the force-directed methods concerns only one step of iterative process of the stress function optimization. The number of iterations to obtain the stable solution of (1) depends on the problem size, optimization method employed and quality of the minimum obtained. Even by using modern approximations of the MDS approach, realized on the contemporary computer architectures (multi-core CPU, MIC, and GPGPU) the computational challenge occurs just at the scale of 104 vertices (or data vectors). To make the method useful for fast visualization of graphs with N = 106+ vertices we propose here a drastic simplification of the classical MDS, which not only decreases the time and space complexity from O(|V|2) to O(|V|) but improves vertices separation as well, revealing in the 2D Eucildean space multi-scale structural properties of complex networks.
In the following sections we present the details of our ivga (interactive visualization of graphs) graph drawing method and we show that it allows us for very fast interactive visualization of big networks consisting of more than a million vertices, such as those from the Stanford Large Network Dataset Collection. Next, we discuss the pros and cons of the ivga method in the context of competitive approaches, particularly, the recent state-of-art graph visualization algorithms. In the conclusions we summarize our findings.
