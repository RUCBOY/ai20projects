Emerging distributed computing scenarios, such as those envisioned in the context of the Internet of Things (IoT), Cyber–Physical Systems (CPSs), and Edge Computing, are generally characterised by large scale, heterogeneity, dynamicity, and openness. These aspects, taken together, lead to two main problems. The first is a problem of integration: putting and re-arranging devices together into a cohesive structure and network of interactions to effectively and efficiently promote some system function. The second is an operational problem: harnessing complexity so as to be able to evolve systems by reacting to change in a timely and cost-effective manner. Given the physical, logical, and temporal scales involved, addressing the above problems through static systems specifications and human-in-the-loop approaches appears unfeasible.
In the vision of autonomic computing [1], this issue is to be addressed by making a system itself responsible for interconnecting its own components (and among the others, incorporating addition of new devices), and for making their cooperation fully-adaptive to continuous change (changes of context, faults, and other inherent sources of dynamicity) following the high-level goals expressed by the designers. Specifically, the case when autonomic behaviour is engineered to achieve proper integration of system components, is referred to as the self-integrating property, or putting it equivalently, as the problem of self-adaptive integration: the system should be instrumented by an autonomous process that continuously creates or adjusts interactional structures and responsibilities in order to promote the pursuing of system goals opportunistically from the set of available devices or components. The significance of the problem is witnessed by the Self-Improving System Integration (SISSY) initiative [2], which promotes the study of self-* approaches for systems of systems [3], interwoven systems [4], and organic computing systems [5], where heterogeneity, real-time demands, mutual influences, and unpredictability take over.
The problem of (self-)integration is especially relevant in emergent IoT-based heterogeneous ecosystems and collaborative scenarios where networked ensembles of devices need to operate in their locality by coordinating activities and decision making because, e.g., the information, rights, or resources available at an individual device are not sufficient for it to autonomously carry out the tasks at hand. There, indeed, structures should be continuously adjusted to foster synergistic interactions supporting both individual and collective activity. As fully peer-to-peer approaches tend to be globally inefficient, the pattern that emerges in the literature [6], [7] for tackling this problem – especially for networks that are large-scale, heterogeneous, and often also open and situated – typically follows the divide-and-conquer principle: breaking the system into a number of space-driven subsystems managed by leader devices that collect feedback from (and enact decisions to) a subset of other participants (workers or users). We call this pattern Self-organising Coordination Regions (SCR), since it works through an internally-regulated, adaptive organisation of devices in regions where activity is coordinated via feedback/control flows among master and worker nodes. Examples of pattern usage, which provide motivation for the current work (and are reviewed in this paper), include self-adaptive software architectures [6], [8], decentralised orchestration systems [9], [10], crowd management [11], [12], robot swarm control [13], wireless sensor networks [14], [15], and target tracking [16], [17]. We define the pattern by analysing and abstracting from the large amount of corresponding related work, while at the same time exploring and documenting its variety of forms.
This paper provides the following contributions:

1.it presents and discusses a design pattern for partitioned integration and coordination that aims at fostering adaptive, resilient self-integration in large-scale situated systems;2.it proposes a possible decentralised, self-organising implementation of the pattern in the aggregate computing framework [11] that sums to a composition of continuously self-adaptive collective behaviours; and3.it shows the significance and applicability of the pattern through case studies in the context of layered network infrastructures and edge computing.
Accordingly, this work can be considered as a contribution to the SISSY initiative and its goals, addressing issues raised in the areas of design and architecture (the pattern), cooperation and self-* mechanisms (aggregate computing), and applications (edge computing and resource management in hierarchical networks).
This article is an extended version of the conference paper [7], providing new material which can be summarised in the following additional contributions: (i) extensive literature research revealing more known uses of the pattern as well as more related patterns; (ii) contextualisation of the work in the context of SISSY; (iii) improved and extended description of the pattern, including a more complete treatment of its underlying mechanisms and extensions; and (iv) an entirely new case study, demonstrating the usefulness of the pattern in (non-spatially situated) hierarchical networks.
The organisation of the manuscript is as follows. Section 2 presents the target context and provides motivation for the pattern by discussing its sub-patterns, related patterns, and known uses. Section 3 describes the SCR pattern by covering and detailing its goals, structural and dynamical dimensions, applicability issues, variants, and terminology. Section 4 discusses implementation issues and provides an implementation template of the pattern in the aggregate programming framework as a functional composition of collective adaptive behaviours. Section 5 provides empirical evaluation on two diverse scenarios making for use cases of the pattern. Finally, Section 6 draws conclusions and points out directions for future work.
