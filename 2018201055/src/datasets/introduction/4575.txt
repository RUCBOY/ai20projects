Taking the ride of Moore’s Law, the performance of computation increases dramatically in mobile area. As a result, energy consumption becomes a bottleneck when designing a mobile chip. To address energy issue without performance drop, application specific accelerators involve the computation tasks with its nature, i.e., energy-efficiency and fast processing speed. For example, there are graphics processing unit (GPU) [1] for rendering graphics and image processing, digital signal processor (DSP) [2] which process the analog signal and so on. In addition, there are more application specific accelerators in a mobile chip for very specific tasks, such as GPS controller, Accelerometer monitor, etc.
On mobile chips, integrated accelerators often share the same physical memory for data processing. We believe that features of shared virtual memory and system-wide atomics will be widely used in most programming languages. Recent studies [3], [4], [5], [6] have focused on fine-grain collaboration in the context of CPU-GPU integration with virtually shared memory. As demonstrated in [4], in a vectorAdd kernel [7], using GPU with shared memory can shift the GPU breakeven point from vectors of 128k elements down to vectors of 32k elements.
While the accelerators improve efficiency, the race condition could be a critical issue in the scenario of CPU–GPU collaboration. In addition, the performance profiles of accelerators, e.g., GPU and DSP, are also important when designing the collaborative applications. Both correctness and performance should be considered as a whole when designing applications on heterogeneous platforms. However, no pure-software solution could provide both race-detection and timing at the same time, hardware assistant is usually required in order to monitor memory operations and various counters. Moreover, designing the application and system with performance needs a flexible, pluggable, and fast profiling tool for early stage library and application developer.
Testing race conditions is a difficult job since it does not always happen and neither has to happen at the same program point, which makes it almost impossible to solve by reading the codes with input test cases. Though there are several tools for detecting possible race condition on modern systems [8], [9], [10], none of them target the heterogeneous computing where GPU and other accelerators tightly involve the computation as well. Although the concept of algorithms can still be applied to heterogeneous environments, it is hard to detect races with software only since events happened in accelerators are hard to be captured and synchronized on CPU side. Moreover, it is impossible to log with a correct timestamp on most of the small accelerators, i.e. DSP, NEON. The difficulty could be eased by using emulation environments and monitors all the events on the hardware side.
Existing heterogeneous full system simulators have been used to help reveal the inter-processor communications and race conditions by adding race condition detection on top of it. There are some existing heterogeneous system simulators, e.g. FusionSim [11], Macsim [12], MCMG [13], and Gem5-gpu [14], but they are extremely slow for simulating a full system with modern computing applications. To address the design of heterogeneous platform while having the ability to detect possible race conditions in a timing manner, we implemented race detection algorithm and integrated GPU emulation based on our previous work, VPA framework [15], which is a timing approximate simulator based on QEMU. Besides the benefit of speed, QEMU also provides a very easy and complete interface for hooking customized hardware which are nice for prototyping a customized system [16], [17].
Integrating the VPA and GPU simulator from Multi2Sim [18], we proposed a pluggable interface for GPU modules and memory trace interface for any kinds of modules to reveal the possible race conditions. In addition, the proposed framework also provides application developers and system designers the ability to unveil the performance bottlenecks and improve both of the application and system designs. Comparing with detailed simulations, an order or two orders of speedups brought by timing approximate models brings us the room to monitor and analyze memory access traces for race condition detection. As a demonstration, we implemented a Shared Variable Tracking (SV-Track) race detector to validate the feasibility and performance of the proposed heterogeneous profiling framework. With CPU model from VPA and GPU model from Multi2Sim, our experimental results showed that our emulation speed is up to 9 ×  faster than Multi2Sim when executing OpenCL programs.
The main contributions of our proposed work are:
•Provides a timing approximate, full system emulation tool for heterogeneous platforms•Provides profiling information with cache and memory information for inter-processor communication analysis•Provides a unified interface for plugging in new accelerators in the emulation tool for detecting race conditions and performance analysis in early stage of system development
The rest of the paper further introduces motivations and in Section 2, and describes the proposed framework and its implementation in Section 3. After that, our experimental results and emulation time comparison are shown in Section 4. Then we talk about the related works in Section 5, and finally present our conclusion and possible future works in Section 6.
