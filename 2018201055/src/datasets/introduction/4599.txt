Many real world problems can be modeled as networks with vertices representing objects and the links denoting their relationship. As a result, analysis of complex networks has become a recent trend in many branches of science. As part of the growth of social networks, Social Network Analysis (SNA) has become an important area in applied mathematics and computer science. One challenging feature of social networks is that they can grow and change over time by adding and removing both edges and nodes. Consequently, predicting the possible links between two nodes in a network has become an attractive as well as interesting affair. For example, predicting a link between two persons in a social network can increase their friend circle which in turn will help the growth of social networks.
The goal of link prediction [8], [28] is to estimate the likelihood of the existence of links between nodes in social networks. Many specialized link prediction methods have been proposed, but most of them have low prediction accuracy and are not well suited for predicting links in large-scale networks. Recent studies [22], [26] show that the precision of the link prediction methods can be improved by using community structure information of the network. A community in a network is a densely connected collection of vertices which are sparsely linked to other collections. Most of the studies show that the newly added edges are inter-community edges rather than intra-community edges. An important challenge to community structure-based link prediction is that most of the real world graphs like social and communication networks are very big and they require specialized methods for storage and processing. The growth of social media data has brought attention to the need of scaling social network analysis methods to real world networks that contain billions of vertices and edges. Sampling, streaming, local graph processing and parallelization are some of the strategies that can be used to scale community discovery and link prediction methods to networks of such magnitude. Since the conventional algorithms for community structure detection and link prediction are based on single system environment, they are not suitable for large networks.
The use of big data platforms [18], [20] for the parallelization of graph algorithms has gained attraction in the past few years. The widely used big data model, MapReduce [4] is not well suited for graph processing due to the iterative nature of graph algorithms which require graph data to be re-assigned to every iteration and create large I/O overhead. A scalable and efficient parallel processing method, based on BSP (Bulk Synchronous Parallel) programming model, is proposed in this work for detecting community structures and predicting links. BSP [25] is a parallel computing model proposed by Valiant. Gaining inspirations from the BSP model, Google developed a fault-tolerant and distributed computing framework for parallel graph processing called Pregel [11]. Pregel uses message passing interface as the communication primitive and the distributed main memory of the nodes in the cluster for graph storage. Later, many open source tools were developed by following the Pregel framework. Apache Giraph, Hama and Graphx are some of the open source implementations that support BSP programming model. Hama is a pure BSP engine, whereas Giraph and Graphx are specialized graph analytic engines.
The contributions of this work can be summarized as follows. We propose a hybrid similarity measure for link prediction based on Adamic–Adar measure, the community structure information of the network and the degree centrality of within-community common neighbors. Using Bulk Synchronous Parallel programming model, we developed a parallel label propagation algorithm for community detection. We have also developed a parallel algorithm to find the proposed similarity score for link prediction. This algorithm can predict the missing links and rank the newly-predicted links. The network datasets of various domains were used for measuring the performance and the scalability of these algorithms.
