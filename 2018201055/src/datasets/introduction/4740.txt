A significant portion of the energy consumed by network devices is usually wasted due to under-utilization or staying powered-up even when idle [1]. About 2% of the overall US electricity is consumed by computers according to the Environmental Protection Agency (EPA) [2]. Whereas, computers in office environment stay idle for more than 60% of the time but are still kept powered-up [3]. The main reason due to which people never switch off their computers is to stay ‘Always Connected’ for remote access, VoIP and Instant Messaging (IM) clients and other Internet based applications. The Advanced Configuration and Power Interface (ACPI) proposed several low power management states for computers but they are rarely used due to their inability to maintain always-connected status. Thus, huge energy savings are possible if computers can extensively use ACPI low power states without losing the always-connected status [4].
The Network Connectivity Proxy (NCP) concept is recently proposed in literature as an effective mechanism to reduce the network energy waste by allowing unattended idle devices to sleep without losing network presence [5], [6]. The NCP concept ensures that devices sleep for the maximum possible time and it wakes them up only when their resources are required [7]. To achieve this objective, the NCP seamlessly impersonates link, network, transport and application layers presence on-behalf of sleeping devices [5], [8], [9]. Although the NCP concept is quite beneficial,its practical realization is very complex and challenging especially when concerning proxying of TCP connections and ever increasing number of Internet-based applications [10]. Different proxying techniques have been investigated in the literature, however, they are always limited to a specific protocol or open source application [11], [12]. The two most common ways of proxying applications are application specific stubs [8] and freeze/resume features [5], [13]. Application stub is the light-weight version of original application derived or re-written from its source code. But freeze/resume approach requires modification to application to include new features. Both application proxying strategies are not applicable for proprietary closed-source applications. It is important to note that majority of commonly used applications in day-to-day life are proprietary closed source. Till now, the NCP concept lacks the capability to proxy closed-source applications.
Similar to desktop computers, the Internet-connected smartphones also became an important part of our daily life. Today, the smartphones are capable to run the same latest operating systems as available for the desktop computers including Microsoft Windows, Ubuntu, etc. Thus, the smartphones are able to offer all the same features and run the same applications as the desktop computers. The energy savings in the case of smartphone has no significant importance as it is already a very low power device. However, reducing energy waste can help to significantly improve the battery life [14]. Similar to computers, the applications on smartphone also demand always-connected status. Thus, the applications such as viber, skype, facebook messenger, whatsapp, vonage and other VoIP and IM applications periodically transmit/receive presence or heartbeat messages over Internet. These applications not only consume the mobile data but also use phone resources such as CPU, memory and hardware components such as WiFi, 3G/4G or some built-in sensors. In short, the smartphones battery life can be significantly improved if they run applications only when desirable.
In our daily life, multiple devices run the same applications concurrently (especially the smartphone always stay connected). In this paper, we present a new approach that can be easily realized practically to achieve all the benefits of NCP. Our proposed approach uses intelligent collaboration among daily used fixed (e.g., desktop computers) and mobile devices (e.g., smartphones, tablets, laptops). Instead of proxying, it guarantees to run applications on one and only one user device at any given instant. Thus, the applications run on either a smartphone or tablet or laptop or desktop PC or any other device currently under active use. For example, if the user is using a desktop computer, it will run all applications while other devices will reduce energy waste by stopping the applications. When the user is not using desktop computer, it can enter into sleep mode and a smartphone will maintain the presence of applications. Our proposed approach also uses a light weight Home Gateway Proxy (HGP) but with very basic practically realizable features. The HGP impersonates basic networking protocols (i.e., ARP, PING) on behalf of sleeping desktop computers and wake them up whenever necessary (e.g., remote access connection request is received). The proposed approach not only reduces the entire network energy waste but also helps in improving significantly the battery life of smartphones by running the applications only for short periods when desirable. Our main design goal in this paper is to achieve autonomous and seamless communication among different user devices without requiring any user input or configurations. For this purpose, our developed prototypes are based on the flexible and reliable Universal Plug & Play (UPnP) architecture. The UPnP architecture is suitable for any network device and guarantees zero configuration, auto-discovery and seamless communication among devices of interest. Finally, this paper also evaluates the performance of developed prototypes in real networking environments.
The rest of the paper is organized as follows: Section 2 presents a brief literature review. Section 3 motivates the proposed framework by addressing the issues and challenges in previous approaches. Section 4 presents detailed architectural design of our proposed system. Section 5 presents the light-weight HGP with very basic set of practically realizable features. Section 6 presents the implementation of software prototypes. Section 7 presents measurements and performance evaluation. Finally, Section 8 concludes the paper.
