During past decades, the capacity of NAND flash memory has been increasing dramatically, leading to the use of nonvolatile flash in the system’s memory hierarchy [1]. However, storage interfaces for accessing secondary storage devices have remained largely unchanged since the invention of magnetic disk. Three storage primitives (i.e., seek, read, and write) are still being used as fundamental interfaces to persistent storage. These legacy storage primitives force secondary storage devices to behave as a fast block device like magnetic disk and ignore the possibility to boost the performance of storage devices with other types of non-volatile memory, especially NAND flash memory. As existing storage primitives are designed to cater for the traditional hard disk, considerable efforts at architectural and operating system levels are required to facilitate smooth access to NAND flash memory as secondary storage.
In order to utilize the unique feature of NAND flash memory, storage virtualization has been adopted to introduce abstraction between physical storage device and the logical device presented to the host application. Some recent virtualization techniques adopt a new class of emerging storage primitives beyond traditional block I/O. By providing address remapping at the application-level [2], it effectively extends current storage primitives and provides more flexibility to users. Despite its promising benefits, this technique still suffers from unnecessary write and update operations for NAND flash memory devices, which will significantly affect the endurance and access latency of storage systems. The large RAM cost to maintain the address mappings in these virtualization techniques will also degrade the performance of storage systems. These observations motivate us to design an optimization strategy to enhance the emerging storage primitives and to reduce RAM footprint for flash memory storage devices.
In previous studies, advanced storage virtualization techniques, such as deduplication and thin-provisioning, have shown greater flexibility to manipulate address remapping and re-direct I/O [3], [4], [5]. Flash translation layer (FTL) is also a type of virtualization that manages the address translation between logical and physical addresses for flash memory devices. However, these optimization techniques are still working behind the block device interface, resulting in sub-optimal access performance across various storage layers. FTL also restricts the range of the logical addresses to be the same as that of the physical addresses [6]. This will prevent the application users from directly controlling the I/O accesses in flash memory devices.
In this paper, we present ESP to optimize E merging S torage P rimitives with virtualization for flash memory storage systems. ESP adopts emerging storage primitives and handles the virtual addresses to achieve reduced updates to the flash memory storage systems, with the resulting advantage that file operations from application users can directly manipulate the I/O accesses without incurring extra RAM cost. With ESP, file system users can continue to enjoy advanced file system features, such as scalability and performance enhancements for large files. By manipulating the address translation between virtual address and logical address, ESP can significantly reduce unnecessary I/O operations. Therefore, it can boost the access performance and extend the life time of NAND flash memory devices.
ESP adopts two strategies to handle write/read requests from the file system and transparently issues the requests to flash translation layer. ESP uses virtual duplication strategy to maintain the address mappings where multiple virtual addresses with the same content could be pointed to the same logical address. Emerging storage primitives are utilized to facilitate the address translation. ESP also uses mapping prefetching strategy to reduce the RAM cost for maintaining virtual to logical address mappings. The address mapping table is stored in flash memory, and only limited mapping items are prefetched to working RAM based on the demand fashion. By using these two strategies, ESP can take advantage of emerging storage primitives and keep the RAM cost well under control.
We applied ESP to the ext3 file system and tested the performance using a variety of I/O traces. We use response time and garbage collection overhead as metrics to evaluate the performance of ESP. Experimental results show that our approach can improve the response time by 56.71% and reduce an average of 34.10% for garbage collection operations in comparison with a representative scheme that uses emerging storage primitives.
This paper makes the following contributions:
•We present reliability enhancement strategies that can transparently protect the data integrity of metadata in NAND flash memory.•We demonstrate the effectiveness of our technique by comparing with representative works using a set of realistic I/O traces.
The rest of this paper is organized as follows. Section 2 discusses the motivation and analyzes the problem. Section 3 presents our proposed ESP in detail. Section 4 presents experimental results. Finally, Section 5 concludes this paper and discusses future work.
