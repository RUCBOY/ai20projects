Mesh generation is a fundamental and critical problem in geometric data modeling and processing. In most computer-aided engineering (CAE) tasks that involve numerical simulations (i.e., solving partial differential equations (PDE) using finite element or finite volume methods (FEM/FVM)) on geometric regions or objects, the first step is to discretize the geometries using polygonal or polyhedral meshes. The mesh quality significantly affects the accuracy, efficiency, and stability of the numerical computation. According to the geometry of cell elements, meshes are classified into simplex meshes (such as triangular meshes in 2D and tetrahedral meshes in 3D) and parallelotope meshes (such as quadrilateral meshes in 2D and hexahedral meshes in 3D). If we consider the regularity of the tessellation, regular meshes, also called structured meshes, are those whose vertices have constant valences and cells are arranged with regular connectivity. Irregular meshes, or unstructured meshes, in contrast, allow their elements to be arranged with irregular connectivity. A semi-structured mesh, also called block-structured mesh, is one that divides the domain into sub-regions, each of which is tessellated by a structured mesh. In many CAE applications, unstructured simplex meshes are commonly used due to their ease of generation. However, it has been reported that structured or semi-structured parallelotope meshes can result in more efficient and accurate FEM/FVM computations in finite element analysis, isogeometric analysis, and many computation-intensive simulation tasks such as structural mechanics, fluid dynamics simulations [1], [2], [3]. In this work, we aim to develop semi-structured quadrilateral meshing algorithms for 2D planar geometric regions.
In recent years, larger and more complex geometric datasets have been acquired or generated in scientific/engineering tasks, which pose new challenges to the design of effective processing algorithms. These big and complex data are expensive to model and analyze using existing sequential algorithms, as the limited CPU and memory are often insufficient to handle massive-sized elements efficiently. Therefore, it is highly desirable to have distributed and parallel algorithms that can utilize high-performance computing clusters or cloud resources to overcome these scale and performance issues and solve extremely big and complex problem. Parallel meshing strategies in existing literature are mainly on the generation of irregular simplex meshes, using either Delaunay-based methods or advancing front techniques to generate triangulation or unstructured quadrilateralization [4], [5], [6], [7] for 2D geometries or tetrahedralization [8], [9] for 3D geometries.
To construct semi-structured quad meshes on large geometric data in a distributed manner, we follow the divide-and-conquer approach similar to [7] that partitions the problem into solvable subsizes and processes them using computer clusters in parallel. However, in [7], the simple divide-and-conquer strategy construct solves the subproblem locally just once, i.e., constructing each local mesh from subregion boundary using advancing front, then directly compose a global stitching to get an unstructured quad meshing result. In our work, in order to obtain a semi-structured mesh, we develop an iterative algorithm based on domain decomposition, that coordinates local solutions (local structured mesh generation) from adjacent subdomains until a global convergence is reached. This allows us to better improve the transition smoothness across subregion boundaries and to refine structured block layout and singularity placement.
The main contributions of this paper are two-folded. (1) We propose a new Distributed Poly-square Mapping (DPSM) algorithm that supports the parallel parameterization of extremely big and complex 2D geometries. This DPSM algorithm naturally supports the introduction of interior singularities to reduce mapping distortion. (2) For complex mesh generation, our meshing pipeline can run fully distributedly and in parallel with good scalability. Also, it supports iterative refinement on the structured block layout. Hence, big high-quality semi-structured quad meshes can be constructed on practical big scientific data using high-performance computer clusters.
