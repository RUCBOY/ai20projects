Given real-world graphs with millions of nodes and edges, the most intuitive way to explore the graphs is to construct a correlation plot [1] based on the features of graph nodes. Usually, a heatmap of those scatter points, which is a two-dimensional histogram, is used to depict their density of aggregation [2]. In a histogram, people can visually recognize nodes gathering into separate dense areas as groups (see Fig. 1), which help to explore some interesting patterns (like communities, co-author association behaviors) and spot anomalies (e.g., fraudsters, attackers, fake-reviewers, outliers) in an interpretable way [3], [4].
In particular, graphs can represent various relations, such as friendships on Facebook, ratings from users to items on Amazon, or retweets from users to messages on Twitter, even they are time evolving. So, a snapshot of such graphs has numerous correlated features, e.g., degree, #triangle, and PageRank, the combination of which will generate many correlation plots. However, it becomes labor-intensive to manually monitor and recognize patterns from the histogram of the snapshots for temporal graphs. Moreover, if extended to more features, the visualization and pattern-recognition become difficult for the resultant multi-dimensional histogram. This raises the following question.
Question 1Given a histogram of the correlation plot of graph nodes in some feature spaces, how can we design an effective algorithm to automatically•recognize the node groups as human vision does?•summarize the point distribution in the feature spaces?•identify some suspicious micro-clusters?
