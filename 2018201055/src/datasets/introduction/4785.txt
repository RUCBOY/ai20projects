Undergraduate students majoring in Computer Science and Software Engineering (CSE) often find it difficult to master the complicated concepts of concurrency and parallel programming (CPP) and therefore tend to postpone this subject for as long as possible or avoid it all together. Improving how this subject is taught at all levels (primary, secondary and university) is of paramount importance so that the parallel potential offered by multi- and many-core processors can be exploited in order to raise the education standards of pupils, in general, and CSE undergraduates, in particular. One non-obvious problem that teachers need to address is the fact that although students may have similar academic backgrounds, each learns and masters key CPP aspects at a different rate. Teaching a CPP class is therefore extremely difficult and it is virtually impossible to predict the pass rate  [4]. Our main concern is to encourage students to play a more active role in class and to make class activities more student centered by applying our method  [36], through the integration of teaching techniques based on information and communication technologies (ICT)  [33], and subsequently by fostering greater interest in the subject on CPP courses.
While other authors  [24], [26], [14], [7] have highlighted the importance of integrating ICT technologies and choosing the correct technique, teachers and students can only benefit from such an approach if everyone masters the technologies to be taught. Certain authors  [26] have evaluated ICT-based teaching methods and their study results show that the so-called using as a tool method (i.e., a technique based on program patterns) is the most effective for successfully teaching programming to students  [3]. On the other hand, the studied authors believe that presenting students with a large number of examples and code snippets is a bad method of teaching since it will train students to be merely mechanical coders rather than mindful programmers. Our proposal is also in keeping with the new parallel programming didactics supported by other authors  [12], [32], [35] regarding earlier curricular integration of CPP topics in accordance with NSF/TCPP curriculum 2012  [30] recommendations. We also concur that concurrency must be taught early on in the CSE curriculum in the context of or in connection with the data structure course. However, we do not agree that Parallel Programming should be studied separately from this subject as an elective subject.
In this article we propose a method to teach CPP based on information and communication technologies so that students are first introduced to complex syntactical constructs and computer program code-patterns in order to solve common resource access and code parallelism problems in new software for multiprocessor architectures. We therefore discuss two paradigmatic program patterns taken from lectures taught using the new teaching model to show how the proposed method can be implemented with real examples.
The paper concludes with an evaluation of the students’ performance when they are taught with the proposal compared with other courses on the same subject. It also presents the results of an implementation of the method proposal as an innovative teaching project undertaken at the University of Cádiz (UCA) in Spain over two consecutive academic years (2013–2014 and 2014–2015).
The paper is organized as follows: Section  2 examines the curricular context in which the experiment was developed. Section  3 describes not only how patterns can be introduced as a useful tool for CPP teaching with the support of WIFI and the University’s “Virtual Campus” facilities but also the experimental objectives, time scheduling, development methodology and the term-long project model. Section  4 details how the experiment was evaluated and results analyzed and finally, Section  5 outlines the conclusions reached and future work to be developed.
