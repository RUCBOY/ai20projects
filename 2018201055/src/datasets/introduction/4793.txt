Storage systems have long been a major I/O bottleneck in modern computer systems. To eliminate this bottleneck, solid-state, non-volatile memory technologies, have been proposed to replace traditional hard disk drives. Storage class memory (SCM) represents a new class of data storage and memory devices, which blur the distinction between memory and storage.
Despite its promising benefits (e.g., low power consumption, non-volatility and high density), SCM still suffers from the lack of a unified storage architecture to fully realize its potentials. As existing operating systems are designed to cater for the traditional DRAM-hard disk architecture with a strict distinction between memory and storage, considerable efforts on architectural and operating system support are required to facilitate smooth access to SCM as secondary storage.
In this paper, we present BSS to provide file system-independent Block device Support for Storage class memory. BSS provides a block device interface to the file system and bypasses the existing page cache to achieve direct I/O accesses to SCM, with the resulting advantage that no changes are required to be made to the file system or the hardware implementation of SCM. Consequently, existing file systems can be used on top of BSS directly without any modifications. File system users can continue to enjoy advanced file system features, such as scalability and performance enhancements for large files, without actually noticing that the underlying storage medium is SCM rather than hard disk drives.
This paper offers both architectural and operating system support for SCM. For architectural support, we propose a design of the DRAM-SCM storage architecture and adopt phase change memory (PCM) in this DRAM-SCM architecture. In our architecture, both DRAM and PCM are attached to the memory bus directly through the DDR interface. DRAM is used as primary storage while PCM is intended for secondary storage. The design of memory management unit (MMU) is done so that the memory partitions, which represent memory regions covered by DRAM and PCM modules, can be reported to the operating system.
With the DRAM-SCM architecture, SCM can be accessed through traditional memory instructions. For secondary storage, the access of physical space is based on the sector. The sector is fixed in the secondary storage device, and it does not require further address mappings. Then the process of virtual-to-physical memory address translation for the access to SCM becomes redundant. Therefore, we propose a hybrid CPU mode to facilitate data access to SCM. In the proposed hybrid mode, the addresses for DRAM are still interpreted as virtual ones using the virtual mode. The access to SCM will be conducted through new memory instructions. The SCM addresses are interpreted as physical addresses in MMU. This will prevent the unnecessary address translations in SCM.
In addition to the aforementioned architectural support, we have also provided operating system support to SCM. In order to utilize SCM as a secondary storage device, one possible solution would be to design a new file system specifically for SCM. However, a new file system requires a tremendous amount of design efforts and will only become mature after a long period of time. As a result, our solution is different. BSS maintains backward compatibility by providing a block device interface usually implemented by traditional hard disk drives for file systems. In addition, BSS directly utilizes the new instructions for data transfer and bypasses the traditional disk cache to achieve fast direct I/O access to SCM.
This paper makes the following contributions:

•We propose a file system-independent block device interface for SCM, which provides backward compatibility and transparently supports the integration of SCM in current computer systems.•We bypass traditional disk caches to allow fast direct I/O access to SCM, so that secondary storage can be accessed identically as main memory.•We propose a new hybrid CPU mode for the DRAM-SCM architecture and introduce two new privileged instructions to provide fine-grained, physical access to SCM.
We have implemented the DRAM-SCM architecture on top of QEMU [1], a full-system emulator, by adding new memory regions, maps, and instructions for PCM. The new memory map that contains both DRAM and PCM regions will be reported to the operating system by the BIOS. In addition, we have also built a prototype of BSS in the Linux kernel. In our experimental validation and benchmarking, we strive to demonstrate both the performance advantages and feasibility of the DRAM-SCM architecture and BSS. To the best of our knowledge, this is the first work to provide a comprehensive working design and prototype for SCM as secondary storage, with both architectural and operating system support.
The rest of this paper is organized as follows. We first present an overview of storage class memory in Section 2. We discuss the related work in Section 3. The designs of the DRAM-SCM architecture and BSS are presented in Sections 4 and 5, respectively. Section 6 introduces our implementation details. We evaluate BSS on top of the DRAM-SCM architecture in Section 7. Finally, Section 8 concludes this paper and discusses future work.
