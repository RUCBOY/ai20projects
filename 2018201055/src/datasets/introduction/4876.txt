Cyber-physical systems (CPSes) enable the physical world to integrate with control systems such as embedded devices or the Internet of Things (IOT). Software algorithms run on embedded devices which use sensors to measure physical processes and actuators to control physical components, such as a valve or the brakes on a car. The software is responsible for monitoring and controlling these physical components to ensure that they are operating correctly. Examples of CPSes include industrial control systems, process control, autonomous automobile systems, and medical implants.
The correct functioning of CPSes is crucial, as the failure can lead to injury, damage to equipment, or environmental catastrophe. To ensure their correct operation, we need to ensure that the software that runs on the computational components are not compromised. Exploits that target vulnerabilities in the underlying software are increasingly used to obtain full system access. The attack surface is also increasing, as processors become more interconnected through ad-hoc networks and through the public Internet. Despite a significant amount of research to address the underlying problems of software vulnerabilities, there are still a vast number of attacks that threaten the security of software.
This work aims to protect the software running on low-end microprocessors used in CPSes. We specifically target software applications that do not require an operating system. Low-end microprocessors often lack basic architectural support for security, and are frequently deployed in the field, where it is easy to extract and exploit their software. As we rely on software to control and monitor physical processes, we need to know that the software behaves in a predictable manner, and an adversary should not be able to alter their software or tamper with their operation. Ideally, even if an attacker obtains the code running on a device, he should not be able to understand it and know, e.g., which version of the software is being deployed. Not knowing that will make it harder to exploit potential weaknesses in the software, such as overflows or incomplete input validation.
A lot of research has focused on code injection (One, 1996, Pincus, Baker, 2004) and control flow integrity (CFI) (Abadi et al, 2005a, Abadi et al, 2005b), but current solutions (Bletsch et al, 2011, Davi et al, 2012, Pappas et al, 2013, Tice et al, 2014, Xia et al, 2012, Zhang et al, 2013, Zhang, Sekar, 2013) have been demonstrated to be breakable (Carlini, Wagner, 2014, Davi et al, 2014, Goktas et al, 2014, Schuster et al, 2015), or they require significant hardware (Arora et al, 2005, Danger et al, 2014, Davi et al, 2014, Davi et al, 2015, Kayaalp et al, 2012, Kayaalp et al, 2014, Mao, Wolf, 2010) or OS support found only on high end general-purpose processors. CFI forces a program to follow a control flow path along a Control Flow Graph (CFG) that can be predetermined or calculated at run-time.
Our contribution. In this paper we propose SOFIA, an architecture that defends against attacks based on code injection, code reuse, software tampering, and fault attacks on control flow. The architecture is deeply integrated in a processor's pipeline stages, and relies on cryptographic methods to protect the running software. In particular, SOFIA enforces control flow integrity, software integrity, and code secrecy. In detail, our contributions are as follows:
–We offer reliable tampered code protection, i.e., tampered instructions or instructions that occur during illegal control flow will not be executed. Furthermore, metadata stored in memory is protected from tampering.–We protect against powerful adversaries in control of all memory as well as against fault attacks on control flow.–Our policy is enforced entirely in hardware and does not enforce protection by means of any software stored in memory.
In addition we provide a thorough, real-world evaluation of SOFIA. To this end, we designed and implemented a compiler-based toolchain to transform software to be executed on a SOFIA core. We further implemented a SOFIA core in VHDL as an extension to the LEON3 soft processor. In addition, the performance overhead was evaluated by executing a number of different benchmarks on the SOFIA core programmed on an FPGA.
The remainder of this paper is structured as follows. First, the problem statement is provided including the threat model and system goals. Next, the proposed architecture is described. Afterwards, we present a description of the hardware implementation, followed by implementation details of the toolchain. We then describe the current state-of-the art in control flow integrity and give a security and performance evaluation of our solution. Finally, we conclude our work with an outlook over future research directions.
