Atmospheric general circulation models (AGCMs) are important tools for weather forecasts and climate change research  [1], [2], [3], [4]. An AGCM is also one of the most important components of an earth system model. Because of the importance of AGCMs for climate research, the Institute of Atmospheric Physics (IAP) of the Chinese Academy of Sciences Atmospheric General Circulation Model (IAP AGCM) has been developed since the 1980s  [5], [6], [7]. As the atmospheric component, the fourth version of the IAP AGCM (IAP AGCM4.0)  [8] has been used in the Chinese Academy of Sciences-Earth System Model (CAS-ESM)  [9], [10], [11].
To conduct climate simulation, AGCMs usually need to be integrated for multiple years or decades  [12]. Wehner et al. conducted a 27-year simulation using the Community Atmosphere Model version 5.1 (CAM5.1)  [13]. Nakaegawa et al. used the Meteorological Research Institute AGCM3.1 model to perform 25-year simulations for the present-day and future climate  [4]. In short, AGCMs usually involve a large amount of calculation and a long computing time. Therefore, AGCMs have to be run on a high-performance computing resource in order to meet the real-time requirements of weather forecasting and climate research. Wehner et al. utilized 7680 processing cores to perform the Atmospheric Model Intercomparison Project simulations on a CRAY XE-6 supercomputer  [13]. Meanwhile, with the rapid development of supercomputers and high-performance computing technology, AGCMs can have higher resolution  [14]. Miyamoto et al. used a nonhydrostatic icosahedral atmospheric model to conduct a sub-kilometre global simulation on the K computer  [15].
Before an AGCM is run on a high-performance computing platform, it is necessary to develop a parallel version of the AGCM. Parallel algorithms of AGCMs were studied by climate scientists and computer scientists. Wehner et al. used a two-dimensional latitude/longitude domain decomposition message-passing strategy to implement the UCLA AGCM in a portable parallel form  [16]. Mechoso et al. later optimized the parallel UCLA AGCM code, after which the UCLA AGCM was about nine times faster  [17]. Drake et al. designed a parallel global atmospheric circulation model, PCCM2. During this development, parallel spectral transform, semi-Lagrangian transport, and load balancing algorithms were researched  [18]. Mirin and Sawyer used a message passing interface (MPI) + OpenMP hybrid paradigm to perform a parallel implementation of a finite-volume dynamical core in the CAM. A one-sided communication technique was utilized in the parallel implementation  [1]. Similarly, the parallelization of the IAP AGCM4.0 also needed to be studied and implemented.
At first, the IAP AGCM4.0 used one-dimensional domain decomposition, where each subdomain contained all longitude lines but only a subset of latitude lines. Obviously, it is easy to develop a parallel code for the model by using this method. However, the decomposition strategy limits the maximum number of subdomains and CPU cores which may be exploited. The previous IAP AGCM4.0 can only run on dozens of CPU cores, which is not sufficient to meet the real-time computing demand of climate simulations. Therefore, it is necessary to study more efficient parallel algorithms of the IAP AGCM4.0. To realize this goal, this paper designs and implements a two-dimensional domain decomposition parallel algorithm for the IAP AGCM4.0. The two-dimensional decomposition includes two types, latitude/longitude decomposition and vertical direction/longitude circle direction decomposition, which are both used in the implementation of the parallel algorithm. It is obvious that the transformation from a kind of decomposition to another during the parallel computing of the model has to be performed. Using the two-dimensional domain decomposition strategy, the global domain is decomposed into more subdomains, which are assigned to each process (or MPI rank). Hence, the IAP AGCM4.0 can be processed by more than one thousand processes. Because the IAP AGCM4.0 uses the physics package of CAM3.1, the focus of our research is mainly on the parallel implementation of the dynamical core. Based on a 61-day climate experiment, we evaluate the parallel performance of the IAP AGCM4.0. The results indicate that the IAP AGCM4.0 scales reasonably to 3120 CPU cores and has a desirable parallel performance.
The rest of this paper is organized as follows. The following section introduces the IAP AGCM4.0 model and its dynamical core. In Section  3, we go into detail about the design and implementation of the parallel algorithm with two-dimensional domain decomposition. Section  4 discusses the experimental analysis of the parallel algorithm performance, and the last section contains a summary.
