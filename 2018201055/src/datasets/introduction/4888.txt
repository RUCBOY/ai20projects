In modern computing systems, energy consumption has becoming increasingly important among systems that rely on battery power. Moreover, the proliferation of global computing devices has pushed IT energy consumption higher and higher, raising concerns among many environmentalists. As reported in [1], information and communication technology ecosystems have approached 10% of the world’s electricity generation. The number has been estimated to range from 1100 to 1800 TWh annually. As worries about global warming issue are increasing, this trend changed among environmentalists. The need for reducing IT energy consumption and research efforts in every sector is now necessary, not just for energy savings and extending battery life, but also for the environment.
There are many areas in the layers of computer systems that can be optimized for energy efficiency—from hardware [3], [4], operating systems [5] to application layers [12], [13], [45]. At the software application layer, green or “unpolluted” design of software applications can also help minimize the system energy consumption [2]. However, there are also many areas in the software that affect the system performance and can be optimized for energy efficiency—from user behavior/application workloads [29], [30], [31], coding styles and algorithms [6], [29], [32], to design patterns [33]. Like hardware engineers, software developers too can now join the rest of the communities in the fight to conserve energy.
Today, sustainability has been gaining importance among software engineering communities. There have been many studies that include greenness, carbon footprint and sustainability in existing green software engineering life cycles to promote green and sustainable software development. For example, Naumann et al. propose GREENSOFT, a conceptual reference model for sustainable software [24]; Mahmoud and colleagues propose a new two-level green software model that covers the sustainable life cycle of a software product and the software tools promoting green and environmentally sustainable software [25]; Lago et al. develop a sustainability analysis framework that enables software developers to specifically consider environmental and social dimensions in their green software projects [26]; and, Ardito et al. discuss the importance of the green software development and also present a conceptual framework that provides an high-level overview of the possible operational strategies for developing greener software [36].
Most research is concentrated more on the conceptual and higher level but not much is focused at the lower level, in particular, the coding and implementation phases. There is still a lack of easy-to-use tools that can help programmers develop green software. These tools could help promote green software development and are an important factor for software engineers and developers to consider. In this study, we focus on the application layer, primarily object-oriented software with “interface-based” implementation [6], where there are multiple choices of classes that implement the same interface. Our goal is to explore how the choice of these classes impacts the energy consumption of software applications and to find ways to intelligently switch between implementations for energy efficiency. The goal is to develop a tool that can perform the switching automatically to optimize energy efficiency and can be used easily by programmers.
As a case study, we investigate dynamic data structures because they have been shown to have a large impact on performance and are considered key components of many object-oriented software applications [7], [8]; many applications are implemented using interface-based design [6]. By using a “select the right data structure for the right workload” approach, we apply machine learning tools and enhance these classes to be adaptive green data structures that can dynamically adapt for energy efficiency without creating more work for developers.
We propose a working prototype of adaptive green data structures, GreenC5, demonstrating how a green data structure can be implemented and how the models for predicting energy efficient data structures are integrated and used. Together with simple decision making and transformation techniques, we demonstrate that GreenC5 can accurately and efficiently adapt to the workload helping the software applications to perform better and the base system to consume less energy. The evaluation results also show that our models for predicting energy efficient data structure are accurate and the a priori knowledge is potentially universal because it can be used in multiple platforms with similar performance results.
The contributions of this paper are fourfold: (1) empirical evidence that energy saving opportunities exist in interface-based, object-oriented dynamic data structures; (2) development of a predictive model based on artificial neural networks and n-gram inference to predict energy efficient data structures for use in object-oriented programs; (3) an architecture for building an adaptive green data structure; and, (4) a working prototype of GreenC5 that is lightweight, smart, adaptive and easy-to-use.
This work is an extended version of our previously published conference paper [27] with the following major additions: (1) the presentation and discussion of the Decision Maker component and a simple decision making method for internal data structure transformation for energy efficiency; and, (2) the presentation and discussion of a complete working prototype of an adaptive, energy-aware collection for green software development and an introduction of the GreenC5 data structure, along with its energy overhead and actual potential energy saving results. For the paper content, some contents mainly in Section 3 and 4 have already been presented in our previously published paper. However, they are updated in this version. Some additional contents are also added for better clarity, such as figures of our ANN and online prediction process of the Predictor component and the main features of our GreenC5. The completely new content is mainly in Section 5.
In addition to our previous work, we also made the GreenC5 project as an open-source project. All the fundamental GreenC5′s key components and tools are gathered in the DUGreen project and can be downloaded freely via the GitHub website [37]. In the released project, a GreenC5 simulator is also included for users to interact with GreenC5 data structure in order to understand how it is used and see the energy savings when compared with the traditional C5 data structures in different use-case scenarios. It also contains code examples showing how the GreenC5 is used. The released project also includes two power monitoring tools, Watts Up? and Intel Power Gadget [23], for researchers and developers to easily start their green software development projects in .NET programming.
