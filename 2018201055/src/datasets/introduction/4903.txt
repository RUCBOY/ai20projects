Virtual machines [1] enable dynamic resource provisioning in data centers. As a consequence, users can pay only for allocated resources. Services in data centers are being more consumed as more users connect to the Internet. These services are often referred to as cloud computing, defined by NIST [2] as “a model for enabling ubiquitous, convenient, on-demand network access to [...] computing resources [...] rapidly provisioned and released”. Containers provide faster resource allocation in comparison to virtual machines [3]. Among the implementations of containers, Docker is probably the most adopted [4].
To drive the adoption of containers in clouds, companies founded the Cloud Native Computing Foundation (CNCF) [5]. The goals of CNCF include creating standards for container operation. Google had used containers for years [6] and launched Kubernetes (also known as k8s) [7] as an initial result from CNCF. Kubernetes is an open source management system for containers and counts with the knowledge of the engineers that created Borg [6], a container manager developed by Google.
Kubernetes can replicate containers to improve the availability of applications. When a container fails, Kubernetes recreates it from a predefined image. However, the state of the failed container is not restored. Applications can use external volumes to maintain their state, but it is necessary to protect the volumes against failures. Furthermore, when providing state replication, applications have to handle concurrency when accessing the volume.
Algorithms derived from Paxos [8] have been proposed to replicate services in sets of machines. Raft [9] and BFT-SMaRt [10] are used to implement State Machine Replication (SMR) [11]. Replicas communicate and follow a protocol to ensure that operations are executed on all replicas in the same order. These solutions can be applied in Kubernetes at application level, i.e., inside containers. However, each replicated container has to carry the agreement software and manage the interaction with it. To implement SMR in existing applications is not a trivial task [12].
We enable coordination in Kubernetes using integration, an approach that is transparent to users and shows better performance than other strategies [12], [13]. Integration means building or modifying a system to complement features. In this paper we present a scheme to integrate coordination in Kubernetes. A component of Kubernetes is used as shared memory to guide the coordination. We created a protocol named DORADO (or Dering OveR shAreD memOry) to do state replication in containers.
The paper is organized as follows. Section 2 presents concepts about containers and Kubernetes. Section 3 presents our coordination scheme. Section 4 evaluates the proposal, and Section 5 discusses related work. Finally, Section 6 concludes the paper.
