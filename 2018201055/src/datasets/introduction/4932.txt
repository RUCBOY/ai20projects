Pattern matching is subjected to find all occurrences of the pattern(s) in source (Faro & Lecroq, 2013). Pattern matching is one of the most challenging issues in computer science applications including intrusion detection systems (Hassan, 2005), operating systems, information retrieval, search engines (Somayajulu & DVLN, 2011), artificial intelligence (Almazroi, 2011), image and signal processing (Klaib and Osborne, 2009, Li et al., 2008). The string matching applications are library management systems, error detection and correction systems, processing text systems, speech and pattern recognition systems (Michailidis & Margaritis, 2002), bibliographic search systems, question-answer systems (Zubair, Wahab, Hussain, & Zaffar, 2010), dictionaries and memorized data systems (Hassan, 2005).String matching is also used to analyze protein sequences and pattern matching in DNA sequences (Cao, 2004, Bhukya and Somayajulu, 2011). String matching is also used in genome sequence compression and short read error correction (Sardaraz et al., 2016, Sardaraz et al., 2014, Tahir et al., 2015). Therefore, it plays a vital role in solving various problems in computer sciences (Faro and Lecroq, 2010, Hassan, 2005).
String matching is usually used to solve matching problems i.e. to compare pattern ‘p’ with target text ‘t’. The first and simplest string matching algorithm is brute force, which does not preprocess the p or t. Its computational time complexity is O(mn); where m and n both refer to lengths of p and t respectively. Later, many computationally improved variants of the brute force algorithm were developed e.g. Karp–Rabin algorithm (Karp & Rabin, 1987) and Knuth–Morris–Pratt (KMP) algorithm (Knuth, Morris, James, & Pratt, 1977). The string matching has been divided into two main categories i.e. exact string matching and approximate string matching. These are subdivided into five groups based on different approaches used. These groups are the classical approach, suffix automata approach, bit-parallel approach, hashing approach and hybrid approach based algorithms (Faro & Lecroq, 2013). String matching plays an important role in computer sciences, bioinformatics computational biology in data analysis like feature extraction, disease and structural analysis. Biological scientists and practitioner are mostly interested in performing searching to identify proteins or genes that contain sequence pattern. However, numerous number of algorithms has been developed to deal with specific challenging so far, but the biological database volumes are also increasing at a rapid rate. So, fast and efficient pattern matching algorithms are required to cope with current and future challenges.
The recent development in computational technology and increase in the volume of biological data pose many challenges to researchers. The detailed study on these can be found in Bucak and Uslan (2011) and Pehlivan and Orhan (2011). As the impact of pattern matching is very high, it has been investigated that approximate pattern matching considers crucial and complex issues. That requires high-performance processing in terms of computation. While exact pattern matching algorithms enhances the search speed with the minimal use of hardware and power (Özcan & Ünsal, 2015). In this paper, we focus on computational complexity and memory efficiency of DNA sequence matching. We present computationally intelligent and memory efficient algorithm using binary encoding, multi-threading and searching techniques.
