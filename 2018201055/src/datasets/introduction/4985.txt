Undoubtedly, there is an essential need for software systems to continue to satisfy today's complex and costly business demands [1]. Sommerville [33] claims, “we cannot run the modern world without software” (pp. 4). The important point is that in today's world there is little chance to sustain all of the work around us without software. Many fields such as industrial development, logistics, finance, and entertainment (e.g. computer games, music market, cinema, etc.) rely on computer-based ecosystems to function properly. Without using the benefits of software systems, it is difficult to build substantive international relations and trade [1]. Gibbs states that projects and general applications from industry do not consistently perform without clear definitions and implementations of market demands via software engineering structures [16].
Software engineering is a complex activity [58] wherein developers should be aware of their expected responsibilities when implementing software development projects. Correspondingly, the successful implementation of customer requirements brings challenges, not least because software systems are abstract and intangible [33]. Furthermore, each project may vary in its software process [59] as software development settings are of a richly varying nature [60]. In certain domains, governmental laws and physical materials may act to complicate software development, for example in areas such as medical device and automotive software development. In addition, there is also an absence of clear physical borders for software products. However, with this absence, the complexity of software systems and their development procedures can reach extreme points. Because of the difficulties of understanding customer requirements, project costs and development expenses, the entire process is beset with challenges. Moreover, rapid differentiation of operational environments necessitates the usage of adoptable and versatile software product [19].
Developing from a simple program to a large-scale information system, there is a need for a software development methodology [21]. Moreover, software engineers are always in pursuit of developing new software techniques to make the development processes easier to build in accordance with the satisfaction basic demands and procedures as well as desired requirements of complicated and larger systems. As a consequence of these remarks, using a disciplined approach, software engineering standards should be able to provide for more effective development, especially for larger software product development initiatives. Moreover, using such techniques and methodologies creates an essential approach to reaching high quality products. Without such techniques, development progress may likely to be interrupted with unwanted errors or defects. However, some companies may still rely on undisciplined approaches and ultimately produce defective software products. At the end of the process, their software product may be excessively expensive, and unfit for purpose. To solve this issue, there is a crucial need for better training concerning software development processes [31].
According to Calderon et al. [10], despite the general importance and urgency of this issue there is an increasing demand for qualified personnel to empirically manage software deliverables. However, software engineering lectures are usually populated with theoretical knowledge which students are not able to observe empirically during their education. Boehm [8] states that there is a need for novel frameworks to bridge the gap between software engineering education and best practices. In addition, software engineering education requires more interactive approaches to teach how to improve the software product while preserving customer requirements [30]. Kling and Scacchi [26] agree that there is a need for clear definitions of techniques in order to foster links between social prospects and software attributes. Furthermore, without clarifying understandings from a managerial perspective, it may be problematic to make further predictions about project trade-offs. All of these observations suggest that there may be considerable importance associated with finding interactive ways of teaching software development standards.
Games have started to play an important role in individual's training and development. As the notion of games evolve, it becomes easier to provide training and simulation of real-world software development issues to novice practitioners. This study set out to investigate the usefulness of serious games for teaching the basic content of ISO/IEC 12207. It provides an exciting opportunity to advance our understanding for adopting interactive methods that are offered to train novice practitioners. This paper considers the implications of serious games in software process training particularly for ISO/IEC 12207 Software Life Cycle Processes. Consequently, the primary hypothesis of the study was that interactive approaches like serious games are more suitable for novice software practitioners than traditional paper based learning approaches. To assess this proposition, a serious game was developed, and the two different style of training sessions were conducted. To revisit the outcomes of our proposal, we conducted a set of interviews and discuss the findings with a serious game developer and a software process improvement expert. The contribution of this study has been to provide a new understanding of ISO/IEC 12207 training.
The remaining part of the paper proceeds as follows. Section 2 includes detailed information and background of ISO/IEC 12207 Software Life Cycle Processes. In addition, important features of serious games are presented. Moreover, we have conducted a literature review about serious games and this section clarifies the main characteristics of these selected games. Section 3 introduces the research methodology. Additionally, procedure of methodology is described step by step in every detail. Following this methodology, a serious game called “Floors” was developed with the help of the development tools that are mentioned. These design and development tools with their usage area during the development phase of the game are presented with technical details of their functions and predefined attributes. After the explanation about the design tools of the game, main features of "Floors" are described with further descriptions about software engineering details and selected processes of ISO/IEC 12207:1995 Software Life Cycle Processes. In Section 4, firstly, in order to present our participants' characteristics demographics are considered and then main features of the sessions are identified individually. The main goal behind identifying the main virtues of the sessions is exposing the structure of the methodology of this study. By this way data collection and data comparison parts will become more visible. Moreover, this section presents the efficiency of this research before starting analysis section where data analysis and the evaluation of the sessions are described. For the discussion part, threats to validity and interview results are presented for the sake of offering reliability of this study. Finally, conclusion part consists of deliberation of the current condition of the game and future plans which can be potential and possible advancements.
