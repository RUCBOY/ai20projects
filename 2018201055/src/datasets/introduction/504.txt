In the recent past, smart cities have been introduced in various countries by incorporating popular technologies such as Internet of Things (IoT), big data, cloud computing, and artificial intelligence (AI) [1], [2], [3]. With rapid technological advances in IoT, extracting valuable data from heterogeneous and noisy raw data generated by IoT devices using conventional machine learning techniques has become tedious and challenging. Deep learning (DL) is one of the AI technologies that can analyze large-scale data effectively [4,5]. Owing to its benefits, DL has been widely accepted as a potential solution to solve aforementioned problems. DL technologies can be used for automatic closed-circuit television data analysis and for object recognition for autonomous driving vehicles. Thus, the ripple effect of introducing DL into smart city services will have a significant impact on the quality of urban services [6].
Edge computing (EC) is another promising technology that improves the service provision of modern smart cities. Unlike cloud computing, which handles the functions of storing, processing, and analyzing data centrally, EC performs distributed processing by means of the edge nodes that are close to end devices [7]. In fact, each end device produces a large amount of data. In a cloud computing environment, all these data collected by edge devices must be transferred over a limited network and then processed in the cloud server. However, this requirement may lead to bottlenecks and service delays. If edge nodes can handle a part of the data that the central cloud server processes, the transmission efficiency can be improved and the processing load in the cloud can be reduced because of the reduction in the data size by the edges. In general, a DL model consists of multiple layers that analyze features and obtain results. As data traverses through the model, data processing at each layer significantly reduces the amount of data to be transferred to the next level. DL process is suitable for EC environments as some processing layers can be shifted to the edges. Subsequently, the remaining data to be processed can be transferred to the cloud to be processed by residual layers. Once DL layers are distributed by the EC system, the edge nodes reduce the data size by processing certain data portions at the edges. Therefore, the network delay and computational overhead of the cloud server can be reduced, and the required results can be obtained swiftly. This is especially effective in urban environments such as smart cities, which need to recognize and respond quickly to situations or things [8].
In this paper, we propose Deep learning Layer Assignment in Edge Computing (DLAEC) algorithm. It defines the number of DL layers that should be assigned to each edge node when DL tasks are accepted in a EC system. Here, a task means a unit of software that improves the quality of life (QoL), utilizes data from several devices, and allows usage by multiple devices independently. The number of assignable DL layers is calculated to utilize the maximum computing capacity of an edge node considering the number of tasks and network bandwidth. Subsequent data processing at edge nodes reduces the amount of data transferred to the cloud, thereby reducing the processing burden on the cloud and the network congestion. Note that individual layer assignment on each edge node makes this strategy suitable for an environment consisting of edges with dissimilar resources. Edge nodes tend to have dissimilar resource capacities owing to node replacement or addition, execution of additional processes, incoming data size, and network infrastructure. The proposed DLEAC algorithm was compared with simple delivery without assignment, fixed-layer assignment, and dynamic assignment schemes. The results revealed that DLEAC provided significantly better results compared to the existing methods. Thus, we established that compared to the other methods, the proposed strategy allows more DL tasks in a particular EC environment.
The remaining sections of the paper are structured as follows. Some recent studies in which DL was used for cloud and EC environments are described in Section 2. Section 3 describes the concept of DL in an EC environment and elaborately discusses the proposed DL layer assignment strategy. Performance analysis and discussion are presented in Section 4. Finally, Section 5 provides the conclusions.
