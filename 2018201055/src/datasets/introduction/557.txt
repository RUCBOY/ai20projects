For most modern image processing and computer vision systems, extracting the region of interest remains a fundamental problem. This is required in a variety of applications such as advanced driver assistance systems (ADAS) for pedestrian, traffic signal, and blind spot detection; lane departure warning systems; video surveillance applications; and simultaneous localization and mapping (SLAM) [1]. A corner, or a point where two sharp edges meet, is one such feature in an image. Multiple algorithms are used to detect corners in images. Some frequently used corner extraction algorithms include the Moravec algorithm [2], the Susan algorithm, and the Harris corner detector. The Harris corner detector is one of the most precise corner detection algorithms. Although its operation is notably simple, the algorithm is computationally intensive. It is typically used in systems that require real time data processing; thus, conventional CPUs cannot meet the requirements. CPUs are good only if large data volumes are involved or we need to perform floating point computations. Hence, Field-programmable gate arrays (FPGAs) are excellent candidates for deploying such algorithms in real time owing to fast processing speeds and parallel implementations. For complex algorithms implemented on FPGAs, corner detection may have to be deployed in addition to other algorithms on the FPGA. Examples include non-maxima suppression, matching using the sum of absolute differences, matrix computation, and triangulation [3]. Because of this requirement, it is important to improve the efficiency and area requirements of FPGA implementations for these algorithms.
Many researchers have published novel studies on area- and speed-efficient implementations of the Harris corner detector on FPGAs. Liu et al. [4] recently proposed a method that can process RGB565 video in 640 × 480 resolution at a rate of 154 frames per second. Liu et al. implemented the design using a Xilinx ZedBoard. Xu et al. [5] proposed a slightly different algorithm by adding a pre-filter and using a simplified matrix rather than the original Gaussian kernel matrix. This reduced the design complexity and led to efficient hardware resource usage with Spartan 3 FPGA for robotics applications. Experiments conducted with an input image having a resolution of 256 × 256 yielded a processing time of 2.3 ms. Chao et al. [6] attempted to simplify the maximum suppression procedure with the Harris corner detector. Their design, which was specifically developed for use with ZedBoard, achieved a data rate of 144 frames per second in simulations. Lee et al. [7] proposed a modified Harris corner detector for breast cancer detection from MRI and x-ray images. They used an automated adaptive radius suppression technique, which reduces corner clustering; thus, avoiding the loss of useful corners due to over-suppression. John et al. [8] proposed a generic image feature extractor algorithm and implemented the same on Cyclone 4 FPGA for real time processing achieving a frame rate of 70 frames per second. Hisham et al. [9] used dynamic partial reconfiguration to design a self-adaptive system on chip for Harris corner detection algorithm. Their implementation dissipated less power with a small overhead on performance.
This paper proposes a real time implementation of the Harris corner detector on a Xilinx ZedBoard and demonstrate that the implementation is superior in terms of speed and area usage on the FPGA to previous implementations. The design was developed using a novel high-level design method that synthesizes the design with intermediate signal widths constrained according to the application (input stimulus). The remainder of this paper is organized as follows: Section 2 presents an introduction to high-level synthesis. Section 3 explains the architecture of the Harris corner detector. Section 4 explains the methodology used in the proposed design. Section 5 presents simulation and synthesis results, as well as a comparison with the results presented by other researchers. Section 6 presents concluding remarks.
