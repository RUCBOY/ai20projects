During the last decades, several computing models and paradigms have been proposed to make the utility computing vision a reality. Cloud computing, one of the well-known emerging models, promises virtually infinite computing resources whenever and wherever they are required [1]. On-demand self-service, broad network access, resource pooling, measured service, and rapid elasticity, among other key characteristics of the cloud, have encouraged academia, industry, and government to move towards cloud computing solutions [2]. The cloud introduces a new model in which everything is offered and used as a service (the acronyms *aaS, XaaS or EaaS stand for Everything as a Service) [3]. According to the widely accepted definition, given by the National Institute of Standards and Technology (NIST) [4], cloud services are delivered under three main models: infrastructures (Infrastructure as a Service, i.e., IaaS), platforms (Platform as a Service, i.e., PaaS) and applications (Software as a Service, i.e., SaaS), and are deployed following four models (public cloud, private cloud, community cloud, and hybrid cloud).
Although the aforementioned gained benefits, this paradigm faces different issues such as the vendor lock-in problem [5]. This problem is due to the different models and descriptions used by providers to represent their cloud services. As a first objective of this paper, we will show how to use formal methods for the modeling and description of cloud services and other cloud entities, since formal methods offer standardized and rigorous descriptions. Another problem concerns the Service Level Agreement (SLA) and its management lifecycle. The SLA [6], [7] permits to regulate and control the provision and consumption of services and specifies the set of quality of service (QoS) that must be guaranteed. The realization of the SLA follows different stages [8], [9]. Through the whole lifecycle of the SLA, the different providers, end-users, and also the offered services may have different changing states and different kinds of interactions. Tackling the first problem using formal methods will pave the way towards formal verification, and therefore ensuring the correctness of interaction behaviors among the different cloud entities during the SLA lifecycle, which represents the second objective of this paper.
In the following, we present a motivating example through which we identify the different challenges that are faced when modeling and verifying SLA-based cloud systems, and also the specific features of the cloud that have been considered by such approach.
Let us consider the following motivating example, depicted in Fig. 1, in which a cloud architecture comprises two layers. The lower one represents the UaaS (Utility as a Service) layer in which we find infrastructure services offered as virtual machines (VMs). The second layer represents SaaS providers that use services from the previous layer. On top of the cloud layers, Fig. 1 shows end-users that consume services offered by the different providers. Note here that we have considered only the two layers following the classification proposed by [10], [11] in which it is considered that the cloud incorporates application services (SaaS) and utility services (UaaS). Utility services include both IaaS and PaaS services. Further explanation and examples, about cloud services classification, will be given in Section 4. Consider the example shown in Fig. 1 where a SaaS provider wants to deploy two services. The first service depends on the second one. We start by presenting two scenarios for the deployment. In the first one, the provider wants to deploy the two services S1 and S2 in the same VM (VM1) offered by a public cloud provider. In the second scenario services S3 and S4, we suppose that service S4 will process confidential data, and therefore the provider wants to deploy it in his private cloud VM3 (in order to ensure data privacy and access control) and keep S3 deployed on the public cloud VM2.Download : Download high-res image (207KB)Download : Download full-size imageFig. 1. A layered cloud system.
Generally, providers of services give different details and properties of the offered services, for instance, the UaaS provider describes the offered VMs in terms of their CPU, RAM, storage, location, etc. On the other side, a consumer selects services depending on its requirements, for instance, the SaaS provider (playing the role of a consumer) may look for VMs having certain capacities, located in a specific region, and following particular security protocols. The consumer selects services that can meet its requirements and starts negotiating with their providers. The negotiation may be terminated by the definition and the establishment of an SLA. This includes a set of terms to be respected during the provision and consumption of services. Examples of SLA terms are: the availability of the offered service must be always greater than 99,99%, and the maximum number of violations is 3. As we can observe in the first example, these terms usually refers to QoS requirements. Deployed in a highly dynamic environment, such as the cloud, QoS of the delivered services are subjected to different changes. The monitoring process verifies that the execution of services is performed according to the signed SLA and reports any SLA violations. This process continues until the termination of SLA that can take place by one of two reasons: the expiration time has been reached or the occurrence of violations.
The focus of this paper is the modeling of cloud computing systems and the verification of interaction behaviors among their different cloud entities during the lifecycle of SLAs. Analyzing the motivating example, we have identified the following challenges:
1.Diversity of cloud services models: In the motivating example, we have considered two types of delivery models that are SaaS and UaaS. In the literature, however, we may find more and different classifications of the delivery models [4], [10], [11]. Therefore, the proposed approach should offer the possibility to consider any classification and define any type of cloud services.2.Service properties and QoS consideration: Services can be described using different properties and QoS [12]. The example cites some resources features such as CPU, RAM, location, availability, etc. Note here that these parameters depend on the type of entity they describe. The proposed approach should offer means to define different properties and QoS.3.Cloud actors and SLA stakeholders: In our example, three types of actors are identified: end-users, SaaS providers, and UaaS providers. These actors are involved in the establishment of the SLA as customers or providers. The proposed solution should permit the definition of different actors and SLA parties.4.Specific service compositions and diverse relationships: Generally, a composition of services is required to offer a complete solution and satisfy the users’ (functional and non-functional) requirements [13]. In cloud environments, service composition can be intra-layer composition (horizontal), which denotes composition of services that are on the same layer (between S1 and S2), or inter-layer composition (vertical), which involves services from different layers (between S1 from the SaaS layer and VM1 from the UaaS layer) [14]. This composition is always considered as a complex problem due, on one hand, to the wide variety and the growing number of services available in the cloud, and on the other hand, to the requirements of users that are more and more complicated [15]. Indeed, the establishment of such composition requires complex interactions between providers of these services and their consumers [16]. The proposed approach should allow the definition of such types of service compositions and relationships between cloud actors.5.SLA consideration: In the motivating example, the SLA includes, among others, terms specifying the expected level of services (e.g., availability). The proposed solution should allow the specification of SLAs and their different terms.6.SLA lifecycle and dynamic change of cloud entities: Cloud actors and services can go through different states during the lifecylce of SLA. The proposed solution should allow the modeling of the different SLA lifecycle stages. In addition, it should allow the description of the dynamic change of these entities states. For instance, an end-user can be satisfied or dissatisfied with the offered service.7.Correctness verification: The proposed approach should be based on a formal foundation [17], and hence enables reasoning about the different entities such as services, end-users, providers, and SLAs. Specifically, it should permit to verify that the behavior of services and cloud actors will cope with the defined SLA terms during the lifecycle of the SLA. For instance, we may want to verify that: 1) Always the monitoring process launches directly after the establishment stage, 2) Once the number of occurred violations reaches the maximum allowed number of violations, the SLA will be directly terminated with penalties, or 3) The number of occurred violations must not exceed the maximum allowed number of violations. In this research, we have considered two types of properties, introduced in [18], that are: liveness and safety. While the former describes that something good will eventually happen (e.g., properties 1 and 2), the latter denotes that something bad will never happen (e.g., property 3) during the lifecyle of the SLA. In other words, they express desirable or undesirable behaviors of the different cloud entities during the SLA lifecycle.
Based on Milner’s Bigraphical Reactive Systems (BRSs) [19], [20] and model checking techniques [21], [22], [23], we aim to propose a novel formal approach for modeling and verifying SLA-based cloud systems to cover all the aforementioned challenges simultaneously. Taking into account these challenges, the contributions of this article are as follows:
•We cover the first five challenges by proposing a generic and complete formal description, based on the bigraph theory, for the different cloud entities, relationships thereof, and their properties. The cloud entities include cloud actors, cloud services, and cloud SLAs.•We cover challenge 6 by proposing a four-stages cloud-SLA lifecycle and defining a set of bigraphical reaction rules to describe it. Moreover, the proposed reaction rules consider the dynamic change of these entities during the SLA lifecycle.•We cover the last challenge by proposing a formal verification approach, based on the NuSMV model checker, to ensure the correctness of interaction behaviors among the different cloud entities, during the SLA lifecycle. This verification approach is based on a set of liveness and safety properties specified in Linear Temporal Logic (LTL) and Computation Tree Logic (CTL). Moreover, the defined properties are ranging from general ones to specific properties which are depending on the signed SLA.
The rest of this paper is organized as follows. Section 2 presents an overview of the BRS theory. An overview of the proposed approach is detailed in Section 3. Our BRS-based modeling approach from static and dynamic perspectives are introduced in Sections 4 and 5, respectively. In Section 6, the formal verification approach is presented. In Section 7, we define a case study, with different scenarios, on which we apply the proposed approach. The related work and conclusion are presented in Sections 8 and 9, respectively.
