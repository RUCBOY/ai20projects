As in the last five decades, Software Engineering Education (SEE) continues to evolve, with the main focus being the preparation of Software Engineering (SE) students for future careers (Marques et al., 2014a, Almi et al., 2011). International organizations, such as the Association for Computing Machinery (ACM), the Institute of Electrical and Electronics Engineers (IEEE) (A. f. C. M. A. Joint Task Force on Computing Curricula, I. C. Society, 2013), and Computing Curricula of 2020 (Impagliazzo et al., 2018), guide SE curricula with consideration of integrating industrial perspectives. Nevertheless, addressing industrial demands is still an open question for SEE.
Educators provide fundamental programming knowledge and skills which help students work with new technologies in industrial environments. In ongoing efforts, SEE strives to meet this goal by designing courses that have a longer duration and rely on different teaching strategies (e.g., project-based, problem-based, studio-based learning) to enable students to practice their skills in relatively realistic project environments (Beckman et al., 1997, Jaakkola et al., 2006, Almi et al., 2011, Kuang and Han, 2012, Bull et al., 2013, Loksa et al., 2013). Previous systematic reviews (Marques et al., 2014b, Garousi et al., 2016, Beecham et al., 2017b) reveal that educators manage to teach relevant Software Engineering knowledge to students.
Moreover, education for software engineers should prepare students to stay current in the face of rapid change. Existing studies report educational challenges that exceed fundamental skill sets. For example, reports exist that address how to support students to communicate effectively with customers in an Agile project (Lethbridge et al., 2007) and how to work with other developers in a geographically distributed setting. The underlying assumption of these reports is that students already know the required state-of-the-art SE Trends. Relevant topics are essential for educators in building an appropriate curriculum and selecting a suitable teaching methodology (Bass, 2016, Bolinger et al., 2010).
Triggered by the vision of preparing students for future computing from the Computing Curricula 2020 (CC2020) project (Clear et al., 2019), we recognize the necessity for reviewing SEE in order to yield educational outcomes relevant to the Software industry in the mid-2020s and beyond. Previous studies highlight the importance for SEE actors to collaborate on common education goals, as well as remain current with SE Trends (Beckman et al., 1997, Garousi et al., 2016). In particular, the SE Trends from previous decades that are within SE curriculum need revision. In this study, SE Trend is defined as a commonly adopted software development paradigm, which includes SE ideology, methodology, way of working, a framework, a process, and a set of practices. For example, at present, DevOps is a popular SE Trend gaining widespread adoption in the software industry (Bezemer et al., 2019).
Decisions to update curricula for SEE teaching needs (i.e., current trends in the SE industry is reflected in the academic setting) (Boehm, 2006) must be informed by in depth understanding of state-of-the-art SE Trends. In order to provide an overview of the investigated area, we conducted a systematic mapping study. We classified 126 papers selected for review into the following categories: the SE Trends, teaching strategy, models/processes, methods, participating stakeholders, research, and contribution type. Additionally, we assessed publication trends and sources to understand the evolution and quality of the conducted research. The contribution of the work includes:

•Scoping of the research area in SEE and identifying the endorsed SE Trend•Identifying the quantity and type of research available•Mapping the frequencies of publications over time•Assessing the current teaching strategies reflected in SEE research as scientific publications•Evaluating stakeholder joint efforts for participation in industry and SEE•Identifying research gaps in SEE for future study
We found that 79.4% of SEE studies are associated with the most common SE Trend, namely Agile Software Development. Software Implementation, Usability and Value is the second most explored SE Trend found in 16.7% of SEE studies. Other SE Trends, such as Lean Software Startup, Global Software Engineering (GSE), are shown in only c.a 9.5% of SEE studies. The SE Trend System of System is little explored in SEE context.
Concerning learning approaches, Project-based learning approaches are common in SEE Other potential learning approaches, i.e., gamified learning and blended learning, are still little explored. The most common methodological approach in SEE context is Scrum. There are reports, however, about the combination of Agile and Lean approaches in education for Startups. Finally, the actual participation of Industrial stakeholders in SEE is still limited.
The study structure is as follows. In Section 2, we provide the research background. Section 3 contains explanation for the systematic mapping approach used for selecting papers. In Section 4, we analyze the results and answer the research questions (RQs). Section 5 includes the discussion on the findings and limitations of the research. Then, in Section 6, we conclude and propose future research work. The complete information and classification of the mapping can be found in Appendix.
