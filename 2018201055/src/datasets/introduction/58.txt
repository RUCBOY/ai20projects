It is known that the forward discrete Fourier transform (DFT) and its inverse procedure (IDFT) are described by discrete summation of arrays in spatial and temporal domains, respectively, and are written as: (1)fˆk=∑j=0N−1fj⋅e−2πikjN(k=0,⋅⋅,N−1),(2)fj=1N∑k=0N−1fˆk⋅e2πikjN(j=0,⋅⋅,N−1), where N∈N, and coefficients fj,fˆk∈C. It is obvious that the direct computation of both DFT and IDFT requires O(N2) arithmetic operation, whereas the fast Fourier transform (FFT) method can effectively scaling down their arithmetic operations to O(NlogN) [1].
A generalization of d-dimensional DFT can be described by an array of equispaced spatial points and a certain frequency bandwidth vectors N, in which each component Nt∈2N
 (t=0,⋅⋅,d−1) is defined as a fixed even number. These components are collected in the vector N ≔
 (N0, ⋅⋅, Nd−1)T, and the corresponding inverse counterparts are determined via N−1 ≔ (1/N0, ⋅⋅ , 1/Nd−1)T, respectively. The set IN: = {k∈Zd: −Nt/2≤
kt<Nt/2, t=0, ⋅⋅ , d−1} is an ensemble of all possible d-dimensional frequency coordinates in a DFT matrix, where kt is a component of k at dimension t. In this way, the equispaced points in DFT can be depicted as xj= N−1⊙j (j∈IN), where the operator ⊙ does component-wise product of two vectors. Therefore, it is evident that the data points (j0∕N0, j1∕N1, …,
jd−1∕Nd−1) in DFT are regularly distributed in a spatial domain Πd, Πd≔d and the number of these data points is |IN|=∏t=0d−1Nt. Thus, the d-dimensional DFT and IDFT shown in Eqs. (1), (2), respectively, can be rewritten as, (3)fˆk=∑j∈INfx||j⋅e−2πikxj,(4)fxj=1|IN|∑k∈INfˆk⋅e2πikxj, where xj= N−1⊙j and j, k∈IN. With such a description, the direct computation for d-dimensional DFT (Eq. (3)) and IDFT (Eq. (4)) generally demands for a computational amount of O(|
IN|2) arithmetic operation, which will be further scale down to O(|
IN| log |
IN|) using FFT.
The nonequispaced discrete Fourier transform (NDFT) [2] can be viewed as a generalization of DFT with the data points xj
 (j∈0,M−1) randomly scattered in the spatial domain Πd≔d and the number of data points M is arbitrary (need not be equal to |
IN|). Assuming that the Fourier coefficients fxj∈C are values at nonequispaced points xj
 (j∈0,M−1) and fˆk∈C (k∈IN) are the output values of this transform, the NDFT is defined as (5)fˆk=∑j=0M−1fx||j⋅e−2πikxj(k∈IN).The Eq. (5) can be denoted by a matrix–vector product of fˆ=A⋅f, where fˆ:=fˆkk∈IN is the transform output results, A≔e−2πikxjk∈IN,j=0,…,M−1 is the nonequispaced Fourier matrix, and f≔ is the input data, respectively. Unlike DFT and IDFT, the matrix A in NDFT is typically not square. Even it is square by coincidence, its inverse and orthogonal matrices are usually not existent. Therefore, the inverse NDFT process can be customarily defined by a matrix–vector product of f=AH⋅fˆ with matrix AH:=e2πikxjj=0,…,M−1;k∈IN, and the inverse format of NDFT is described as (6)fxj=∑k∈INfˆk⋅e2πikxj(j=0,…,M−1).It is noteworthy that both NDFT and its inverse process are widely applied in all aspects of engineering areas and scientific computation. They play a dominant role in many specific applications when it comes to medical imaging technology [3], [4], astrophysics [5], oceanography [6], remote sensing technology  [7], [8], telecommunication [9], [10], [11], power system analysis [12], [13], [14], [15], [16], and molecular dynamics simulations [17], [18], [19], [20], [21].
Due to the arbitrary number of data points and their random distributions in NDFT, it is not feasible to use FFT algorithm to directly handle NDFT (Eq. (5)) and its inverse format (Eq. (6)). In addition, the direct calculation of NDFT and its inverse process demands for approximately O(M|
IN|) arithmetic operations, which is too expensive to accomplish in practical applications. Therefore, several strategies have been proposed to accelerate the computation of NDFT and its inverse process, of which the most prestigious one is nonequispaced fast Fourier transform (NFFT) technique by Fourmont [3]. There are some other names for NFFT, which are, for example, generalized FFT [22], unequally-spaced FFT [23], non-uniform FFT [24], and fast approximate Fourier transforms for irregularly spaced data [25]. Steidl introduced an approximation approach to evaluate computational efficiencies of representative NFFT algorithms in detail [25]. Later, Benedetto and Ferreira proposed a unified approach to perform fast evaluation of NDFT and its inverse process [26]. In addition, Capozzoli and co-workers extended the approach that was proposed by Fourmont [3] for implementing NUFFT routines to a 2D case and exploited its usage for fast and parallel processing NDFT and its inverse computations via GPU and CUDA (Compute Unified Device Architecture) parallel strategy [27], in which the precomputation of window function and its Fourier counterpart was accelerated during optimizations.
In our previous work, we proposed a novel and efficient theoretical derivative of NFFT based on gridding algorithm, and have implemented in GPU framework using CUDA parallel technology, and therefore this method was named as CUNFFT [28]. The detailed physical parameters of CUNFFT algorithm including variations of window functions, structure of data storage, memory allocation, and thread schedule are systematically evaluated to maximize the functional performance of CUNFFT algorithm. Compared with conversional NFFT algorithms and the approach proposed by Capozzoli and co-workers [27], the CUNFFT algorithm does not resort to a strategy of precomputation so as to avoid a time-consuming access to global memory. A series of benchmarking calculations shown that CUNFFT exhibits distinct performance over conversional NFFT algorithms at the same computational precision. It should be noted that although CUNFFT gives a favorable efficiency over conventional NFFT in representative applications, the limit storage and computational capability of a single GPU node may affect the efficiency of CUNFFT in handling computational systems at super extended scales. In such case, the mass data have to be divided into several groups according to different capabilities of GPU nodes in treating matrix data and input these group data into GPU one after another instead of calculating all matrix data in a whole process. In the current work, we proposed an effective parallelization procedure to further improve computational efficiency of CUNFFT algorithm. Multiple GPU nodes are integrated in a network architecture, and the CUNFFT algorithm is restructured using an efficient hybrid parallelization (HP) scheme unifying MPI (Message Passing Interface) and CUDA technologies [29]. The proposed HP-NFFT method is first validated via the calculation of Madelung constant of fluorite crystal structure, and thereafter is verified to be robust for treatment of matrix data at super extended scale with cutting-edge functional performance and for the calculation of electrostatic interactions between charged ions in molecular dynamics simulation systems.
