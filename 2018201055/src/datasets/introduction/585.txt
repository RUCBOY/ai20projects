Context and motivation of the problemIn the context of digitalization and Internet-of-Things (IoT) infrastructures, fog/edge computing platforms are emerging distributed processing infrastructures that can address scalability issues of the cloud computing paradigm. In contrast to the latter, which assumes that data is globally gathered and analysis is performed into the cloud, edge computing refers to having data and analysis in the edge nodes; fog computing is broader and it refers to having data and analysis in intermediate processing nodes, i.e. an abstraction between the edge and the cloud.Processing sensor data is an important problem that can benefit from such computing infrastructures. For coping with the rate and volume at which data is produced by certain types of sensors, efficient approximation approaches that summarize the data and process the summaries are required, for example in the spirit of the synopses methods introduced in [8]. The importance of data summarization and summary processing is more pronounced for processing data from high-rate sensors, such as LIDAR sensors.LIDAR (LIght Detection And Ranging) is an accurate sensing method that gives a 3D scan of the environment in which it operates. LIDAR reads the distances by reflecting pulsed laser lights and measuring the reflected lights. A LIDAR sensor typically has a rotating head that emits several layers of laser beams, resulting in a high resolution 3D scan of the environment, possibly containing hundreds of thousands of points, by one full rotation of the head. LIDAR sensors can produce readings with rates of several MBps. A point cloud refers to the output of a LIDAR sensor [42].The high resolution, accuracy, and 3D nature of the point clouds produced by a LIDAR sensor make such a sensor an attractive choice for autonomous detection and localization of objects (e.g., in environments such as industrial areas or motorways). The ability of detecting and localizing objects autonomously can be useful in numerous applications and use-cases, e.g. in autonomous driving vehicles [19].It is likely that more than one LIDAR sensors are needed in order to scan and create detailed 3D models of complex and large environments [1]. This is needed, for instance, when LIDAR laser beams from a single sensor might not be able to reach some objects because of occlusion. Moreover, even for an object which is not occluded, the LIDAR reading can be limited due to the object’s disposition and the LIDAR’s location; i.e., LIDAR beams might not hit some portions of the object. Engaging several LIDAR sensors for gathering data from different points of view can help us overcome issues such as occlusion and partial views of objects. Moreover, it can increase robustness by adding redundancy to deal with failure cases. This opportunity can enhance resiliency and availability, e.g. for automated vehicles in production environments, for checking safety risks such as geofence detection in environments where robots and humans co-exist, to mention just a couple of possible uses.In the following, we discuss the challenges that are introduced by a multi-LIDAR setup, in the problem of detection and localization of objects, utilizing fog and edge computing in data processing.
Challenges relative to the state-of-the artDetection and localization of objects using data from several LIDAR sensors is a resource-demanding problem. Given the state-of-the-art, a method that can be considered as the baseline, is to (i) first gather the point clouds from the different sources (edge nodes), commonly connected through a shared wireless channel, to a fog node; (ii) afterwards apply an object detection algorithm, commonly a clustering algorithm [40], [41], on the union of sources’ point clouds, labeling each point accordingly. However, this approach is not practical due to the cumulative data volumes, resulting in: (i) prohibitive processing costs (at least linear in the point clouds’ size) even for state-of-the-art parallel clustering approaches [3], [12], [29], [35], [35], [40]; (ii) prohibitive communication bandwidth requirements; for example, simultaneous transmission of six or more high-resolution point clouds can take multiple seconds using a shared wireless communication medium of common rates [7], [26]; (iii) prohibitive latency, as a combined consequence of the above.To cope with the aforementioned limitations, continuous data processing at the edge (i.e. performing distributed detection and localization for each LIDAR source) can be beneficial to overcome the aforementioned limitations. However, to that end, new aspects imply challenges in identifying a fast, continuous and distributed approach: (i) efficient representation of the local results, and (ii) efficient combination of the local results in order to generate a global result; furthermore, (iii) the representation of the local results should be accurate enough to facilitate obtaining high-quality object detection and localization and, at the same time, should be compact enough to minimize the communication footprint and the complexity of applications such as geofencing.
ContributionsWe propose MAD-C, a multi-stage approximate distributed cluster-combining method for obstacle detection and localization, using point-clouds from multiple LIDAR sensors; MAD-C efficiently exploits the available decentralized processing capacity at the edge nodes and prevents saturation of the communication network. A key component of our algorithm is an efficient summarization method. First, MAD-C clusters each point cloud at each edge node attached to a LIDAR sensor, orthogonally building on known methods for fine-grained point-cloud clustering. Each local cluster corresponds to an object in the sensed environment from the perspective of the respective sensor (i.e. occlusion can have significant influences). Then, each edge node computes a local, constant size geometrical summary of each object and MAD-C lets the processing nodes combine their findings with those of other nodes, until a complete view is reached. The following points summarize the findings regarding the properties of MAD-C.•We show that the aforementioned summaries are computable in a continuous way, with constant overhead in time and space and can be combined in an order-insensitive concurrent fashion, in time that depends only on the number of objects and sensors instead of their point-clouds’ sizes; thus MAD-C can exploit the data parallelism in the problem. We further provide a detailed analysis of the asymptotic expected completion time of MAD-C, considering both the communication and processing overhead, over a binary tree or a flat tree (star) network topologies connecting the edge devices.•We provide an extensive experimental study of MAD-C, on an actual IoT testbed and on simulations, with real-world and synthetic data and varying number of nodes, to cover a wide spectrum of scenarios, including very demanding cases. Based on the results, we can conclude that the common view produced by MAD-C is close in accuracy to that of the aforementioned baseline. We also observe significant improvements in processing and communication time, which are the more important aspects for fog/edge architectures and for the usage of the algorithm in time-sensitive applications.•Furthermore, as a usage of MAD-C, we show how to leverage its properties in order to efficiently answer queries regarding geofences, e.g. to detect objects inside restricted areas in an environment.An overview of MAD-C and results from a preliminary experimental study via simulations were first introduced in [27]. Here we provide a more detailed description of the algorithm, including procedures to tune key parameters, as well as the analytical study of its completion time. Furthermore, we provide a more extensive empirical evaluation of MAD-C with larger data volumes, over networks of various sizes, enabling to understand the scaling properties of MAD-C. Moreover, MAD-C is evaluated not only in simulation, but also in an IoT test-bed, comprising of representative fog/edge type devices. In addition, in the present work we explain how MAD-C’s summarizations can be used in other applications. Specifically, we present and analyze an application of MAD-C for the geofencing problem.The paper is organized as follows: We cover preliminaries in Section 2. We present MAD-C and its algorithmic implementation aspects in Section 3. We analyze MAD-C’s time complexity in Section 4. We present extensions and examples of further usages of MAD-C in Section 5. We provide an empirical evaluation of MAD-C in Section 6. We present the related-work and conclusions in Section 7 and Section 8, respectively.
