Since Google released its first Android operating system in 2007, Android has gained immense popularity and has become the most popular mobile operating system in the world. According to Statcounter (Statcounter 2020), in the third quarter of 2019, the Android mobile phone had a market share of approximately 76.67% in sales. In particular, Android users increased from 1.4 billion in 2015 to 2.5 billion in 2019, an increase of 178.57% (Brandom, 2019). Meanwhile, the growth of Android malware (namely, malicious software, including viruses, spyware, and other unwanted software that gets installed on your system without your consent) poses a substantial threat to users, and this situation has been serious in recent years because Android malware has become more infectious and disseminated (Meng et al., 2019). In “TenSec 2019”, Tencent Keen Security Lab released “Android Application Security White Paper 2018.” According to the white paper, Android applications found more than 3.2 million new malicious samples, averaging more than 11,000 per day (Keen Security Lab of Tencent 2018). According to statistics, Android malware accounts for 17% of the total applications (Symantec 2015). Therefore, Android malware detection is a key problem that must be urgently studied and solved.
Machine learning (ML) has been widely used in Android malware detection (Wang et al., 2019b). The ML-based method primarily involves two steps. The first step is to extract features from applications, and the second step is to build a classifier to distinguish malicious applications from benign applications. According to the manner of feature extraction, detection methods can be divided into two categories: static (e.g., (Sahin et al., 2018; Sahal et al., 2018; Xiong et al., 2018; Alam et al., 2020; Olukoya et al., 2020; Shen et al., 2019; Fan et al., 2018)) and dynamic (e.g., (Xiao et al., 2017; Zhang et al., 2020; Saracino et al., 2018)) analyses. Dynamic analysis must run applications on a device or simulator and monitor the runtime information of the applications, such as the network traffic and system calls. This method can achieve high accuracy in identifying malicious activities; however, the runtime monitoring is very costly and cannot be deployed on mobile devices (Wang et al., 2019b). Static analysis obtains static feature information through decompiling the installation packages of the applications (i.e., the APK files), such as permissions and application programming interface (API) calls. This method has lower overhead and higher code coverage, and it can be directly applied to mobile devices.
Almost all static analysis methods extract binary (namely Boolean) features from the APK files, such as whether a permission is used (Sahin et al., 2018; Sahal et al., 2018; Xiong et al., 2018; Wang et al., 2019c; Zhu et al., 2018), whether a function is called (Zhu et al., 2018; Singh et al., 2019), and whether a network address exists (Xiong et al., 2018; Appice et al., 2020). Some dynamic analysis methods also use binary features, such as whether a system call is triggered (Wang et al., 2019b), and whether an API is called (Wang et al., 2019b). In most of these studies, the binary features are directly fed into the classifier to train the model in the training phase and to distinguish malicious applications from benign applications in the detection phase. However, the importance of features is different. For example, SEND_SMS and CALL_PHONE are dangerous permissions, while FLASHLIGHT and INSTALL_SHORTCUT are normal permissions. Therefore, the former two are more important than the latter two for malware detection. Similarly, android.telephony.TelephonyManager.listen() and android.app.ActivityManager.getRunningTasks() are sensitive APIs that can violate users’ privacy, while android.media.effect() and android.hardware() are normal APIs. Therefore, it is not rational to treat all features similarly. In recent years, feature weighting has been proposed by related work (Sahin et al., 2018; Sahal et al., 2018; Kumar et al., 2018; Varsha et al., 2017). In these studies, how to measure the importance of features and how to assign an appropriate weight to each feature is critical. If the weights are not properly set, the detection accuracy may even be worse. However, these studies estimate the importance of each feature based on the statistical analysis of the original binary feature matrix. Their feature weighting is irrelevant to ML algorithms. Therefore, the accuracy of the classifier for malware detection may not be satisfactory.
To address the above issues, this paper proposes a novel Android malware detection scheme based on feature weighting with joint optimization of weight-mapping and classifier parameters, JOWMDroid. Accordingly, the proposed feature weighting method is called JOWM. The scheme is an ML-based static analysis method whose main workflow is presented in Fig. 1. In the training phase, binary features of eight categories are first extracted from the APK files and then a certain number of the most important features are selected using information gain (IG) for malware detection. Next, an initial weight is calculated for each selected feature. Then, it is mapped to a final weight using a weight-mapping function. Finally, the parameters of the weight-mapping function and classifier are jointly optimized using the differential evolution (DE) algorithm. In the detection phase, the mapped weights and classifier with optimized parameters are used to identify malicious applications.Download : Download high-res image (709KB)Download : Download full-size imageFig. 1. Main workflow of JOWMDroid.
The main contributions of this paper are the following:
•This paper proposes a novel feature weighting method (i.e., JOWM). It consists of three links. The first link is to calculate an initial weight for each feature, and the second link is to map the initial weights to the final weights via a weight-mapping function. The third link is to optimize the parameters of the weight-mapping function and classifier jointly.•The importance measures of features supplied by three classification models are used to calculate the initial weight of each feature. That is, the proposed feature weighting is relevant to ML algorithms, which improves the accuracy of the subsequent classifier for malware detection.•Five parameterized weight-mapping functions, namely the power, exponential, logarithmic, hyperbolic, and S-shaped curve functions, are designed to map the initial weights to the final weights. Moreover, the DE algorithm is used to jointly optimize the parameters of the weight-mapping function and classifier, which causes the classifier to achieve higher accuracy.•This paper presents the detailed evaluation results. These results demonstrate the effectiveness of JOWM from multiple perspectives.
The rest of this paper is organized as follows. The related work is introduced in Section 2. Section 3 describes the feature extraction and selection methods. Section 4 proposes the novel feature weighting method (i.e., JOWM). The evaluation and analysis are presented in Section 5. Finally, conclusions are drawn in Section 6.
