Global optimization problems (GOP) exist widely in real life. At present, the global optimization problems are mainly solved by the methods based on mathematical programming and heuristic algorithms. Most of the mathematical programming methods require gradient information, so they cannot be used to solve non-differentiable functions [1]. The mathematical programming methods usually suffer from getting trapped in a local optimum in solving complex optimization problems [2].
In the real world, most problems are complex nonlinear, multi-modality, hybrid, composite, and large-scale. Experiment shows that the meta-heuristic algorithm has an excellent performance in solving such issues, thus attracting researchers to study it. Most of the meta-heuristic algorithms are inspired by nature. Different from traditional mathematical programming methods, they use some defined rules and randomness to simulate natural phenomena, effectively avoiding the gradient problems in the optimization process [3].
In the past two decades, many research studies have been carried out on metaheuristic methods. There have been proposed many metaheuristic algorithms for solving continuous problems such as genetic algorithm (GA) [4], differential evolution (DE) [5], the artificial bee colony (ABC) [6], particle swarm optimization (PSO) [7], ant colony optimization (ACO) [8]. The main advantage of these algorithms is their use of “trial-and-error” to find the optimal solution. Accordingly, these algorithms were successfully applied to solve global optimization problems [9].
Differential evolution (DE), which is firstly proposed by Storn and Price in 1997 [5], is one of several meta-heuristic algorithms that have been widely concerned by relevant scholars in recent years. Experimental results show that it, as a population-based meta-heuristic algorithm, can cope with many complex global optimization problems. DE is a stochastic optimization algorithm that moves the population toward global optimum by applying mutation, crossover, and selection operations at each generation [10], [11]. Due to its simplicity and efficiency, differential evolution has been successfully applied to many fields such as computer vision [12], engineering design [13], [14], Optimization of chemical problems [15], and biogeography [16].
The optimization performance of DE is mainly influenced by two factors. One is the appropriate configuration of mutation strategy and control parameters, and the other is population structure. The mutation strategy and parameters are sensitive to problems [17]. Generally, different strategy choices and parameter settings will bring different results in problem optimization, and different mutation strategies and control parameters should be selected for different problems [18], [19]. Because many popular parameters and mutation strategies have their distinct properties, some mutation strategies are applied to improve exploitation. Some are used to enhance exploration ability. Some others can achieve a trade-off between exploration and exploitation, and some control parameter settings can speed up the convergence [20], and some other settings are effective for separable functions [21]. Thus, DE faces the difficulty of strategy selection and parameter setting [22]. Address these issues, and there are mainly two commonly used methods. One method is to control the mutation strategies and the parameters adaptively. Another method is to organically integrate different existing parameters and mutation strategies through various hybrid schemes [19], [23], [24], [25].
In order to improve the performance of DE, some DE variants with automated tuning or ensemble of mutation strategies and parameters are proposed in the past years. In Ref. [17] the authors proposed an adaptive DE(HHDE). HHDE utilized both the successful experience of the whole population and the heuristic information of individuals to adjust the mutation strategies and associated parameters dynamically. In Ref. [19] the authors proposed a differential evolution algorithm with an ensemble of parameters and mutation strategies (EPSDE). In EPSDE, a pool of mutation strategies and a pool of control parameter coexist throughout the evolution process and compete to produce offspring. In Ref. [24] a novel method called composite DE (CoDE) has been proposed. CODE used three trial vectors to generate strategies and employed three control parameter settings to generate trial vectors by randomly combining them. In Ref. [26] the authors proposed an adaptive evolution algorithm (JADE) that used a parameter adaptation mechanism and a novel mutation strategy DE/current-to-pbest/1 with an archive. In Ref. [27] the authors proposed an adaptive evolution algorithm (SaDE) in which two types of mutation strategies are used, DE/rand/1/binand DE/best/2/bin. In SaDE, the probability of using these two strategies to generate offspring is adjusted based on their success ratios in previous generations. Elsayed et al. [28] proposed a three-strategy based differential evolution algorithm (SAOMDE). SAOMDE utilized the strengths of three well-known DE variants through an adaptive learning process. Based on the above discussions, it can be seen that all mutation strategies in DE variants were in the same population. So each mutation strategy had the same computational resources. In terms of resource allocation, this will cause a waste of resources. A good strategy should be assigned more computing resources, and a bad strategy should be assigned to fewer computing resources.
Recently, several popular population topologies have been introduced into DE to improve its performance, such as panmictic topology [29], neighborhood-based topology [30], and distributed topology [31]. Currently, the most popular population topology is distributed topology. This kind of structure divides the entire population into several smaller subpopulations [32]. Individuals in each subpopulation are independently evolved. At present, multi-population and mutation strategies have been introduced to strengthen the performance of DE in several studies [22], [33], [34], [35], [36]. In Ref. [22] the authors proposed an adaptive distributed differential evolution (ADDE). In ADDE, the population was divided into four subpopulations: one master and three slaves. ADDE adaptively updated the individual control parameters. In ADDE, subpopulation is dynamic in terms of regrouping, adaptively chose its suitable mutation strategy, and related parameters based on the feedback information of individuals and the whole corresponding population. In Ref. [33] the population was divided into several equal subpopulations to maintain population diversities. Each subpopulation had a different mutation and update strategy. In Ref. [34] the population was divided into twenty smaller subpopulations. Each subpopulation used two mutation strategies, DE/rand/1 andDE/best/1 to perform its search in parallel. The scaling parameter was randomly chosen from the range of [0.2,0.9]. The crossover parameter was fixed. In Ref. [35] the authors divided the entire population into four distinct groups according to feasible ratio and fitness improvement, each of which executed one type of mutation strategy on their members. In Cloudde [36], the population was divided into four parallel subpopulations, and different fixed mutation strategies were assigned for them respectively to reduce computational costs for real-world problems.
Although the DE variants above-mentioned have significantly improved the performance of DE, most of them focus on the diversity of population and ignore the automatic allocation of computing resources. MPEDE [37] was a multi-population based DE variant that realized a dynamic ensemble of multiple mutation strategies. In the MPEDE algorithm, the authors used the specified portion to divide the entire population into a larger reward subpopulation and three smaller equal indicator subpopulations. At the beginning of the evolutionary process, three indicator subpopulations were assigned to three mutation strategies, and the reward subpopulation was randomly assigned to one of the three mutation strategies. After a certain number of generations, the reward subpopulation was assigned to the best mutation strategy. It enabled the best mutation strategy to obtain the most computational resources during the evolution, but the better strategy and the worst strategy had the same computing resources. In MPEDE, the constituent mutation strategies included DE/rand/1, DE/current-to-rand/1, and DE/current-to-pbest/1 with an archive. DE/rand/1 is a commonly used strategy with better exploration capabilities, DE/current-to-pbest/1 with an archive has been proved significantly effective in solving complex unimodal and multimodal optimization problems, DE/current-to-rand/1 without crossover operation, is a rotation-invariant and very useful in solving rotated problems. Based on the method proposed in JADE, the control parameters of MPEDE are adapted. However, there are still some problems with these works. In MPEDE, most computing resources are allocated to the best strategy, but the better strategy and the worst strategy have the same computing resources. In order to distribute computational resources rationally, a better strategy should have more computing resources than a worse strategy. Meanwhile, DE/rand/1/bin mutation is good at searching for new solutions but less efficient in terms of convergence rate [26].
To address these issues and strengthen the performance of MPEDE, we have proposed multi-population cooperation and multi-strategy integration DE (MPMSDE). We are inspired by the Matthew effect, “For to everyone who has will more be given, and he will have abundance; but from him who has not, even what he has will be taken away” [38], in other words, “the poor are much poorer, and the rich are much richer.” Instead of the grouping method in MPEDE, a new grouping method is used in MPMSDE, which utilizes the strategies ranking to assign computational resources to different strategies. The result indicates that in the whole evolution process, the optimal mutation strategy obtains the most computational resources. The suboptimal mutation strategy obtains the second-largest computational resources, and the worst mutation strategy obtains the least computational resources. A suitable mutation strategy can greatly improve the performance of the algorithm. In MPMSDE proposes a new mutation strategy DE/pbad-to-pbest-gbest/1 to replace the mutation strategy DE/rand/1 in MPEDE. The new strategy not only utilizes one of thepbest individuals to lead to the pbad agents in the current population but also utilizes the global optimal information in the current population to lead to thepbest individuals. In this way, when pbest individuals fall into local optimal thegbest individual can help them escape from the local optimal. When thepbest individuals do not fall into local optimal, the guidance ofgbest can accelerate the convergence. We combine the new strategy with the other two mutation strategies in MPEDE and use the MPEDE framework to search the global optimal solution. In addition, an information sharing mechanism is established to allow the subpopulation with the best strategy to learn from other subpopulations. It can increase the best strategy’s exploration ability and avoid falling into local optimum. By employing useful information obtained from other subpopulations, it is possible to drive a stagnated subpopulation to rejuvenate.
The difference between our research and previous studies are shown in the following aspects. Firstly, the focus is different. In previous literature, the application of multi-population in DE variants focuses on maintaining population diversities and balancing exploitation and exploration. However, MPMSDE focus on the dynamic ensemble of multiple mutation strategies and the computing resource allocation among mutation strategies. Secondly, the basis for grouping is different. In previous literature, most of the DE variants used a pre-specified ratio to group. MPMSDE utilized the strategies ranking to group. Thirdly, most previous works partitioned the original population into multiple smaller ones that have the same sizes, or all subpopulations have the same mutation strategy, or use a fixed grouping method, or used the dynamic grouping method but fixed parameters setting. However, MPMSDE divided the original population into multiple unequal subpopulations and dynamic regrouping subpopulation, and each subpopulation has a different mutation strategy, and adaptively update parameters.
Our work is different from MPEDE in several aspects. Firstly, the grouping method is different. In MPEDE, the authors used the specified portion to divide the entire population into a larger subpopulation and three smaller equal subpopulations. MPMSDE uses a new grouping method that utilizes the strategies ranking to assign computational resources to different strategies. There are three subpopulations with the same size in MPEDE, while the size of subpopulations in MPMSDE is all unequal. Secondly, different constituent mutation strategies are used. In MPMSDE proposes a new mutation strategy DE/pbad-to-pbest-gbest/1 instead of the mutation strategy DE/rand/1 in MPEDE. Thirdly, there has an extra sharing mechanism in MPMSDE.
Furthermore, we regard that the rational allocation of computational resources in different evolutionary stages is a viable way to save computing resources. Moreover, the multi-population mechanism of the rational distribution of computing resources can increase the diversity of the population and save computing resources of the population. Overall, inspired by these observations, and to improve the performance of MPEDE, we develop multi-population cooperation and multi-strategy integration differential evolution algorithm with a sharing mechanism (MPMSDE for short). The contributions of this paper are summarized as follows.
(1)  A mechanism of the adaptive population grouping is established to allocate computational resources rationally. The grouping mechanism is based on the ranking of the strategy. According to the ranking of strategies, a different strategy is assigned to a different subpopulation. In MPMSD, the best mutation strategy has the most computational resources, and the suboptimal mutation strategy has more computational resources, the worst mutation strategy has the least computational resources. Thus realize rationally distribute computational resources.(2)  An information sharing mechanism is proposed. In MPMSDE, the big subpopulation is called the master population, and the others are called the slave population. A sharing mechanism is established to allow the master population to learn from slave populations. On the one hand, individuals in master subpopulation independently search for even better solutions as the best strategy. On the other hand, it also acquires information from the other slave subpopulations. In this way, the master population can be prevented from falling into local optimization to a certain extent.(3)  A new mutation strategy is introduced. MPMSDE proposes a new mutation strategy DE/pbad-to-pbest-gbest/1 instead of the mutation strategy DE/rand/1 in MPEDE.
The rest part of this paper is organized as follows. Section 2 briefly describes the classic DE algorithm’s procedure and reviews the MPEDE algorithm and the IMPEDE algorithm. Section 3 describes the design of our proposed MPMSDE algorithm. Section 4 introduces and analyzes experimental results. Section 5 builds mathematical modeling for the MPMSDE algorithm. Finally, some conclusions are given in Section 6.
