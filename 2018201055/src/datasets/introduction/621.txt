We study orthogonal range skyline reporting in the I/O model [2] of computation in external memory. The skyline or maximal points of a planar pointset is the subset of points that are not dominated by any other point in the set, i.e. no other point has both coordinates larger than any maximal point. Naturally, the skyline forms an orthogonal staircase of the maximal points that appear in decreasing y-order, when considered in increasing x-order. See Fig. 1a for an example. An orthogonal range skyline reporting query reports the skyline of the subset of points that are contained in a given 4-sided rectangle. See Fig. 1b for an example. Standard 2-d orthogonal range reporting queries [3], [4], [5], [6], [7] (where all points in the range are reported, not only the skyline) are harder than the special case of 2-d orthogonal 3-sided range reporting queries (where the query rectangle is unbounded in one side), regardless of which side is unbounded. However for skyline reporting, due to the orientation of the “dominance relation”, we only consider as an easier special case 2-d orthogonal 3-sided range skyline reporting queries for 3-sided rectangles with their top side unbounded (Fig. 1c), since we will show that all other cases of 3-sided rectangles, as well as the 4-sided case, essentially reduce to the harder 2-d orthogonal anti-dominance skyline reporting queries, where the query rectangle is unbounded in both the left and bottom sides (Fig. 1d).Download : Download high-res image (93KB)Download : Download full-size imageFig. 1. Variants of 2-d orthogonal range skyline reporting.
1.1. Previous resultsInternal memory.  In the word-RAM model, Kalavagattu et al. [8] present static 2-d orthogonal range skyline reporting data structures that support queries in O(log⁡n+k) time, where n is the number of points and k is the size of the reported skyline, using superlinear O(nlog⁡n) space. For points in rank-space, i.e. on an [O(n)]2 grid, the data structures of Das et al. [9] support queries in O(log⁡nlog⁡log⁡n+k) time, using superlinear O(nlog⁡nlog⁡log⁡n) space. Range skyline queries have been studied in higher dimensions [10].Brodal and Tsakalidis [11] present optimal dynamic 2-d orthogonal 3-sided range skyline reporting data structures that support queries in O(log⁡nlog⁡log⁡n+k) time and updates in O(log⁡nlog⁡log⁡n) time, using linear space, concluding a long series of improvements [12], [13], [14], [15], [16] over the initial polylogarithmic worst-case bounds of Overmars and van Leeuwen [17].External memory.  In the I/O model with block size B [2], the optimal pointer machine skyline algorithm [18] has been externalized [19] and I/O-optimal data structures for 2-d orthogonal planar range skyline counting queries (that report the skyline size) have been presented [20]. However, despite the abundance of work on skyline reporting in various I/O-efficient settings, no static [21] or dynamic [22], [23], [24], [25] data structures exist for orthogonal range skyline reporting with guaranteed worst-case I/O-efficiency, even for planar pointsets. The main focus in literature has been on experimental analyses of average case or adversarially restricted sequences of operations that appear commonly in practice.
1.2. Our contributionsDynamic orthogonal range skyline reporting.  In Section 2 we present the first I/O-efficient dynamic data structures for 2-d orthogonal 3-sided range skyline reporting that support query and update operations in logarithmic worst-case I/Os, using linear space (Theorem 2.1).Catenable attrition priority queues.  Our dynamic data structures rely heavily on an I/O-optimal generalization of the attrition priority queues of Sundar [26] that also supports real-time concatenation in constant worst-case time. Specifically, in Subsection 2.1 we present catenable attrition priority queues that operate on a set of totally ordered elements and support real-time operations DeleteMin (remove and report the minimum element stored) and CatenateAndAttrite (catenate two attrition priority queues Q1,Q1 and attrite Q1, i.e. remove its stored elements smaller than the minimum element in Q1). We also prove that the operations are actually supported in subconstant amortized O(1B) I/Os by a detailed amortized analysis (Theorem 2.3).In more detail, Sundar [26] presents three worst-case-efficient implementations for operations DeleteMin and InsertAndAttrite that use a constant amount of linked lists and additional pointers. In fact, in the third implementation, this amount is a user-defined parameter kQ. We observe that the third implementation can be modified to further support operation CatenateAndAttrite and we present the detailed implementation in Subsection 2.1, isolating the case where concatenation is actually taking place (see Fig. 3). In the application to 3-sided range skyline reporting, we have that kQ=o(B), i.e. all additional pointers fit in a block, and hence the attrition priority queue is loaded in main memory without incurring any extra asymptotic cost.Static orthogonal range skyline reporting.  In Section 3 we present I/O-optimal static data structures for 2-d orthogonal 3-sided range skyline reporting in the indexability model [5], where a word stores exactly one indivisible input coordinate (Theorem 3.2), as well as for divisible input coordinates (Theorem 3.5 for points in rank-space and Corollary 3.5.1 for the general case). In Subsection 3.2 we prove a query I/O-complexity lower bound of any static linear-space data structure for 2-d orthogonal range skyline reporting in the indexability model [4] (Theorem 3.7) and provide a matching data structure that is also dynamic (Corollary 3.7.1). This essentially shows that 2-d orthogonal range skyline reporting is as hard as standard 2-d orthogonal range reporting [3], [4], [6].
