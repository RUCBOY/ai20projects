As Building Information Modeling (BIM) continues to expand its prevalence in the Architectural Engineering and Construction (AEC) industry, the development and use of domain-specific applications are also on the rise. A multitude of specialty software exists to meet various needs ranging from design quality checks, conflict detection, and cost and scheduling analyses, to more in-depth analyses such as building code compliance, structural and energy simulations, as well as a medium for multiple project stakeholder collaboration. For BIM models to be used by these custom applications, data of BIM models need to be seamlessly exchanged without ambiguity or data corruption, a central tenet of the BIM paradigm.
The IFCs, a platform-neutral, open file format specification for building and construction industry data, plays a critical role in ensuring interoperability, allowing entity and relationship data to be exchanged between applications [1]. However, due to the need to define objects and relationships for a broad range of AEC subdomains, the IFC schema, while rich and extensive, is also complex and has redundancies. Studies have shown that data exchanges in IFC are “vulnerable to errors, omissions, contradictions, and misrepresentations because they reduce or simplify the information” [2].
A rudimentary and yet crucial precondition is the correct assignment of a BIM element to its corresponding IFC entity. Due to its open-ended architecture, the IFCs does not mandate that such element to IFC ‘mappings’ are indeed legitimate. For example, [3] noted that a steel bearing plate may be exported as an IfcBeam, although given the context and intended classification, IfcPlate is a more accurate designation.
Such mappings become more open to ambiguity for element ‘subtypes’. Subtypes in this research refer to detailed categories of a typical BIM element. For example, a door can be further qualified as single, double, sliding or revolving subtypes. In IFC such types are not distinguished explicitly, and a door regardless of its subtype is typically mapped by default as an IfcDoor entity.
Existing approaches to check for BIM-to-IFC entity associations mostly used a deductive reasoning approach, in which a series of inference rules are designed to screen IFC entities and rectify their classification. However, the downside of such approaches is that such rules may not be available for each and every entity in the IFC schema. That is, quoting [4], “not everything in the way our buildings are designed and built can be translated into explicit rules.”
Recently, researchers have begun to explore an inductive reasoning approach, via the employment of machine learning, where rules are learned and generalized from the data itself [4], [5]. The aim of this research was to employ deep learning, a subset of machine learning, to automate the classification of BIM element subtypes. Subtypes are more challenging as they are more nuanced in their geometry, and thus require differentiating between finite discrepancies. The authors thus explored the use of deep learning models targeted specifically for the non-Euclidian 3D domain, namely, Multi-view CNN (MVCNN) [6] and PointNet [7] to automate the classification of BIM element subtypes. MVCNN builds classifiers of 3D shapes from 2D image renderings of those shapes, and its results have been shown to outperform the classifiers built directly on the 3D representations. PointNet is a deep neural network that is first of its kind in taking point clouds directly as input to classify and segment 3D artifacts.
Their performance was evaluated by comparing their ability in classifying two BIM element subtypes, namely, doors (IfcDoor) and walls (IfcWall). Their performance was also compared to a machine learning algorithm, support vector machines (SVM), essentially to provide a performance baseline as well as highlight their mechanical differences.
The rest of the paper is structured as follows. Section 2 introduces the needs for element subtypes in BIM, existing inductive and deductive reasoning approaches to resolving these needs, and an introduction to the mechanics of the 3D geometric deep learning models. Section 3 provides the methodology to train and test the deep learning models and the criteria used to compare their performance. Section 4 provides the results with regards to doors and walls, while Section 5 discusses the main findings from the results, as well as their implications and limitations.
