The emerging Software Defined Networking (SDN) is a novel networking paradigm where the data plane and control plane are decoupled on the SDN switch and SDN controller, respectively [1]. Concretely, SDN switch is a programmable device that is mainly responsible for forwarding network flows according to flow entries from SDN controller. SDN controller is a logically centralized device that supports a global view of the network state by collecting network information from SDN switches, and controls the fine-grained forwarding of network flows by dispatching flow entries to SDN switches. Instead of constantly forwarding flows according to the shortest paths implemented in traditional (or non-SDN) networking systems, SDN can achieve a more flexible, convenient and intelligent network management by customizing the forwarding rules for each flow [1]. The SDN paradigm greatly simplifies and facilitates the network management. Therefore, the related studies on SDN have been attracting worldwide attentions.
Although SDN brings many advantages, in practice, it is of great difficulties to entirely migrate a traditional network to a SDN network in one step, especially for a large-scale traditional network [2], [3]. The reasons mainly include two aspects: economical and technical factors. On one hand, purchasing and deploying SDN devices to upgrade the infrastructure of entire traditional network will inevitably impose a huge capital expenditure and operational burden on Internet Service Providers (ISP). Currently, ISP may be reluctant to implement one-step migration from traditional network to SDN. Moreover, many studies have demonstrated that it is unnecessary to update all legacy devices with SDN devices by considering deployment benefits [3], [4]. On the other hand, the emerging SDN-related hardware and software are relatively immature and lack of adequate evaluations on large-scale networks [5]. The reliability and stability of SDN devices cannot be guaranteed, which means that updating the entire infrastructure of traditional networks with specialized SDN devices may lead to potential security and instability risks.
Due to the above mentioned economical and technical factors, instead of upgrading the entire network, many ISPs begin to incrementally deploy SDN switches in a traditional network, thereby forming a more practical hybrid SDN with partial deployment of SDN switches in a traditional network [3], [6]. Fig. 1 shows a hybrid SDN scenario. As illustrated in Fig. 1, there are legacy routers and SDN devices working in a hybrid network. More specifically, the legacy routers supports only the OSPF protocol. The SDN switches work in a hybrid mode that supports not only the SDN protocol (e.g., openflow) to connect with the SDN controller, but also the OSPF protocol to interact with the legacy routers. Therefore, the legacy routers can only forward the flow through the shortest paths, which is indicated at the routing tables. However, flows in SDN switches can be allowed to be arbitrarily split for multi-paths forwarding, which is indicated by the flow entries from the SDN controller. Therefore, the hybrid SDN architecture not only has the flexibility of a centralized network, but also has the robustness of a distributed network. In this paper, we mainly focus on studying the routing optimization in a hybrid SDN.
In order to exploit the flexibility provided by SDN devices to achieve an efficient routing in a hybrid SDN, many previous studies have focused on designing effective methods to determine the route selection for flows [7], [8]. To realize it, the network operator usually needs SDN controller to indicate the forwarding behavior of SDN switches, which leads to a large number of flow entries installed in SDN switches. Abundant flow entries installed in SDN switches will inevitable largely consume the expensive and power-hungry Ternary Content Addressable Memory (TCAM) resource [9], [10]. Moreover, a large number of flow entries lead to the increment of routes management complexity. Therefore, it is very promising and practical to consider reduction of the used flow entries into routing optimization. To reduce the number of flow entries used in forwarding flows, taking the path cardinality constraints into routing optimization is necessary.Download : Download high-res image (338KB)Download : Download full-size imageFig. 1. An example of a hybrid SDN scenario where SDN switches and legacy routers coexist. Here, R1 ∼ R6 and S1 are legacy routers and SDN switch, respectively. Through openflow protocol, the SDN controller collects flow information, and controls the forwarding rules of the flows through dispatching flow entries into SDN switches. The SDN switches forward the flows as indicated by flow entries. Through OSPF protocol, the legacy switches forward the flows to the nexthop on the shortest paths.
How to optimize routing with path cardinality constraints to minimize Maximum Link Utilization (MLU) of a hybrid SDN poses a great challenge. Here, we start with load balancing as our objective goal, aiming to minimize the MLU to avoid link congestion. Specifically, the fewer paths the flows route on, the fewer flow entries generated, but the worse network performance we obtain. The path cardinality constraints will lead to the degradation of network performance. To make a trade off between flow entries number and network performance, we should determine the most profitable path cardinality h for routing flows in a hybrid SDN. With huge solution space, which and how many paths to select out of all permissible paths for each flow makes the routing optimization problem difficult to solve.
To solve this problem, we first formulate the problem of routing optimization with path cardinality constraints as a Mixed Integer Non-Linear Programming (MINLP) problem, which is NP-hard. Then, we propose an approximation algorithm: H-permissible Paths Routing Scheme (HPRS) to route each flow on h paths for minimizing MLU of a hybrid SDN. Next, we analyze and prove the approximation ratio of HPRS through theoretical analysis. Finally, through extensive experiments, we demonstrate that HPRS has superior performance in minimizing MLU and in reducing flow entries over other routing algorithms. Our main contributions in the paper are summarized as follows:

•We propose to take the path cardinality constraints into consideration when optimize routing in a hybrid SDN scenario.•We formulate the routing optimization problem as a MINLP model, which is proved to be NP-hard. To solve the problem, we propose an approximation algorithm HPRS with an approximation ratio of O(logL)
 (L is the link number) to select h permissible paths for flows routing.•We evaluate HPRS on different topologies and traffic datasets. Through experiments, we observe that 2-permissible paths routing can reap the most of benefit. In addition, comparative experiments show the superiority of HPRS over other routing algorithms in minimizing MLU and reducing flow entries.
The reminder of this paper is organized as follows. Section 2 introduces some related works. Section 3 presents the network model of routing optimization problem under the path cardinality constraints, and analyzes the complexity of the problem. Section 4 proposes an approximation algorithm HPRS with a theoretical guarantee of O(logL) and analyzes the complexity of the algorithm. Section 5 evaluates the performance of the proposed method and reports extensive experimental results. Finally, Section 6 gives a conclusion of this work.
