The latest report issued by Greenpeace [1], an international organization dedicated to environment protection, shows that electricity consumption from Internet industry is on track to jump by two thirds over the next five years. By 2025, the industry is projected to consume 267 TWh of electricity, which is estimated to consume approximately 7% of global electricity. The tremendous amount of power consumption of Internet industry brings some side effects. On the one hand, Internet industry is mainly powered by the burning of fossil fuels, which causes global warming, air pollution and even health damage [2]. On the other hand, the giant electricity consumption brings enormous economic losses. With the expansion of network scale, energy cost has been demonstrated to exceed the device cost, since low-power CPUs and cooling devices are adopted to remove the heat generated by high power devices [3]. Consequently, power-saving in the network is urgent and essential for economic and environmental reason.
It is quite complex and difficult to manage the legacy network. When deploying the power-saving strategies, a great quantity of network configurations are required for network operator, which is challenging and error-prone. Moreover, the legacy network is vertically integrated. In other words, control plane (that determines how to handle traffic) and data plane (that forwards traffic according to the decisions made by control plane) are bundled together, which reduces flexibility and hinders the innovation of network architecture. As a result, it is difficult to flexibly deploy power-saving strategies in the legacy network.
Fortunately, the emergence of Software Defined Networking (SDN) [4], [5], [6] remedies the limitations of strategy deployment in legacy network. SDN, an emerging architecture that is dynamic, manageable, cost-effective and adaptable, decouples control plane and data plane. SDN enables control plane to become directly programmable and data plane to be abstracted for applications and network services. With such characteristics, the power-saving strategy can easily determine which switches and links should be slept to reduce power consumption.
Power-saving techniques commonly used in SDN are summarized in [7], [8], including devices sleeping [9], flows consolidation [10], [11], link rate adaptation [12], [13], Ternary Content Addressable Memory (TCAM) space compression [14], [15] and flow rule optimization [16], [17]. Among them, devices sleeping and flows consolidation are inseparable. Refs. [18], [19], [20], [21], [22], [23], [24], [25], [26] achieved power-saving by consolidating the flows that pass through underutilized devices into a small set of ones and then sleeping the unused ones. Refs. [27], [28], [29] jointly applied link rate adaptation with devices sleeping and flow consolidation to achieve more significant power-saving. In addition, TCAM is expensive, consumes high amount of power, and generates a large amount of heat. As a result, some works [15], [16], [17], [30] achieved power-saving through flow rule optimization and TCAM space compression. In this paper, the techniques we adopt mainly cover three aspects: devices sleeping, flow consolidation and link rate adaptation, while TCAM space compression and flow rule optimization techniques will be involved in future work.
The traffic flows usually have a bursty nature in data center network, that is, the traffic load can have large variation in a short time period [31], [32]. The existing power-saving proposals usually reduce power consumption by dynamically sleeping and waking up the network device according to the current traffic variation. When the traffic fluctuate sharply, the network device will swing between sleep and active state frequently, which causes a series of side effects, such as packet losses, short sustainable device service life and synchronization among devices [20], [23]. Moreover, they generally assume that the power incurred by device state transition is zero. However, in real scenarios, awakening a switch in sleep state consumes most of its power, and thereby, power consumed by frequent state transition is not neglected.
To avoid such side effects and reduce power consumption, we propose a Power Optimization with Less State Transition (POLST) framework for SDN. The main idea is that POLST monitors real-time traffic fluctuation and generates a global network view. Based on this view, POLST can achieve significant power-saving while substantially reducing the number of device state transition. The main contributions in our work are summarized as follows.

•Based on SDN, we devise POLST framework, which mainly achieves the following two functions: (1) Real-time network monitoring with high accuracy and low overhead; (2) Power optimization with less device state transition.•In the network monitoring, we propose an adaptive port monitoring algorithm deployed in POLST, which accurately tracks network information with less message overhead.•In the power optimization, we formulate the optimization problem of minimizing the power consumption of data plane in SDN, while considering power incurred by device state transition. Then, to solve the optimization problem, we propose Power Aware Routing with Less State Transition (PARLST) algorithm deployed in POLST, which copes with the current traffic load through as few active switches as possible, and remarkably reduces the number of device state transition.•Experimental results show the superiority of POLST in terms of the network monitoring and the power optimization. In the network monitoring, POLST can achieve up to 97.2% monitoring accuracy and use 51.5%-70.7% message number less than used other common monitoring algorithms. In the power optimization, in comparison to the benchmarks, POLST can achieve up to 72.2% energy efficiency, 56.6% decrease in Switch State Transition (SST), 53.5% decrease in Link State Transition (LST).
The remainder of this paper is organized as follows. In Section 2, we review the current power-saving researches in SDN. In Section 3, we devise an SDN-based framework, that is, POLST, and introduce its workflow. Section 4 describes the system model and problem formulation, followed by a presentation of our algorithms in Sections 5 Network monitoring, 6 Power optimization. Performance evaluation is presented in Section 7. Finally, Section 8 concludes our research.
