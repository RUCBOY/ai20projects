When f is a function from {−1,1}n to {−1,1}, f can be written as f(x)=∑S⊆[n]f̂(S)∏i∈Sxi,where [n]={1,2,…,n} and f̂(S) are the Fourier coefficients of f given by (1)f̂(S)=12n∑x∈{−1,1}nf(x)∏i∈Sxi.The total degree of f (or simply the degree of f), denoted by deg(f), is defined by deg(f)=max{|S|:f̂(S)≠0}. We use f̂(i) instead of f̂({i}) for a natural number i≤n, which also refers to linear (weight one) coefficients.
In a collection of open problems in field of the analysis of Boolean functions [10], O’Donnell attributed the following conjecture to Parikshit Gopalan and Rocco Servedio (ca. 2009): If f is a function from {−1,1}n to {−1,1}, and deg(f)=d, then ∑i=1nf̂(i)≤d.
In the same paper [10], O’Donnell, more ambitiously, stated that one could propose the following, stronger conjecture:
Conjecture 1Let f:{−1,1}n→{−1,1} and let d be the degree of f. Then ∑i=1nf̂(i)≤dd−1⌊d−12⌋21−d.
Motivation for studying growth of the sum of linear Fourier coefficients of f, ∑i=1nf̂(i), comes from social choice. If we consider a function f:{−1,1}n→{−1,1} as a voting rule for a 2-candidate election, then the expected number of votes that agrees with the outcome of the election is equal to n2+12∑i=1nf̂(i), see [11] for details. It is generally assumed that the larger the expected number of votes that agree with the outcome of the election, the better. So, it is natural to ask how big that number can be, and which functions are the maximizers. To answer that, we are enforced to study ∑i=1nf̂(i) and try to derive some efficient upper bounds. If we do not impose any restrictions on the degree of a function, the answer is known. The unique maximizers of ∑i=1nf̂(i) among all f:{−1,1}n→{−1,1} are the majority functions, see Section 2.1 for more details.
Since the statement of the conjecture, there had not been a lot of progress towards its validity until recently. In [16], Wang translated Conjecture 1 to an equivalent conjecture about a class of resilient Boolean functions f:{0,1}n→{0,1}, thus giving alternative aspects of O’Donnell’s conjecture. The notions used here about Boolean functions from {0,1}n to {0,1} are defined precisely in the next section.
Conjecture 2 [16]Let g:{0,1}n→{0,1} be an (n−d−1)-resilient Boolean function. Then ∑v∈{0,1}nwt(v)=n−1Wg(v)≤dd−1⌊d−12⌋2n+1−d,where Wg(v) (see (2)) is the Walsh coefficient of g at point v∈F2n and d is the degree of g.
This alternative formulation was used by Wang [16] to prove that the conjecture is true when d=1 and d=n−1, which gives a nontrivial relationship between the Walsh coefficients of weight n−1 and the degree d.
In this paper, we further employ Wang’s approach using a standard Boolean setting. Firstly, we show an interesting combinatorial property related to Conjecture 2 which implies that (for a fixed d) the upper bound only depends on a finite number of integers n. More precisely, we show that if Conjecture 2 is correct for all n≤22d−2, then it is true for all n∈N. Then we prove, again for a fixed d, that if the conjecture fails for some n0, then it is incorrect for every n>n0. These two results imply that, for a fixed d, if the conjecture is true for n=22d−2 then it is correct for every n∈N. Therefore, an immediate consequence is that the conjecture is true for d=2, since it can be easily checked exhaustively for n=4. Nevertheless, a direct proof of this fact can be provided using a characterization of (n−3)-resilient functions given in [3]. Then, for d=3, we combine the results on characterizations of (n−4)-resilient functions given in [6] and [2] and show that it is enough to check the conjecture for n=6, and in some special cases for n=7. For the purpose of proving that the conjecture is true for d=3, we employ integer programming to deal with the mentioned cases.
However, when d=4, we have identified a 2-resilient Boolean function in 7 variables which violates Conjecture 2. This means that Conjecture 1 is not true in general. More specifically, the conjecture is not true whenever n≥7 implying that (n−5)-resilient Boolean functions do not necessarily satisfy the above bound.
