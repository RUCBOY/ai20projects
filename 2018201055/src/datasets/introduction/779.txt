Cloud computing is widely used since it provides elasticity to users and increases the overall system utilization. Compared with the traditional single machine system, cloud computing systems need to serve a large number of users with many different application characteristics. Due to the increased number of users, applications, and data, storage is becoming a key obstacle in cloud computing [1], [2]. As modern applications produce a large amount of data due to the increased user data and emerging big data computing, it is becoming crucial in cloud systems to provide a reliable and high performance storage system.
To handle the massive amount of data while providing high performance and reliability, distributed file systems such as Lustre [3] and Ceph [4] are used in many cloud computing systems. Unlike traditional file systems such as EXT4 [5] and XFS [6], distributed file systems often consist of multiple servers which are dedicated to the storage service and connected to the client servers with fast networks. Such architecture of distributed file systems can offer two main strengths over the traditional file systems: scalability and parallelism [7]. Since the servers have limited hardware ports to connect the storage devices, connecting multiple servers with a network can allow distributed file systems to manage thousands of servers to the clients (scalability). Also, since thousands of servers are connected, many storage devices can be used to access the data simultaneously (parallelism). Hence, as a large number of storage devices are used in distributed file systems compared with traditional file systems, it is crucial to understand the characteristics of the underlying storage devices to improve the overall performance.
To improve the I/O performance even further, many distributed file systems are adopting emerging solid-state drives (SSDs) as their main storage devices [8], [9]. Compared with a traditional hard disk drive (HDD), SSD provides higher performance and lower latency. However, due to the unique characteristics of SSD, the performance of SSD is greatly impacted by the access pattern from the applications. For example, due to the erase before write constraint, the performance of random writes is far less than that of sequential writes [10], [11]. So, understanding and optimizing the access pattern of an application can improve the performance of SSDs.
Previous studies tried to improve the performance of SSDs by optimizing the access pattern. F2FS [11] is a flash-friendly file system that has the append-only logging policy for the underlying flash devices. By allowing in-place update in the metadata area, they minimized the wondering tree problem that single out-of-place update creates multiple cascading updates. SHRD [12] converts the random writes into sequential writes in the block layer and stores the remapping information inside SSDs with specific support. Ho et al. [13] proposes address reshaping techniques that separate the random and sequential write requests and transforms the random write requests into sequential write requests. Our study is in line with these studies in that they try to transform the request access patterns from the applications. In contrast to these studies, our study focuses on optimizing the access pattern inside the distributed file system layer. This allows the distributed file system to operate without any specific hardware or local file system requirements. Thus, users can utilize the existing hardware in the system and select a local file system that is the most efficient based on their application behaviour.
In this article, we propose an address transformation scheme to improve the performance of distributed file systems equipped with SSDs. To do this, our scheme transforms the write access pattern into sequential patterns and store the remapping information in the table (remapping table). We apply our scheme to Lustre [3] distributed file system which is widely used in many HPC systems [14], [15], [16]. For evaluation, we use consumer-grade SATA SSDs and enterprise-grade NVMe SSDs. Our experimental result shows that our scheme can improve by up to 46.26% compared with the existing scheme. To the best of our knowledge, this is the first study that proposes an address transformation scheme in a distributed file system.
Our contributions are as follows:

•We analyse the I/O operation in the distributed file system.•We design and implement an access pattern reshaping scheme for distributed file systems.•We demonstrate that our proposed scheme can improve the I/O performance of the distributed file system in both consumer and enterprise grade SSDs.
The rest of the article is as follows: Section 2 describes the background. Section 3 shows the overall design of our proposed scheme. Section 4 presents the experimental result using our proposed scheme. Section 5 discusses the related work and Section 6 concludes the article.
