User behavior analysis (UBA) has been widely used to identify customers (Zaim et al., 2019), realize personalized service (Jiang et al., 2019), improve service quality (Wang et al., 2017), monitor and filter the access behavior (Peng et al., 2016, Cao et al., 2020), detect anomalies (Cao et al., 2017) and track the illegal collection of personal information in mobile applications (Liu et al., 2020). In these applications accurately extracting the click-streams is a fundamental issue to be addressed.
A click-stream comprises only those HTTP(S) requests that correspond to the web objects clicked by users. As a click-stream can directly indicate the concerns, intentions, and actions of web users, it has received much attention in UBA. Click-streams are currently extracted using three types of methods. The first type is designed for the server-side or service provider. One of the well-known methods is based on the type of accessed files (Cooley et al., 1999, Huiying and Wei, 2004, Chitraa et al., 2013) and the scripts embedded in the web pages (Silverstein et al., 1999, Spink et al., 2005, Rafter and Smyth, 2001). For example, htm/html files are usually considered to have a greater probability of being clicked by users than other elements of web pages (Anand and Aggarwal, 2012), while the scripts and controllers embedded in webpages can be used to record the mouse actions of users (Benevenuto et al., 2009). In addition, some methods based on machine learning are also used for click identification (Xie and Yu, 2008, Xu et al., 2013). However, the main issue of these type of methods is that they can only record the access paths on a specific web site rather than the complete click-trajectories of users. Considering that a user’s web surfing usually involves multiple web sites and servers, client-side methods have been developed to obtain the complete click-actions of users. For example, plugins or resident codes are implanted into the terminals of web users to obtain their click-actions and targets (Atterer et al., 2006, Huang and White, 2010). However, this type of method is not widely accepted because it infringes on the privacy and security of users.
To address the limitations of these methods, network-side methods have received a lot of attention (Schneider et al., 2009, Xie et al., 2013, Ben Houidi et al., 2014, Vassio et al., 2016, Rizothanasis et al., 2016). In these works, information located in the fields of HTTP header is measured from the web traffic and is adopted for click-request identification. Commonly used fields include “URL”, “Referer”, “Content-Type” and “User-Agent”. Compared with the methods designed for the server-side and the client-side, the network-side methods based on the information of the HTTP header show better performance because they can reconstruct a user’s complete click-trajectory when (s)he is surfing from one web site to another, particularly for those scenarios wherein management strategies are required to be adjusted based on the click-behavior of users, e.g., enterprise networks. However, the popularity of HTTPS has brought new challenges to these methods. As HTTPS encrypts the entire HTTP message, HTTP header-based methods cannot correctly access the required information. Therefore, the traditional network-side identification methods gradually become unworkable. Although the encryption of HTTPS does not involve most of the information used for UBA, such as the source/destination IP/port, the target host, the size of request/response, and the session duration, UBA on the network-side becomes extremely difficult because of the lack of effective methods in identifying click-requests from the HTTPS traffic.
To tackle this challenge, in this work we propose a new scheme to identify click-requests on the network-side, such as the access networks and the backbone networks of the Internet Service Providers (ISPs). As usually only encrypted HTTPS traffic can be observed on the network-side instead of plaintext HTTP, we achieve the click-request identification through traffic behavior without involving any information of the payload. Considering that there are only two possible sources for each HTTP(S) request, i.e., an HTTP(S) request can only be generated by a user’s click-action or emitted automatically by a browser to request the embedded element of the web page, the essence of this scheme is to solve a binary classification problem for the HTTP(S) traffic. In contrast to existing works, the proposed scheme utilizes the inherent behavior characteristics of each type of the HTTP(S) request for identification rather than relying on the plain text information of the HTTP header. Consequently, the proposed scheme is encryption-independent and does not involve the privacy of users. To this end, we adopt two hidden Markov models (HMMs) to describe the time-varying behavior of the web traffic driven by the click activities of users and the automatic operations of browsers, respectively. Furthermore, a deep neural network (DNN) is integrated into the HMMs to capture the context of the web traffic and eliminate the limitations caused by the independence hypothesis of the traditional HMMs. Finally, a DNN-based rear classifier is proposed to determine the type of the HTTP(S) requests according to the fitting degree between the HTTP(S) request and the behavior models. The main contributions of this work are threefold.

•A new behavior-based classification scheme is introduced for click-request identification that is suitable for UBA on the network-side and is encryption-independent.•A new HMM-DNN integrated model is proposed to capture the time-varying behavior patterns of click and non-click web traffic, which makes full use of the context-related information of the HTTP(S) request to be identified.•New algorithms that do not rely on the Gaussian mixture models are derived for model learning and click-request detection. Experiments are conducted to validate the proposed approach.
The rest of the paper is organized as follows. In Section 2, we review the related works. In Section 3, we introduce the rationale of the proposed scheme. Experiments and performance evaluations are shown in Section 4. We discuss the performance related issues of the proposed approach in Section 5 and finally summarize our work in Section 6.
