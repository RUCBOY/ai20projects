XACML (eXtensible Access Control Markup Language) defines an architecture for the access control mechanism, which consists of requests, responses and policies. A client sends a request to a server to check whether a given action should be allowed. The server evaluates the request against the available policies and returns a response [1]. A policy is a set of rules that stipulate some requirements of resource owners and administrators for resource utilization. Multiple policies are combined to form a policy set [2].
Access control is an important component of security requirements in an SOA (Service-Oriented Architecture) environment. It aims to control or protect an access to published resources through technologies such as identity authentication or dynamic authorization. An authorization service system is an implementation of access control.
In an authorization service system, PEP (Policy Execution Point) sends users' access requests to PDP (Policy Decision Point). PDP is responsible for evaluating access requests, completing the matching of requests with applicable rules in a policy set, and returning evaluation results. The faster the speed of rule matching, the better the PDP performance. As a critical part of an access control model, the PDP evaluation performance determines the operating efficiency of an authorization service system to some extent [3].
In recent years, the number of rules and policies grows rapidly [4]. The performance of an authorization service system can easily run into bottlenecks when loading a large-scale policy set [5]. Since a PDP may load a large number of policies that contain many rules, the evaluation time of the PDP increases sharply [6].
In this regard, Marouf et al. [2] apply the K-means algorithm to cluster policies according to the subject attributes. Every cluster is generated in view of some measures of similarity to the other elements in that cluster. Deng et al. [7] cluster all rules based on the subject attributes, and then cluster again according to the similarity among rules with the same subject.
However, the existing studies do not fully consider improving the speed of rule matching after dividing policies into sub-policies to search one corresponding rule. It affects the operating efficiency of an authorization service system, due to the limitation of improving the PDP evaluation performance. The contributions of this paper are stated as follows.
1)For each access request, the LDA (Latent Dirichlet Allocation) topic model [8] is applied to determine which topics include the rule that matches the request, thereby eliminating the need to traverse all rules. The rules under each topic are divided into different classes according to their cosine values with the topic vectors obtained by the LDA topic model. Each class stores the cosine values and indexes of their corresponding rules in a dictionary [9]. This hashing method increases the searching speed when a request is matched in sub-policies.2)For the topics that a request matches, we do a parallel search in each topic to significantly reduce the time that the specific rule is matched in the resulting topics calculated by the LDA.3)The proposed policy evaluation engine XDLEngine can meet the application requirements for a large-scale policy set, and improve the PDP evaluation performance.
The remainder of paper is organized as follows. Section 2 compares the pervasive methods of improving the PDP evaluation performance. Our approaches of policy preprocessing and matching are outlined in Section 3. In Section 4, an LDA topic model and cosine similarity classification are developed to analyze and classify rules. Section 5 focuses on experimental comparisons and analyses. Finally, this paper is summarized in Section 6.
