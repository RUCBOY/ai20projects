Large scale engineering systems derive their complexity not only by the sheer number of components and subsystems and the diversity of the disciplinary bases needed in design, but by the nature of interdependencies among constituent elements. Complex engineering systems are not decomposable into quasi-independent elements, in such a way that the behaviour and performance of elements can be isolated, and their design can be organized in relatively autonomous units. Furthermore, several interdependencies cannot be identified and modelled at an early stage but emerge only during the design process, and in some unfortunate cases, even after use.
In this paper we focus on interdependencies in large scale engineering systems at an early stage of the design process, the management of technical requirements in the contract acquisition process, which includes the analysis of the tender, the quotation of the technical and economic offer and the treatment of all contractual and legal implications. Based on recent breakthrough results in automatic analysis of Functional-Behaviour-Structure (FBS) in engineering design research (Fantoni et al., 2013), we develop a novel methodology for the semi-automatic treatment of large technical documentation attached to the tender and used in proposal management; we then test the methodology in a real life industrial setting and show the large increase in performance with respect to currently available solutions. The implementation of the methodology has been carried within a project for AnsaldoBreda S.p.A. (now Hitachi Rail Europe), a leading train manufacturer, by the Consortium for Quality and Innovation Engineering (QuInn) based at the University of Pisa.
Nowadays there are technologies able to analyze huge amounts of text written in natural language, extract information from them and represent them in a structured way. In the paper the attributes and the performances of such technologies and their application to the automatic analysis of requirements are illustrated, on the basis of Computational Linguistics, that deals with the analysis and the processing of natural language using algorithms and computers.
The technical documentation attached to tenders is typically huge in size and complexity. For large engineering systems it may easily exceed 10,000 technical requirements, not necessarily organized in a clear and unambiguous way, or drafted following international standards. These requirements must be extracted and classified (an activity which itself may require 20–30 man-days for large tenders), allocated to design subsystems and assigned to the responsible design units within the company. After the allocation of requirements to units, the proposal preparation takes place with preliminary technical design activity needed in order to produce cost, quality and delivery estimations. During this process, the management of interdependencies between subsystems takes place in the context of review meetings but is rarely carried out in a systematic way. This process takes place under severe time pressure. Consequently, there are several sources of risks that are difficult to recognize at an early stage. First, the allocation of requirements to design units is done by senior engineers based on professional experience and knowledge of the overall system, but due to time pressure it is not supported by a formal analysis. Software support tools currently available on the market offer only list-like check instruments. Senior engineers may not identify all the requirements within a huge body of text, may assign incorrectly the requirements to designers, may fail in capturing the interdependencies between subsystems and components impacted by the same set of requirements, may omit to transmit the relevant information on interdependencies to all project teams involved. Second, if requirements issued by customers are unclear and ambiguous or contain omissions, inconsistencies, mistakes, contradictions (among them and sometimes they are in conflict even with national and international standards), all these problems may remain unnoticed until the detailed design activity takes place. At that point, it may be difficult to obtain contract amendments from the customer. More likely, suppliers will be asked to cope with the contract by absorbing the costs of unnoticed problems. Legal action from the supplier can destroy the trust needed in the buyer-seller relation. Even if the expert, being particularly careful, could identify errors and omissions and clarify them by negotiating with the client, he would hardly be able to identify misalignments and contradictions between tender requirements which are physically far apart within the document but related at the company system level. Third, after the signature of the contract, any modification resulting from a better appreciation of interdependencies in the tender may originate disputes and may be costly to settle. Summing up, the complexity of the engineering systems implies a number of sources of risks for the supplier.
This complexity has also a number of economic and managerial consequences. The economic analysis of procurement contracts (Laffont and Tirole, 1993; Dimitri et al., 2006) has shown that when there is uncertainty on the contract execution, the supplier is usually at disadvantage, as witnessed by the widespread adoption of contractual penalties (see also Baker et al., 1994; Fehr and Schmidt, 2007; MacLeod, 2007). From a managerial perspective, the complexity of design interdependencies makes it difficult to organize the design activity in an effective way (Baldwin and Clark, 2000; Ulrich and Eppinger, 2008) and all mistakes done in the early stages have far-reaching downstream negative implications (Smith and Eppinger, 1997; Thomke and Bell, 2001). Moreover, public procurement, characterized by huge spending flows, represents a domain where innovation could significatively impact (Nečaský et al., 2014).
Summing up according with ElMaraghy et al. (ElMaraghy et al., 2012), the sources of complexity arise from: the number of the parts, the number of their interactions, the high coupled design (Suh, 2005), the variety of the requested competences to be orchestrate (mechanical, electrical, electronic, control modules, software, human-machine interface, web structure), the complexity of the product development process, that of manufacturing and assembly processes, the management of the supply chain of both design and manufacturing enterprises and their globalisation. Last, the size of the frames of the train, the external and internal logistic issues increase the complexity at all levels. All is worsened by the uncertainty due to the first phases of the design process and time pressure.
From the above arguments it is clear why making the analysis of technical requirements more effective during the contract acquisition stage is important: the return of an early investment into new methods in terms of the downstream benefits from reduced costs and risks, but also from increased reputation and trust from customers, is significant. It is recognized that reducing the time needed for tender analysis and increasing the precision of requirements extraction from huge amounts of tender documents are key factors directly impacting on firms finance and reputation (Rajbabu et al., 2018).
Usually, contract title, start date, end date etc. are extracted from tenders by applying mixed approaches: handcrafted features, post processing rules and Machine Learning techniques (Chalkidis et al., 2017). This paper proposed a further step, developing a tool able to automatically extract the requirements and assign them to the most suitable enterprise system for analyzing and processing them.
After a detailed exploration of complexity in tender analysis (Section 2) in order to better define the problems we are dealing with, the paper is structured as follows: firstly, the methodology is presented (Section 3); secondly, the Interface Matrix, one of the main outputs of methodology application, is presented (Section 4); then, the results are presented and discussed through their validation and the presentation of the final tool (Section 5). Finally, open issues and future developments are presented (Section 6).
