The evolution of integration technology starts from the point-to-point connection between applications which is simple yet tightly coupled with the convergence of multiple Advanced Technologies (AT), Big Data (BD), real-time data analytics, Cloud Computing (CC), Internet of Things (IoT), Artificial Intelligence (AI), Machine Learning (ML), commodity sensors and actuators and embedded systems that support one or more common but complex ecosystems, controlled via a host of applications and devices that are primarily driven by software, regardless, whether it is a system, a firmware or an application based software. This is provided by an Enterprise Application Integration (EAI) hub that offers a set of applications to integrate via a centralised virtual hub which is far easier to manage. EAI is not an approach like SOA or ESB Enterprise Service Bus (ESB). Rather, to avoid any confusion, EAI is the utilisation of technologies and services within an enterprise, allowing the integration of hardware systems and software applications. It is related to the middleware and distributed technologies but also handles a larger number of integration connections. Service Oriented Architecture (SOA) manages integration through choreography of services. SOA also offers flexible loose coupling connections increasing efficiency, anamorphic project cycle development, agility, and reusability in integrating disparate multiple information sources and data in a coordinated fashion in a distributed environment.
Computer systems and application services have become very complex to manage and integrate across different platforms [1]. The overwhelming need of stored/silos data to be managed across multiple agencies requires automated collaborations to avoid the redundancy and increase in the integrity of the available information. Managing information across large scale public and private computer systems is an extremely complex process which is very labour intensive [2]. One solution to this challenge is to utilise SOA as a middleware platform [1,3]. The effective integration of these disparate systems would result in proper operation and management of systems which would in turn, lead to significant flexibility and cost savings [4].
Furthermore, SOA is not only related to Information Communication Technology (ICT), but also helps to align ICT and business processes. It improves decision making and operational efficiency. SOA integrates disparate multiple information and data sources in a loosely coupling arrangement which allows the integration with no concern of the technical dependencies. SOA and service-orientation have set the foundation for a variety of emergent service technology innovations such as AT encompassing BD, CC and IoT, while the original building blocks of SOA service-orientation persist to evolve through incorporating fundamental service technologies, practices and concepts as well as handholding legacy systems [5].
In SOA implementation in managing the information systems and enhancing both data and information sharing is not a newly devised creation. Nonetheless, most SOA implementations in service mainly focus on proprietary SOA but open source SOA implementations have come through the last decade as demonstrated in the authoritative book by Jeff Davis [6]. Open source development is a rapid evolutionary process involving multiple contributors that leverages large-scale peer review of software before deployment. The fundamental principle of Open Source Software (OSS) development is to allow free modification and redistribution of the source code that can be incrementally enhanced and easier to test, resulting in highly reliable products. In SOA adoption, open source SOA offers persuasive advantages over proprietary SOA suites but there are some counter arguments against it in terms of system performance and trustworthiness [7]. In cognizant of this fact, the use of open standards and specifications in developing open source software eliminates the risk of vendors lock-in associated with proprietary solution, offering “universal” interoperability.
More recently, the concept of system integration is mostly affected by the advances in advanced distributed computing which succour different applications share functionality and data which is the fundamental objective of system integration and SOA. Service orientation is not only about sharing data among different applications, but also the sharing of functionalities by different applications interworking to satisfy specific business objectives and logistics. SOA provides an architectural framework design to connect information systems in a way that business processes and data can be reused as multiple ways and services satisfying different end-user applications. Some applications publish the services and others consume the services to ease promotion and accessibility respectively. Typically, the business processes and data are not duplicated and these can be reused throughout the enterprise to suite different purposes. The concept of usability of services introduced by SOA has helped enterprises and organizations to accomplish their business goals and enabled them to be more responsive to the dynamic market and user changes. This paper provides an overview of SOA, Web and OSS, it answers the research questions of system integration, usability of services and reuse of data, and it presents a comparative analysis of open source vs. proprietary SOA for large scale computer systems utilising advanced technologies by examining their main abilities, features, pros and cons, and most importantly capturing their generic technical functional and non-functional requirements in a unified manner to add utility to the body of available published knowledge. From the research work reported in this paper, the capturing and consolidation of functional and non-functional requirements in the framework of open/close source is believed to be the first of its kind, which would be of tremendous value to the business and ICT communities. Furthermore, the SOA extended evaluation criteria, recommendations and conclusions are also presented. However, Web services are prone to security, privacy, data protection and reliability issues which, although are outside the scope of this paper, are important operational and future research topics.
